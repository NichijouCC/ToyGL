{"version":3,"file":"dome.js","sources":["../src/resources/base/loadEnum.ts","../src/resources/base/helper.ts","../src/resources/assetmgr.ts","../node_modules/twebgl/src/GLConstant.ts","../node_modules/twebgl/src/programInfo.ts","../node_modules/twebgl/src/glconstant.ts","../node_modules/twebgl/src/Twebgl.ts","../src/ec/ec.ts","../src/mathD/common.ts","../src/mathD/vec3.ts","../src/mathD/mat4.ts","../src/render/renderList.ts","../src/mathD/color.ts","../src/gameScreen.ts","../src/ec/components/camera.ts","../src/mathD/Mat3.ts","../src/mathD/quat.ts","../src/ec/components/transform.ts","../examples/main.ts"],"sourcesContent":["export enum LoadEnum {\r\n    Success = \"Success\",\r\n    Failed = \"Failed\",\r\n    Loading = \"Loading\",\r\n    None = \"None\",\r\n}\r\n","//通过url获取资源的名称(包含尾缀)\r\nexport function getFileName(url: string): string {\r\n    let filei = url.lastIndexOf(\"/\");\r\n    let file = url.substr(filei + 1);\r\n    return file;\r\n}\r\nexport function getFileNameWithoutExtralName(url: string): string {\r\n    let filei = url.lastIndexOf(\"/\");\r\n    let file = url.substr(filei + 1);\r\n\r\n    let index = file.indexOf(\".\", 0);\r\n    let name = file.substr(0, index);\r\n    return name;\r\n}\r\n// static getAssetExtralType(url: string): AssetExtralEnum {\r\n//     let index = url.lastIndexOf(\"/\");\r\n//     let filename = url.substr(index + 1);\r\n//     index = filename.indexOf(\".\", 0);\r\n//     let extname = filename.substr(index);\r\n//     let type = this.ExtendNameDic[extname];\r\n//     if (type == null) {\r\n//         console.warn(\"Load Asset Failed.type:(\" + type + \") not have loader yet\");\r\n//     }\r\n//     return type;\r\n// }\r\nexport function getAssetExtralName(url: string): string {\r\n    let index = url.lastIndexOf(\"/\");\r\n    let filename = url.substr(index + 1);\r\n    index = filename.indexOf(\".\", 0);\r\n    let extname = filename.substr(index);\r\n    return extname;\r\n}\r\n","import { IassetLoader, IassetLoadInfo, Iasset, IassetMgr } from \"./type\";\r\nimport { LoadEnum } from \"./base/loadEnum\";\r\nimport { IprogramInfo } from \"../render/glRender\";\r\nimport { getAssetExtralName } from \"./base/helper\";\r\n\r\n// export class DefaultAssetMgr {\r\n//     //#region -------------------default resource\r\n//     initDefAsset() {\r\n//         DefTexture.initDefaultTexture();\r\n//         DefMesh.initDefaultMesh();\r\n//         DefShader.initDefaultShader();\r\n//         DefMatrial.initDefaultMat();\r\n//     }\r\n\r\n//     mapDefaultMesh: { [id: string]: Mesh } = {};\r\n//     getDefaultMesh(name: string): Mesh {\r\n//         return this.mapDefaultMesh[name];\r\n//     }\r\n//     mapDefaultTexture: { [id: string]: Texture } = {};\r\n//     getDefaultTexture(name: string): Texture {\r\n//         return this.mapDefaultTexture[name];\r\n//     }\r\n//     mapDefaultCubeTexture: { [id: string]: CubeTexture } = {};\r\n//     getDefaultCubeTexture(name: string): CubeTexture {\r\n//         return this.mapDefaultCubeTexture[name];\r\n//     }\r\n//     mapDefaultMat: { [id: string]: Material } = {};\r\n//     getDefaultMaterial(name: string) {\r\n//         return this.mapDefaultMat[name];\r\n//     }\r\n// }\r\n\r\n/**\r\n * 资源都继承web3dAsset 实现Iasset接口,有唯一ID\r\n *\r\n * assetmgr仅仅管理load进来的资源\r\n * load过的资源再次load不会造成重复加载\r\n * 所有的资源都是从资源管理器load（url）出来，其他接口全部封闭\r\n * 资源的来源有三种：new、load、内置资源\r\n * bundle包不会shared asset,bundle不会相互依赖。即如果多个bundle引用同一个asset,每个包都包含一份该资源.\r\n *\r\n *\r\n * 资源释放：\r\n * gameobject（new或instance的）通过dispose 销毁自己的内存，不销毁引用的asset\r\n * asset 可以通过dispose 销毁自己的内存。包释放(prefab/scene/gltfbundle)也属于asset的释放,包会释放自己依赖的asset。\r\n *\r\n */\r\n\r\nexport class AssetLoader {\r\n    static RegisterAssetLoader(extral: string, factory: () => IassetLoader) {\r\n        // this.ExtendNameDic[extral] = type;\r\n        this.RESLoadDic[extral] = factory;\r\n    }\r\n    //private static ExtendNameDic: { [name: string]: AssetExtralEnum } = {};\r\n    private static RESLoadDic: { [ExtralName: string]: () => IassetLoader } = {};\r\n\r\n    static getAssetLoader(url: string): IassetLoader {\r\n        let extralType = getAssetExtralName(url);\r\n        let factory = this.RESLoadDic[extralType];\r\n        return factory && factory();\r\n    }\r\n    // //-------------------资源加载拓展\r\n    // static RegisterAssetExtensionLoader(extral: string, factory: () => IassetLoader) {\r\n    //     this.RESExtensionLoadDic[extral] = factory;\r\n    // }\r\n\r\n    // private static RESExtensionLoadDic: { [ExtralName: string]: () => IassetLoader } = {};\r\n}\r\n\r\nexport class AssetMgr implements IassetMgr {\r\n    mapShader: { [id: string]: IprogramInfo } = {};\r\n    getShader(name: string): IprogramInfo {\r\n        return this.mapShader[name];\r\n    }\r\n    //#endregion\r\n    /**\r\n     * 调用load方法就会塞到这里面来\r\n     */\r\n    private loadMap: {\r\n        [url: string]: { asset: Iasset | null; loadinfo: IassetLoadInfo | null };\r\n    } = {};\r\n    /**\r\n     * load同一个资源监听回调\r\n     */\r\n    private loadingUrl: { [url: string]: ((asset: Iasset | null, loadInfo?: IassetLoadInfo) => void)[] } = {}; //\r\n\r\n    getAssetLoadInfo(url: string): IassetLoadInfo | null {\r\n        if (this.loadMap[url]) {\r\n            return this.loadMap[url].loadinfo;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载资源\r\n     * @param url 地址\r\n     * @param onFinish  load回调]\r\n     */\r\n    load(\r\n        url: string,\r\n        onFinish: ((asset: Iasset | null, loadInfo?: IassetLoadInfo) => void) | null = null,\r\n        onProgress: (progress: number) => void = null,\r\n    ): Iasset | null {\r\n        if (this.loadMap[url]) {\r\n            if (onFinish) {\r\n                switch (this.loadMap[url].loadinfo.loadState) {\r\n                    case LoadEnum.Success:\r\n                    case LoadEnum.Failed:\r\n                        onFinish(this.loadMap[url].asset, this.loadMap[url].loadinfo);\r\n                        break;\r\n                    case LoadEnum.Loading:\r\n                        if (this.loadingUrl[url] == null) {\r\n                            this.loadingUrl[url] = [];\r\n                        }\r\n                        this.loadingUrl[url].push(onFinish);\r\n                        break;\r\n                    default:\r\n                    case LoadEnum.None:\r\n                        console.error(\"load error 为啥出现这种情况！\");\r\n                        break;\r\n                }\r\n            }\r\n            return this.loadMap[url].asset;\r\n        } else {\r\n            let factory: IassetLoader = AssetLoader.getAssetLoader(url);\r\n            let _state: IassetLoadInfo = { url: url, loadState: LoadEnum.None };\r\n            this.loadMap[url] = { asset: null, loadinfo: _state };\r\n\r\n            if (factory == null) {\r\n                let errorMsg =\r\n                    \"ERROR: load Asset error. INfo: not have Load Func to handle (\" +\r\n                    getAssetExtralName(url) +\r\n                    \") type File.  load URL:\" +\r\n                    url;\r\n                _state.err = new Error(errorMsg);\r\n                console.error(errorMsg);\r\n                if (onFinish) {\r\n                    onFinish(null, _state);\r\n                }\r\n                return null;\r\n            } else {\r\n                let asset = factory.load(\r\n                    url,\r\n                    (asset, state) => {\r\n                        //-------------------------------存进资源存储map\r\n                        _state.loadState = state.loadState;\r\n                        //---------------------回调事件\r\n                        if (onFinish) {\r\n                            onFinish(asset, state);\r\n                        }\r\n                        //------------------监听此资源loadfinish的事件\r\n                        let arr = this.loadingUrl[url];\r\n                        this.loadingUrl[url] = null;\r\n                        delete this.loadingUrl[url]; //set loadingUrl null\r\n                        if (arr) {\r\n                            arr.forEach(func => {\r\n                                func(asset, state);\r\n                            });\r\n                        }\r\n                    },\r\n                    onProgress,\r\n                );\r\n                _state.loadState = LoadEnum.Loading;\r\n                this.loadMap[url].asset = asset;\r\n                return asset;\r\n            }\r\n        }\r\n    }\r\n\r\n    loadAsync(url: string): Promise<Iasset> {\r\n        return new Promise((resolve, reject) => {\r\n            this.load(url, (asset, loadInfo) => {\r\n                if (loadInfo.loadState == LoadEnum.Success) {\r\n                    resolve(asset);\r\n                } else {\r\n                    reject(new Error(\"Load Failed.\"));\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n//<<<<<<<--------1.  new出来的自己管理,如果进行管控,assetmgr必然持有该资源的引用。当用该资源的对象被释放,该对象对该资源的引用也就没了,但是assetmgr持有它的引用，资源也就是没被释放;\r\n//释放对象的时候我们又不能对资源进行释放，不然其他对象使用该资源就会报错，对于new出的资源,没被使用就会被系统自动释放或者自己释放-------------------->>>>>>>>>\r\n//<<<<<<<------- 2.  资源的name不作为asset的标识.不然造成一大堆麻烦。如果允许重名资源在assetmgr获取资源的需要通过bundlename /assetname才能正确获取资源,bundlename于asset来说不一定有;\r\n//new asset的时候还要检查重名资源,允许还是不允许都是麻烦—--->>>>>>>>>>>>>>>>>>>>>>>\r\n//<<<<<<<--------3.  资源本身的描述json，不会被作为资源被assetmgr管理起来-->>>\r\n","/**\r\n * Enum containing WebGL Constant values by name.\r\n * for use without an active WebGL context, or in cases where certain constants are unavailable using the WebGL context\r\n * (For example, in [Safari 9]{@link https://github.com/AnalyticalGraphicsInc/cesium/issues/2989}).\r\n *\r\n * These match the constants from the [WebGL 1.0]{@link https://www.khronos.org/registry/webgl/specs/latest/1.0/}\r\n * and [WebGL 2.0]{@link https://www.khronos.org/registry/webgl/specs/latest/2.0/}\r\n * specifications.\r\n */\r\nexport enum GlConstants {\r\n    DEPTH_BUFFER_BIT = 0x00000100,\r\n    STENCIL_BUFFER_BIT = 0x00000400,\r\n    COLOR_BUFFER_BIT = 0x00004000,\r\n    POINTS = 0x0000,\r\n    LINES = 0x0001,\r\n    LINE_LOOP = 0x0002,\r\n    LINE_STRIP = 0x0003,\r\n    TRIANGLES = 0x0004,\r\n    TRIANGLE_STRIP = 0x0005,\r\n    TRIANGLE_FAN = 0x0006,\r\n    ZERO = 0,\r\n    ONE = 1,\r\n    SRC_COLOR = 0x0300,\r\n    ONE_MINUS_SRC_COLOR = 0x0301,\r\n    SRC_ALPHA = 0x0302,\r\n    ONE_MINUS_SRC_ALPHA = 0x0303,\r\n    DST_ALPHA = 0x0304,\r\n    ONE_MINUS_DST_ALPHA = 0x0305,\r\n    DST_COLOR = 0x0306,\r\n    ONE_MINUS_DST_COLOR = 0x0307,\r\n    SRC_ALPHA_SATURATE = 0x0308,\r\n    FUNC_ADD = 0x8006,\r\n    BLEND_EQUATION = 0x8009,\r\n    BLEND_EQUATION_RGB = 0x8009, // same as BLEND_EQUATION\r\n    BLEND_EQUATION_ALPHA = 0x883d,\r\n    FUNC_SUBTRACT = 0x800a,\r\n    FUNC_REVERSE_SUBTRACT = 0x800b,\r\n    BLEND_DST_RGB = 0x80c8,\r\n    BLEND_SRC_RGB = 0x80c9,\r\n    BLEND_DST_ALPHA = 0x80ca,\r\n    BLEND_SRC_ALPHA = 0x80cb,\r\n    CONSTANT_COLOR = 0x8001,\r\n    ONE_MINUS_CONSTANT_COLOR = 0x8002,\r\n    CONSTANT_ALPHA = 0x8003,\r\n    ONE_MINUS_CONSTANT_ALPHA = 0x8004,\r\n    BLEND_COLOR = 0x8005,\r\n    ARRAY_BUFFER = 0x8892,\r\n    ELEMENT_ARRAY_BUFFER = 0x8893,\r\n    ARRAY_BUFFER_BINDING = 0x8894,\r\n    ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,\r\n    STREAM_DRAW = 0x88e0,\r\n    STATIC_DRAW = 0x88e4,\r\n    DYNAMIC_DRAW = 0x88e8,\r\n    BUFFER_SIZE = 0x8764,\r\n    BUFFER_USAGE = 0x8765,\r\n    CURRENT_VERTEX_ATTRIB = 0x8626,\r\n    FRONT = 0x0404,\r\n    BACK = 0x0405,\r\n    FRONT_AND_BACK = 0x0408,\r\n    CULL_FACE = 0x0b44,\r\n    BLEND = 0x0be2,\r\n    DITHER = 0x0bd0,\r\n    STENCIL_TEST = 0x0b90,\r\n    DEPTH_TEST = 0x0b71,\r\n    SCISSOR_TEST = 0x0c11,\r\n    POLYGON_OFFSET_FILL = 0x8037,\r\n    SAMPLE_ALPHA_TO_COVERAGE = 0x809e,\r\n    SAMPLE_COVERAGE = 0x80a0,\r\n    NO_ERROR = 0,\r\n    INVALID_ENUM = 0x0500,\r\n    INVALID_VALUE = 0x0501,\r\n    INVALID_OPERATION = 0x0502,\r\n    OUT_OF_MEMORY = 0x0505,\r\n    CW = 0x0900,\r\n    CCW = 0x0901,\r\n    LINE_WIDTH = 0x0b21,\r\n    ALIASED_POINT_SIZE_RANGE = 0x846d,\r\n    ALIASED_LINE_WIDTH_RANGE = 0x846e,\r\n    CULL_FACE_MODE = 0x0b45,\r\n    FRONT_FACE = 0x0b46,\r\n    DEPTH_RANGE = 0x0b70,\r\n    DEPTH_WRITEMASK = 0x0b72,\r\n    DEPTH_CLEAR_VALUE = 0x0b73,\r\n    DEPTH_FUNC = 0x0b74,\r\n    STENCIL_CLEAR_VALUE = 0x0b91,\r\n    STENCIL_FUNC = 0x0b92,\r\n    STENCIL_FAIL = 0x0b94,\r\n    STENCIL_PASS_DEPTH_FAIL = 0x0b95,\r\n    STENCIL_PASS_DEPTH_PASS = 0x0b96,\r\n    STENCIL_REF = 0x0b97,\r\n    STENCIL_VALUE_MASK = 0x0b93,\r\n    STENCIL_WRITEMASK = 0x0b98,\r\n    STENCIL_BACK_FUNC = 0x8800,\r\n    STENCIL_BACK_FAIL = 0x8801,\r\n    STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,\r\n    STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,\r\n    STENCIL_BACK_REF = 0x8ca3,\r\n    STENCIL_BACK_VALUE_MASK = 0x8ca4,\r\n    STENCIL_BACK_WRITEMASK = 0x8ca5,\r\n    VIEWPORT = 0x0ba2,\r\n    SCISSOR_BOX = 0x0c10,\r\n    COLOR_CLEAR_VALUE = 0x0c22,\r\n    COLOR_WRITEMASK = 0x0c23,\r\n    UNPACK_ALIGNMENT = 0x0cf5,\r\n    PACK_ALIGNMENT = 0x0d05,\r\n    MAX_TEXTURE_SIZE = 0x0d33,\r\n    MAX_VIEWPORT_DIMS = 0x0d3a,\r\n    SUBPIXEL_BITS = 0x0d50,\r\n    RED_BITS = 0x0d52,\r\n    GREEN_BITS = 0x0d53,\r\n    BLUE_BITS = 0x0d54,\r\n    ALPHA_BITS = 0x0d55,\r\n    DEPTH_BITS = 0x0d56,\r\n    STENCIL_BITS = 0x0d57,\r\n    POLYGON_OFFSET_UNITS = 0x2a00,\r\n    POLYGON_OFFSET_FACTOR = 0x8038,\r\n    TEXTURE_BINDING_2D = 0x8069,\r\n    SAMPLE_BUFFERS = 0x80a8,\r\n    SAMPLES = 0x80a9,\r\n    SAMPLE_COVERAGE_VALUE = 0x80aa,\r\n    SAMPLE_COVERAGE_INVERT = 0x80ab,\r\n    COMPRESSED_TEXTURE_FORMATS = 0x86a3,\r\n    DONT_CARE = 0x1100,\r\n    FASTEST = 0x1101,\r\n    NICEST = 0x1102,\r\n    GENERATE_MIPMAP_HINT = 0x8192,\r\n    BYTE = 0x1400,\r\n    UNSIGNED_BYTE = 0x1401,\r\n    SHORT = 0x1402,\r\n    UNSIGNED_SHORT = 0x1403,\r\n    INT = 0x1404,\r\n    UNSIGNED_INT = 0x1405,\r\n    FLOAT = 0x1406,\r\n    DEPTH_COMPONENT = 0x1902,\r\n    ALPHA = 0x1906,\r\n    RGB = 0x1907,\r\n    RGBA = 0x1908,\r\n    LUMINANCE = 0x1909,\r\n    LUMINANCE_ALPHA = 0x190a,\r\n    UNSIGNED_SHORT_4_4_4_4 = 0x8033,\r\n    UNSIGNED_SHORT_5_5_5_1 = 0x8034,\r\n    UNSIGNED_SHORT_5_6_5 = 0x8363,\r\n    FRAGMENT_SHADER = 0x8b30,\r\n    VERTEX_SHADER = 0x8b31,\r\n    MAX_VERTEX_ATTRIBS = 0x8869,\r\n    MAX_VERTEX_UNIFORM_VECTORS = 0x8dfb,\r\n    MAX_VARYING_VECTORS = 0x8dfc,\r\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8b4d,\r\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8b4c,\r\n    MAX_TEXTURE_IMAGE_UNITS = 0x8872,\r\n    MAX_FRAGMENT_UNIFORM_VECTORS = 0x8dfd,\r\n    SHADER_TYPE = 0x8b4f,\r\n    DELETE_STATUS = 0x8b80,\r\n    LINK_STATUS = 0x8b82,\r\n    VALIDATE_STATUS = 0x8b83,\r\n    ATTACHED_SHADERS = 0x8b85,\r\n    ACTIVE_UNIFORMS = 0x8b86,\r\n    ACTIVE_ATTRIBUTES = 0x8b89,\r\n    SHADING_LANGUAGE_VERSION = 0x8b8c,\r\n    CURRENT_PROGRAM = 0x8b8d,\r\n    NEVER = 0x0200,\r\n    LESS = 0x0201,\r\n    EQUAL = 0x0202,\r\n    LEQUAL = 0x0203,\r\n    GREATER = 0x0204,\r\n    NOTEQUAL = 0x0205,\r\n    GEQUAL = 0x0206,\r\n    ALWAYS = 0x0207,\r\n    KEEP = 0x1e00,\r\n    REPLACE = 0x1e01,\r\n    INCR = 0x1e02,\r\n    DECR = 0x1e03,\r\n    INVERT = 0x150a,\r\n    INCR_WRAP = 0x8507,\r\n    DECR_WRAP = 0x8508,\r\n    VENDOR = 0x1f00,\r\n    RENDERER = 0x1f01,\r\n    VERSION = 0x1f02,\r\n    NEAREST = 0x2600,\r\n    LINEAR = 0x2601,\r\n    NEAREST_MIPMAP_NEAREST = 0x2700,\r\n    LINEAR_MIPMAP_NEAREST = 0x2701,\r\n    NEAREST_MIPMAP_LINEAR = 0x2702,\r\n    LINEAR_MIPMAP_LINEAR = 0x2703,\r\n    TEXTURE_MAG_FILTER = 0x2800,\r\n    TEXTURE_MIN_FILTER = 0x2801,\r\n    TEXTURE_WRAP_S = 0x2802,\r\n    TEXTURE_WRAP_T = 0x2803,\r\n    TEXTURE_2D = 0x0de1,\r\n    TEXTURE = 0x1702,\r\n    TEXTURE_CUBE_MAP = 0x8513,\r\n    TEXTURE_BINDING_CUBE_MAP = 0x8514,\r\n    TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,\r\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,\r\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a,\r\n    MAX_CUBE_MAP_TEXTURE_SIZE = 0x851c,\r\n    TEXTURE0 = 0x84c0,\r\n    TEXTURE1 = 0x84c1,\r\n    TEXTURE2 = 0x84c2,\r\n    TEXTURE3 = 0x84c3,\r\n    TEXTURE4 = 0x84c4,\r\n    TEXTURE5 = 0x84c5,\r\n    TEXTURE6 = 0x84c6,\r\n    TEXTURE7 = 0x84c7,\r\n    TEXTURE8 = 0x84c8,\r\n    TEXTURE9 = 0x84c9,\r\n    TEXTURE10 = 0x84ca,\r\n    TEXTURE11 = 0x84cb,\r\n    TEXTURE12 = 0x84cc,\r\n    TEXTURE13 = 0x84cd,\r\n    TEXTURE14 = 0x84ce,\r\n    TEXTURE15 = 0x84cf,\r\n    TEXTURE16 = 0x84d0,\r\n    TEXTURE17 = 0x84d1,\r\n    TEXTURE18 = 0x84d2,\r\n    TEXTURE19 = 0x84d3,\r\n    TEXTURE20 = 0x84d4,\r\n    TEXTURE21 = 0x84d5,\r\n    TEXTURE22 = 0x84d6,\r\n    TEXTURE23 = 0x84d7,\r\n    TEXTURE24 = 0x84d8,\r\n    TEXTURE25 = 0x84d9,\r\n    TEXTURE26 = 0x84da,\r\n    TEXTURE27 = 0x84db,\r\n    TEXTURE28 = 0x84dc,\r\n    TEXTURE29 = 0x84dd,\r\n    TEXTURE30 = 0x84de,\r\n    TEXTURE31 = 0x84df,\r\n    ACTIVE_TEXTURE = 0x84e0,\r\n    REPEAT = 0x2901,\r\n    CLAMP_TO_EDGE = 0x812f,\r\n    MIRRORED_REPEAT = 0x8370,\r\n    FLOAT_VEC2 = 0x8b50,\r\n    FLOAT_VEC3 = 0x8b51,\r\n    FLOAT_VEC4 = 0x8b52,\r\n    INT_VEC2 = 0x8b53,\r\n    INT_VEC3 = 0x8b54,\r\n    INT_VEC4 = 0x8b55,\r\n    BOOL = 0x8b56,\r\n    BOOL_VEC2 = 0x8b57,\r\n    BOOL_VEC3 = 0x8b58,\r\n    BOOL_VEC4 = 0x8b59,\r\n    FLOAT_MAT2 = 0x8b5a,\r\n    FLOAT_MAT3 = 0x8b5b,\r\n    FLOAT_MAT4 = 0x8b5c,\r\n    SAMPLER_2D = 0x8b5e,\r\n    SAMPLER_CUBE = 0x8b60,\r\n    VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,\r\n    VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,\r\n    VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,\r\n    VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,\r\n    VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886a,\r\n    VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,\r\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889f,\r\n    IMPLEMENTATION_COLOR_READ_TYPE = 0x8b9a,\r\n    IMPLEMENTATION_COLOR_READ_FORMAT = 0x8b9b,\r\n    COMPILE_STATUS = 0x8b81,\r\n    LOW_FLOAT = 0x8df0,\r\n    MEDIUM_FLOAT = 0x8df1,\r\n    HIGH_FLOAT = 0x8df2,\r\n    LOW_INT = 0x8df3,\r\n    MEDIUM_INT = 0x8df4,\r\n    HIGH_INT = 0x8df5,\r\n    FRAMEBUFFER = 0x8d40,\r\n    RENDERBUFFER = 0x8d41,\r\n    RGBA4 = 0x8056,\r\n    RGB5_A1 = 0x8057,\r\n    RGB565 = 0x8d62,\r\n    DEPTH_COMPONENT16 = 0x81a5,\r\n    STENCIL_INDEX = 0x1901,\r\n    STENCIL_INDEX8 = 0x8d48,\r\n    DEPTH_STENCIL = 0x84f9,\r\n    RENDERBUFFER_WIDTH = 0x8d42,\r\n    RENDERBUFFER_HEIGHT = 0x8d43,\r\n    RENDERBUFFER_INTERNAL_FORMAT = 0x8d44,\r\n    RENDERBUFFER_RED_SIZE = 0x8d50,\r\n    RENDERBUFFER_GREEN_SIZE = 0x8d51,\r\n    RENDERBUFFER_BLUE_SIZE = 0x8d52,\r\n    RENDERBUFFER_ALPHA_SIZE = 0x8d53,\r\n    RENDERBUFFER_DEPTH_SIZE = 0x8d54,\r\n    RENDERBUFFER_STENCIL_SIZE = 0x8d55,\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8cd0,\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8cd1,\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8cd2,\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8cd3,\r\n    COLOR_ATTACHMENT0 = 0x8ce0,\r\n    DEPTH_ATTACHMENT = 0x8d00,\r\n    STENCIL_ATTACHMENT = 0x8d20,\r\n    DEPTH_STENCIL_ATTACHMENT = 0x821a,\r\n    NONE = 0,\r\n    FRAMEBUFFER_COMPLETE = 0x8cd5,\r\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8cd6,\r\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8cd7,\r\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8cd9,\r\n    FRAMEBUFFER_UNSUPPORTED = 0x8cdd,\r\n    FRAMEBUFFER_BINDING = 0x8ca6,\r\n    RENDERBUFFER_BINDING = 0x8ca7,\r\n    MAX_RENDERBUFFER_SIZE = 0x84e8,\r\n    INVALID_FRAMEBUFFER_OPERATION = 0x0506,\r\n    UNPACK_FLIP_Y_WEBGL = 0x9240,\r\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241,\r\n    CONTEXT_LOST_WEBGL = 0x9242,\r\n    UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243,\r\n    BROWSER_DEFAULT_WEBGL = 0x9244,\r\n\r\n    // WEBGL_compressed_texture_s3tc\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83f0,\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83f1,\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83f2,\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83f3,\r\n\r\n    // WEBGL_compressed_texture_pvrtc\r\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8c00,\r\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8c01,\r\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\r\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\r\n\r\n    // WEBGL_compressed_texture_etc1\r\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8d64,\r\n\r\n    // Desktop OpenGL\r\n    DOUBLE = 0x140a,\r\n\r\n    // WebGL 2\r\n    READ_BUFFER = 0x0c02,\r\n    UNPACK_ROW_LENGTH = 0x0cf2,\r\n    UNPACK_SKIP_ROWS = 0x0cf3,\r\n    UNPACK_SKIP_PIXELS = 0x0cf4,\r\n    PACK_ROW_LENGTH = 0x0d02,\r\n    PACK_SKIP_ROWS = 0x0d03,\r\n    PACK_SKIP_PIXELS = 0x0d04,\r\n    COLOR = 0x1800,\r\n    DEPTH = 0x1801,\r\n    STENCIL = 0x1802,\r\n    RED = 0x1903,\r\n    RGB8 = 0x8051,\r\n    RGBA8 = 0x8058,\r\n    RGB10_A2 = 0x8059,\r\n    TEXTURE_BINDING_3D = 0x806a,\r\n    UNPACK_SKIP_IMAGES = 0x806d,\r\n    UNPACK_IMAGE_HEIGHT = 0x806e,\r\n    TEXTURE_3D = 0x806f,\r\n    TEXTURE_WRAP_R = 0x8072,\r\n    MAX_3D_TEXTURE_SIZE = 0x8073,\r\n    UNSIGNED_INT_2_10_10_10_REV = 0x8368,\r\n    MAX_ELEMENTS_VERTICES = 0x80e8,\r\n    MAX_ELEMENTS_INDICES = 0x80e9,\r\n    TEXTURE_MIN_LOD = 0x813a,\r\n    TEXTURE_MAX_LOD = 0x813b,\r\n    TEXTURE_BASE_LEVEL = 0x813c,\r\n    TEXTURE_MAX_LEVEL = 0x813d,\r\n    MIN = 0x8007,\r\n    MAX = 0x8008,\r\n    DEPTH_COMPONENT24 = 0x81a6,\r\n    MAX_TEXTURE_LOD_BIAS = 0x84fd,\r\n    TEXTURE_COMPARE_MODE = 0x884c,\r\n    TEXTURE_COMPARE_FUNC = 0x884d,\r\n    CURRENT_QUERY = 0x8865,\r\n    QUERY_RESULT = 0x8866,\r\n    QUERY_RESULT_AVAILABLE = 0x8867,\r\n    STREAM_READ = 0x88e1,\r\n    STREAM_COPY = 0x88e2,\r\n    STATIC_READ = 0x88e5,\r\n    STATIC_COPY = 0x88e6,\r\n    DYNAMIC_READ = 0x88e9,\r\n    DYNAMIC_COPY = 0x88ea,\r\n    MAX_DRAW_BUFFERS = 0x8824,\r\n    DRAW_BUFFER0 = 0x8825,\r\n    DRAW_BUFFER1 = 0x8826,\r\n    DRAW_BUFFER2 = 0x8827,\r\n    DRAW_BUFFER3 = 0x8828,\r\n    DRAW_BUFFER4 = 0x8829,\r\n    DRAW_BUFFER5 = 0x882a,\r\n    DRAW_BUFFER6 = 0x882b,\r\n    DRAW_BUFFER7 = 0x882c,\r\n    DRAW_BUFFER8 = 0x882d,\r\n    DRAW_BUFFER9 = 0x882e,\r\n    DRAW_BUFFER10 = 0x882f,\r\n    DRAW_BUFFER11 = 0x8830,\r\n    DRAW_BUFFER12 = 0x8831,\r\n    DRAW_BUFFER13 = 0x8832,\r\n    DRAW_BUFFER14 = 0x8833,\r\n    DRAW_BUFFER15 = 0x8834,\r\n    MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8b49,\r\n    MAX_VERTEX_UNIFORM_COMPONENTS = 0x8b4a,\r\n    SAMPLER_3D = 0x8b5f,\r\n    SAMPLER_2D_SHADOW = 0x8b62,\r\n    FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b,\r\n    PIXEL_PACK_BUFFER = 0x88eb,\r\n    PIXEL_UNPACK_BUFFER = 0x88ec,\r\n    PIXEL_PACK_BUFFER_BINDING = 0x88ed,\r\n    PIXEL_UNPACK_BUFFER_BINDING = 0x88ef,\r\n    FLOAT_MAT2X3 = 0x8b65,\r\n    FLOAT_MAT2X4 = 0x8b66,\r\n    FLOAT_MAT3X2 = 0x8b67,\r\n    FLOAT_MAT3X4 = 0x8b68,\r\n    FLOAT_MAT4X2 = 0x8b69,\r\n    FLOAT_MAT4X3 = 0x8b6a,\r\n    SRGB = 0x8c40,\r\n    SRGB8 = 0x8c41,\r\n    SRGB8_ALPHA8 = 0x8c43,\r\n    COMPARE_REF_TO_TEXTURE = 0x884e,\r\n    RGBA32F = 0x8814,\r\n    RGB32F = 0x8815,\r\n    RGBA16F = 0x881a,\r\n    RGB16F = 0x881b,\r\n    VERTEX_ATTRIB_ARRAY_INTEGER = 0x88fd,\r\n    MAX_ARRAY_TEXTURE_LAYERS = 0x88ff,\r\n    MIN_PROGRAM_TEXEL_OFFSET = 0x8904,\r\n    MAX_PROGRAM_TEXEL_OFFSET = 0x8905,\r\n    MAX_VARYING_COMPONENTS = 0x8b4b,\r\n    TEXTURE_2D_ARRAY = 0x8c1a,\r\n    TEXTURE_BINDING_2D_ARRAY = 0x8c1d,\r\n    R11F_G11F_B10F = 0x8c3a,\r\n    UNSIGNED_INT_10F_11F_11F_REV = 0x8c3b,\r\n    RGB9_E5 = 0x8c3d,\r\n    UNSIGNED_INT_5_9_9_9_REV = 0x8c3e,\r\n    TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8c7f,\r\n    MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8c80,\r\n    TRANSFORM_FEEDBACK_VARYINGS = 0x8c83,\r\n    TRANSFORM_FEEDBACK_BUFFER_START = 0x8c84,\r\n    TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8c85,\r\n    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88,\r\n    RASTERIZER_DISCARD = 0x8c89,\r\n    MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8c8a,\r\n    MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8c8b,\r\n    INTERLEAVED_ATTRIBS = 0x8c8c,\r\n    SEPARATE_ATTRIBS = 0x8c8d,\r\n    TRANSFORM_FEEDBACK_BUFFER = 0x8c8e,\r\n    TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8c8f,\r\n    RGBA32UI = 0x8d70,\r\n    RGB32UI = 0x8d71,\r\n    RGBA16UI = 0x8d76,\r\n    RGB16UI = 0x8d77,\r\n    RGBA8UI = 0x8d7c,\r\n    RGB8UI = 0x8d7d,\r\n    RGBA32I = 0x8d82,\r\n    RGB32I = 0x8d83,\r\n    RGBA16I = 0x8d88,\r\n    RGB16I = 0x8d89,\r\n    RGBA8I = 0x8d8e,\r\n    RGB8I = 0x8d8f,\r\n    RED_INTEGER = 0x8d94,\r\n    RGB_INTEGER = 0x8d98,\r\n    RGBA_INTEGER = 0x8d99,\r\n    SAMPLER_2D_ARRAY = 0x8dc1,\r\n    SAMPLER_2D_ARRAY_SHADOW = 0x8dc4,\r\n    SAMPLER_CUBE_SHADOW = 0x8dc5,\r\n    UNSIGNED_INT_VEC2 = 0x8dc6,\r\n    UNSIGNED_INT_VEC3 = 0x8dc7,\r\n    UNSIGNED_INT_VEC4 = 0x8dc8,\r\n    INT_SAMPLER_2D = 0x8dca,\r\n    INT_SAMPLER_3D = 0x8dcb,\r\n    INT_SAMPLER_CUBE = 0x8dcc,\r\n    INT_SAMPLER_2D_ARRAY = 0x8dcf,\r\n    UNSIGNED_INT_SAMPLER_2D = 0x8dd2,\r\n    UNSIGNED_INT_SAMPLER_3D = 0x8dd3,\r\n    UNSIGNED_INT_SAMPLER_CUBE = 0x8dd4,\r\n    UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8dd7,\r\n    DEPTH_COMPONENT32F = 0x8cac,\r\n    DEPTH32F_STENCIL8 = 0x8cad,\r\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8dad,\r\n    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,\r\n    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,\r\n    FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,\r\n    FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,\r\n    FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,\r\n    FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,\r\n    FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,\r\n    FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,\r\n    FRAMEBUFFER_DEFAULT = 0x8218,\r\n    UNSIGNED_INT_24_8 = 0x84fa,\r\n    DEPTH24_STENCIL8 = 0x88f0,\r\n    UNSIGNED_NORMALIZED = 0x8c17,\r\n    DRAW_FRAMEBUFFER_BINDING = 0x8ca6, // Same as FRAMEBUFFER_BINDING\r\n    READ_FRAMEBUFFER = 0x8ca8,\r\n    DRAW_FRAMEBUFFER = 0x8ca9,\r\n    READ_FRAMEBUFFER_BINDING = 0x8caa,\r\n    RENDERBUFFER_SAMPLES = 0x8cab,\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8cd4,\r\n    MAX_COLOR_ATTACHMENTS = 0x8cdf,\r\n    COLOR_ATTACHMENT1 = 0x8ce1,\r\n    COLOR_ATTACHMENT2 = 0x8ce2,\r\n    COLOR_ATTACHMENT3 = 0x8ce3,\r\n    COLOR_ATTACHMENT4 = 0x8ce4,\r\n    COLOR_ATTACHMENT5 = 0x8ce5,\r\n    COLOR_ATTACHMENT6 = 0x8ce6,\r\n    COLOR_ATTACHMENT7 = 0x8ce7,\r\n    COLOR_ATTACHMENT8 = 0x8ce8,\r\n    COLOR_ATTACHMENT9 = 0x8ce9,\r\n    COLOR_ATTACHMENT10 = 0x8cea,\r\n    COLOR_ATTACHMENT11 = 0x8ceb,\r\n    COLOR_ATTACHMENT12 = 0x8cec,\r\n    COLOR_ATTACHMENT13 = 0x8ced,\r\n    COLOR_ATTACHMENT14 = 0x8cee,\r\n    COLOR_ATTACHMENT15 = 0x8cef,\r\n    FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8d56,\r\n    MAX_SAMPLES = 0x8d57,\r\n    HALF_FLOAT = 0x140b,\r\n    HALF_FLOAT_OES = 0x8d61,\r\n    RG = 0x8227,\r\n    RG_INTEGER = 0x8228,\r\n    R8 = 0x8229,\r\n    RG8 = 0x822b,\r\n    R16F = 0x822d,\r\n    R32F = 0x822e,\r\n    RG16F = 0x822f,\r\n    RG32F = 0x8230,\r\n    R8I = 0x8231,\r\n    R8UI = 0x8232,\r\n    R16I = 0x8233,\r\n    R16UI = 0x8234,\r\n    R32I = 0x8235,\r\n    R32UI = 0x8236,\r\n    RG8I = 0x8237,\r\n    RG8UI = 0x8238,\r\n    RG16I = 0x8239,\r\n    RG16UI = 0x823a,\r\n    RG32I = 0x823b,\r\n    RG32UI = 0x823c,\r\n    VERTEX_ARRAY_BINDING = 0x85b5,\r\n    R8_SNORM = 0x8f94,\r\n    RG8_SNORM = 0x8f95,\r\n    RGB8_SNORM = 0x8f96,\r\n    RGBA8_SNORM = 0x8f97,\r\n    SIGNED_NORMALIZED = 0x8f9c,\r\n    COPY_READ_BUFFER = 0x8f36,\r\n    COPY_WRITE_BUFFER = 0x8f37,\r\n    COPY_READ_BUFFER_BINDING = 0x8f36, // Same as COPY_READ_BUFFER\r\n    COPY_WRITE_BUFFER_BINDING = 0x8f37, // Same as COPY_WRITE_BUFFER\r\n    UNIFORM_BUFFER = 0x8a11,\r\n    UNIFORM_BUFFER_BINDING = 0x8a28,\r\n    UNIFORM_BUFFER_START = 0x8a29,\r\n    UNIFORM_BUFFER_SIZE = 0x8a2a,\r\n    MAX_VERTEX_UNIFORM_BLOCKS = 0x8a2b,\r\n    MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8a2d,\r\n    MAX_COMBINED_UNIFORM_BLOCKS = 0x8a2e,\r\n    MAX_UNIFORM_BUFFER_BINDINGS = 0x8a2f,\r\n    MAX_UNIFORM_BLOCK_SIZE = 0x8a30,\r\n    MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8a31,\r\n    MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8a33,\r\n    UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8a34,\r\n    ACTIVE_UNIFORM_BLOCKS = 0x8a36,\r\n    UNIFORM_TYPE = 0x8a37,\r\n    UNIFORM_SIZE = 0x8a38,\r\n    UNIFORM_BLOCK_INDEX = 0x8a3a,\r\n    UNIFORM_OFFSET = 0x8a3b,\r\n    UNIFORM_ARRAY_STRIDE = 0x8a3c,\r\n    UNIFORM_MATRIX_STRIDE = 0x8a3d,\r\n    UNIFORM_IS_ROW_MAJOR = 0x8a3e,\r\n    UNIFORM_BLOCK_BINDING = 0x8a3f,\r\n    UNIFORM_BLOCK_DATA_SIZE = 0x8a40,\r\n    UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8a42,\r\n    UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8a43,\r\n    UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8a44,\r\n    UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46,\r\n    INVALID_INDEX = 0xffffffff,\r\n    MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,\r\n    MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,\r\n    MAX_SERVER_WAIT_TIMEOUT = 0x9111,\r\n    OBJECT_TYPE = 0x9112,\r\n    SYNC_CONDITION = 0x9113,\r\n    SYNC_STATUS = 0x9114,\r\n    SYNC_FLAGS = 0x9115,\r\n    SYNC_FENCE = 0x9116,\r\n    SYNC_GPU_COMMANDS_COMPLETE = 0x9117,\r\n    UNSIGNALED = 0x9118,\r\n    SIGNALED = 0x9119,\r\n    ALREADY_SIGNALED = 0x911a,\r\n    TIMEOUT_EXPIRED = 0x911b,\r\n    CONDITION_SATISFIED = 0x911c,\r\n    WAIT_FAILED = 0x911d,\r\n    SYNC_FLUSH_COMMANDS_BIT = 0x00000001,\r\n    VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88fe,\r\n    ANY_SAMPLES_PASSED = 0x8c2f,\r\n    ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a,\r\n    SAMPLER_BINDING = 0x8919,\r\n    RGB10_A2UI = 0x906f,\r\n    INT_2_10_10_10_REV = 0x8d9f,\r\n    TRANSFORM_FEEDBACK = 0x8e22,\r\n    TRANSFORM_FEEDBACK_PAUSED = 0x8e23,\r\n    TRANSFORM_FEEDBACK_ACTIVE = 0x8e24,\r\n    TRANSFORM_FEEDBACK_BINDING = 0x8e25,\r\n    COMPRESSED_R11_EAC = 0x9270,\r\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\r\n    COMPRESSED_RG11_EAC = 0x9272,\r\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\r\n    COMPRESSED_RGB8_ETC2 = 0x9274,\r\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\r\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\r\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\r\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\r\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\r\n    TEXTURE_IMMUTABLE_FORMAT = 0x912f,\r\n    MAX_ELEMENT_INDEX = 0x8d6b,\r\n    TEXTURE_IMMUTABLE_LEVELS = 0x82df,\r\n\r\n    // Extensions\r\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff,\r\n}\r\n","import { GlConstants } from \"./GLConstant\";\r\nimport { IbassProgramInfo, IvertexAttrib, IattributeInfo, IuniformInfo, IprogramOptions, IprogramInfo } from \"./type\";\r\nimport { setProgramStates, setProgramStatesWithCached } from \"./state\";\r\n\r\nexport enum ShaderTypeEnum {\r\n    VS,\r\n    FS,\r\n}\r\n\r\nexport function createProgramInfo(gl: WebGLRenderingContext, op: IprogramOptions): IprogramInfo {\r\n    let info: IprogramInfo;\r\n    if ((op.program as IbassProgramInfo).program != null) {\r\n        let bassprogram = op.program as IbassProgramInfo;\r\n        info = {} as IprogramInfo;\r\n        info.program = bassprogram.program;\r\n        info.attsDic = bassprogram.attsDic;\r\n        info.uniformsDic = bassprogram.uniformsDic;\r\n    } else {\r\n        let bassprogramOp = op.program as {\r\n            vs: string;\r\n            fs: string;\r\n            name: string;\r\n        };\r\n        info = createBassProgramInfo(gl, bassprogramOp.vs, bassprogramOp.fs, bassprogramOp.name) as IprogramInfo;\r\n    }\r\n    if (op.uniforms) {\r\n        info.uniforms = op.uniforms;\r\n    }\r\n    if (op.states) {\r\n        info.states = op.states;\r\n    }\r\n    return info;\r\n}\r\n\r\n/**\r\n * bing program 、set uniforms 、set webgl states\r\n * @param gl\r\n * @param program\r\n */\r\nexport function setProgram(gl: WebGLRenderingContext, program: IprogramInfo) {\r\n    gl.useProgram(program.program);\r\n\r\n    if (program.uniforms) {\r\n        setProgramUniforms(program, program.uniforms);\r\n    }\r\n    if (program.states) {\r\n        setProgramStates(gl, program.states);\r\n    }\r\n}\r\n\r\nexport function setProgramWithCached(gl: WebGLRenderingContext, program: IprogramInfo) {\r\n    if (gl._cachedProgram != program.program) {\r\n        gl._cachedProgram = program.program;\r\n\r\n        gl.useProgram(program.program);\r\n    }\r\n    if (program.uniforms) {\r\n        setProgramUniforms(program, program.uniforms);\r\n    }\r\n    if (program.states) {\r\n        setProgramStatesWithCached(gl, program.states);\r\n    }\r\n}\r\n\r\nexport function setProgramUniforms(info: IbassProgramInfo, uniforms: { [name: string]: any }) {\r\n    for (let key in uniforms) {\r\n        let setter = info.uniformsDic[key].setter;\r\n        let value = uniforms[key];\r\n        setter(value);\r\n    }\r\n}\r\n\r\nexport function createBassProgramInfo(\r\n    gl: WebGLRenderingContext,\r\n    vs: string,\r\n    fs: string,\r\n    name: string,\r\n): IbassProgramInfo {\r\n    let vsShader = createShader(gl, ShaderTypeEnum.VS, vs, name + \"_vs\");\r\n    let fsShader = createShader(gl, ShaderTypeEnum.FS, fs, name + \"_fs\");\r\n    if (vsShader && fsShader) {\r\n        let item = gl.createProgram();\r\n        gl.attachShader(item, vsShader.shader);\r\n        gl.attachShader(item, fsShader.shader);\r\n        gl.linkProgram(item);\r\n        let check = gl.getProgramParameter(item, gl.LINK_STATUS);\r\n        if (check == false) {\r\n            let debguInfo =\r\n                \"ERROR: compile program Error!\" + \"VS:\" + vs + \"   FS:\" + fs + \"\\n\" + gl.getProgramInfoLog(item);\r\n            console.error(debguInfo);\r\n            gl.deleteProgram(item);\r\n            return null;\r\n        } else {\r\n            let attsInfo = getAttributesInfo(gl, item);\r\n            let uniformsInfo = getUniformsInfo(gl, item);\r\n            return { program: item, programName: name, uniformsDic: uniformsInfo, attsDic: attsInfo };\r\n        }\r\n    }\r\n}\r\n\r\nexport function getAttributesInfo(\r\n    gl: WebGLRenderingContext,\r\n    program: WebGLProgram,\r\n): { [attName: string]: IattributeInfo } {\r\n    let attdic: { [attName: string]: IattributeInfo } = {};\r\n    let numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    for (let i = 0; i < numAttribs; i++) {\r\n        let attribInfo = gl.getActiveAttrib(program, i);\r\n        if (!attribInfo) break;\r\n        let attName = attribInfo.name;\r\n        let attlocation = gl.getAttribLocation(program, attName);\r\n        let func = getAttributeSetter(gl, attlocation);\r\n\r\n        attdic[attName] = { name: attName, location: attlocation, setter: func };\r\n    }\r\n    return attdic;\r\n}\r\n\r\nexport function getUniformsInfo(gl: WebGLRenderingContext, program: WebGLProgram): { [name: string]: IuniformInfo } {\r\n    let uniformDic: { [name: string]: IuniformInfo } = {};\r\n    let numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    gl.bindpoint = 0;\r\n    for (let i = 0; i < numUniforms; i++) {\r\n        let uniformInfo = gl.getActiveUniform(program, i);\r\n        if (!uniformInfo) break;\r\n\r\n        let name = uniformInfo.name;\r\n        let type = uniformInfo.type;\r\n        let location = gl.getUniformLocation(program, name);\r\n\r\n        let beArray = false;\r\n        // remove the array suffix.\r\n        if (name.substr(-3) === \"[0]\") {\r\n            beArray = true;\r\n            // name = name.substr(0, name.length - 3);\r\n        }\r\n        if (location == null) continue;\r\n        let bindpoint = gl.bindpoint;\r\n        let func = getUniformSetter(gl, type, beArray, location, bindpoint);\r\n        uniformDic[name] = { name: name, location: location, type: type, setter: func };\r\n    }\r\n    return uniformDic;\r\n}\r\n\r\nexport function createShader(gl: WebGLRenderingContext, type: ShaderTypeEnum, source: string, name: string = null) {\r\n    let target = type == ShaderTypeEnum.VS ? GlConstants.VERTEX_SHADER : GlConstants.FRAGMENT_SHADER;\r\n    let item = gl.createShader(target);\r\n\r\n    gl.shaderSource(item, source);\r\n    gl.compileShader(item);\r\n    let check = gl.getShaderParameter(item, gl.COMPILE_STATUS);\r\n    if (check == false) {\r\n        let debug =\r\n            type == ShaderTypeEnum.VS ? \"ERROR: compile  VS Shader Error! VS:\" : \"ERROR: compile FS Shader Error! FS:\";\r\n        debug = debug + name + \".\\n\";\r\n        console.error(debug + gl.getShaderInfoLog(item));\r\n        gl.deleteShader(item);\r\n        return null;\r\n    } else {\r\n        return { shaderType: type, shaderName: name, shader: item };\r\n    }\r\n}\r\n\r\nexport function getUniformSetter(\r\n    gl: WebGLRenderingContext,\r\n    uniformType: number,\r\n    beArray: boolean,\r\n    location: WebGLUniformLocation,\r\n    bindpoint: number,\r\n) {\r\n    switch (uniformType) {\r\n        case gl.FLOAT:\r\n            if (beArray) {\r\n                return (value: any) => {\r\n                    gl.uniform1f(location, value);\r\n                };\r\n            } else {\r\n                return (value: any) => {\r\n                    gl.uniform1fv(location, value);\r\n                };\r\n            }\r\n            break;\r\n        case gl.FLOAT_VEC2:\r\n            return (value: Float32Array) => {\r\n                gl.uniform2fv(location, value);\r\n            };\r\n            break;\r\n        case gl.FLOAT_VEC3:\r\n            return (value: Float32Array) => {\r\n                gl.uniform3fv(location, value);\r\n            };\r\n            break;\r\n        case gl.FLOAT_VEC4:\r\n            return (value: Float32Array) => {\r\n                gl.uniform4fv(location, value);\r\n            };\r\n            break;\r\n        case gl.INT:\r\n        case gl.BOOL:\r\n            if (beArray) {\r\n                return (value: number[]) => {\r\n                    gl.uniform1iv(location, value);\r\n                };\r\n            } else {\r\n                return (value: number) => {\r\n                    gl.uniform1i(location, value);\r\n                };\r\n            }\r\n            break;\r\n        case gl.INT_VEC2:\r\n        case gl.BOOL_VEC2:\r\n            return (value: number[]) => {\r\n                gl.uniform2iv(location, value);\r\n            };\r\n            break;\r\n        case gl.INT_VEC3:\r\n        case gl.BOOL_VEC3:\r\n            return (value: number[]) => {\r\n                gl.uniform3iv(location, value);\r\n            };\r\n            break;\r\n        case gl.INT_VEC4:\r\n        case gl.BOOL_VEC4:\r\n            return (value: number[]) => {\r\n                gl.uniform4fv(location, value);\r\n            };\r\n            break;\r\n        case gl.FLOAT_MAT2:\r\n            return (value: Float32Array) => {\r\n                gl.uniformMatrix2fv(location, false, value);\r\n            };\r\n        case gl.FLOAT_MAT3:\r\n            return (value: Float32Array) => {\r\n                gl.uniformMatrix3fv(location, false, value);\r\n            };\r\n            break;\r\n        case gl.FLOAT_MAT4:\r\n            return (value: Float32Array) => {\r\n                gl.uniformMatrix4fv(location, false, value);\r\n            };\r\n            break;\r\n        case gl.SAMPLER_2D:\r\n            return (value: WebGLTexture) => {\r\n                gl.activeTexture(gl.TEXTURE0 + bindpoint);\r\n                gl.bindTexture(gl.TEXTURE_2D, value);\r\n                gl.uniform1i(location, bindpoint);\r\n\r\n                gl.bindpoint = gl.bindpoint + 1;\r\n            };\r\n        default:\r\n            console.error(\"uniformSetter not handle type:\" + uniformType + \" yet!\");\r\n            break;\r\n    }\r\n}\r\n\r\nexport function getAttributeSetter(gl: WebGLRenderingContext, location: number) {\r\n    return (value: IvertexAttrib) => {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, value.glBuffer);\r\n        gl.enableVertexAttribArray(location);\r\n        gl.vertexAttribPointer(\r\n            location,\r\n            value.componentSize,\r\n            value.componentDataType,\r\n            value.normalize,\r\n            value.bytesStride,\r\n            value.bytesOffset,\r\n        );\r\n        if (value.divisor !== undefined) {\r\n            gl.vertexAttribDivisor(location, value.divisor);\r\n        }\r\n    };\r\n}\r\n","/**\r\n * Enum containing WebGL Constant values by name.\r\n * for use without an active WebGL context, or in cases where certain constants are unavailable using the WebGL context\r\n * (For example, in [Safari 9]{@link https://github.com/AnalyticalGraphicsInc/cesium/issues/2989}).\r\n *\r\n * These match the constants from the [WebGL 1.0]{@link https://www.khronos.org/registry/webgl/specs/latest/1.0/}\r\n * and [WebGL 2.0]{@link https://www.khronos.org/registry/webgl/specs/latest/2.0/}\r\n * specifications.\r\n */\r\nexport enum GlConstants {\r\n    DEPTH_BUFFER_BIT = 0x00000100,\r\n    STENCIL_BUFFER_BIT = 0x00000400,\r\n    COLOR_BUFFER_BIT = 0x00004000,\r\n    POINTS = 0x0000,\r\n    LINES = 0x0001,\r\n    LINE_LOOP = 0x0002,\r\n    LINE_STRIP = 0x0003,\r\n    TRIANGLES = 0x0004,\r\n    TRIANGLE_STRIP = 0x0005,\r\n    TRIANGLE_FAN = 0x0006,\r\n    ZERO = 0,\r\n    ONE = 1,\r\n    SRC_COLOR = 0x0300,\r\n    ONE_MINUS_SRC_COLOR = 0x0301,\r\n    SRC_ALPHA = 0x0302,\r\n    ONE_MINUS_SRC_ALPHA = 0x0303,\r\n    DST_ALPHA = 0x0304,\r\n    ONE_MINUS_DST_ALPHA = 0x0305,\r\n    DST_COLOR = 0x0306,\r\n    ONE_MINUS_DST_COLOR = 0x0307,\r\n    SRC_ALPHA_SATURATE = 0x0308,\r\n    FUNC_ADD = 0x8006,\r\n    BLEND_EQUATION = 0x8009,\r\n    BLEND_EQUATION_RGB = 0x8009, // same as BLEND_EQUATION\r\n    BLEND_EQUATION_ALPHA = 0x883d,\r\n    FUNC_SUBTRACT = 0x800a,\r\n    FUNC_REVERSE_SUBTRACT = 0x800b,\r\n    BLEND_DST_RGB = 0x80c8,\r\n    BLEND_SRC_RGB = 0x80c9,\r\n    BLEND_DST_ALPHA = 0x80ca,\r\n    BLEND_SRC_ALPHA = 0x80cb,\r\n    CONSTANT_COLOR = 0x8001,\r\n    ONE_MINUS_CONSTANT_COLOR = 0x8002,\r\n    CONSTANT_ALPHA = 0x8003,\r\n    ONE_MINUS_CONSTANT_ALPHA = 0x8004,\r\n    BLEND_COLOR = 0x8005,\r\n    ARRAY_BUFFER = 0x8892,\r\n    ELEMENT_ARRAY_BUFFER = 0x8893,\r\n    ARRAY_BUFFER_BINDING = 0x8894,\r\n    ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,\r\n    STREAM_DRAW = 0x88e0,\r\n    STATIC_DRAW = 0x88e4,\r\n    DYNAMIC_DRAW = 0x88e8,\r\n    BUFFER_SIZE = 0x8764,\r\n    BUFFER_USAGE = 0x8765,\r\n    CURRENT_VERTEX_ATTRIB = 0x8626,\r\n    FRONT = 0x0404,\r\n    BACK = 0x0405,\r\n    FRONT_AND_BACK = 0x0408,\r\n    CULL_FACE = 0x0b44,\r\n    BLEND = 0x0be2,\r\n    DITHER = 0x0bd0,\r\n    STENCIL_TEST = 0x0b90,\r\n    DEPTH_TEST = 0x0b71,\r\n    SCISSOR_TEST = 0x0c11,\r\n    POLYGON_OFFSET_FILL = 0x8037,\r\n    SAMPLE_ALPHA_TO_COVERAGE = 0x809e,\r\n    SAMPLE_COVERAGE = 0x80a0,\r\n    NO_ERROR = 0,\r\n    INVALID_ENUM = 0x0500,\r\n    INVALID_VALUE = 0x0501,\r\n    INVALID_OPERATION = 0x0502,\r\n    OUT_OF_MEMORY = 0x0505,\r\n    CW = 0x0900,\r\n    CCW = 0x0901,\r\n    LINE_WIDTH = 0x0b21,\r\n    ALIASED_POINT_SIZE_RANGE = 0x846d,\r\n    ALIASED_LINE_WIDTH_RANGE = 0x846e,\r\n    CULL_FACE_MODE = 0x0b45,\r\n    FRONT_FACE = 0x0b46,\r\n    DEPTH_RANGE = 0x0b70,\r\n    DEPTH_WRITEMASK = 0x0b72,\r\n    DEPTH_CLEAR_VALUE = 0x0b73,\r\n    DEPTH_FUNC = 0x0b74,\r\n    STENCIL_CLEAR_VALUE = 0x0b91,\r\n    STENCIL_FUNC = 0x0b92,\r\n    STENCIL_FAIL = 0x0b94,\r\n    STENCIL_PASS_DEPTH_FAIL = 0x0b95,\r\n    STENCIL_PASS_DEPTH_PASS = 0x0b96,\r\n    STENCIL_REF = 0x0b97,\r\n    STENCIL_VALUE_MASK = 0x0b93,\r\n    STENCIL_WRITEMASK = 0x0b98,\r\n    STENCIL_BACK_FUNC = 0x8800,\r\n    STENCIL_BACK_FAIL = 0x8801,\r\n    STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,\r\n    STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,\r\n    STENCIL_BACK_REF = 0x8ca3,\r\n    STENCIL_BACK_VALUE_MASK = 0x8ca4,\r\n    STENCIL_BACK_WRITEMASK = 0x8ca5,\r\n    VIEWPORT = 0x0ba2,\r\n    SCISSOR_BOX = 0x0c10,\r\n    COLOR_CLEAR_VALUE = 0x0c22,\r\n    COLOR_WRITEMASK = 0x0c23,\r\n    UNPACK_ALIGNMENT = 0x0cf5,\r\n    PACK_ALIGNMENT = 0x0d05,\r\n    MAX_TEXTURE_SIZE = 0x0d33,\r\n    MAX_VIEWPORT_DIMS = 0x0d3a,\r\n    SUBPIXEL_BITS = 0x0d50,\r\n    RED_BITS = 0x0d52,\r\n    GREEN_BITS = 0x0d53,\r\n    BLUE_BITS = 0x0d54,\r\n    ALPHA_BITS = 0x0d55,\r\n    DEPTH_BITS = 0x0d56,\r\n    STENCIL_BITS = 0x0d57,\r\n    POLYGON_OFFSET_UNITS = 0x2a00,\r\n    POLYGON_OFFSET_FACTOR = 0x8038,\r\n    TEXTURE_BINDING_2D = 0x8069,\r\n    SAMPLE_BUFFERS = 0x80a8,\r\n    SAMPLES = 0x80a9,\r\n    SAMPLE_COVERAGE_VALUE = 0x80aa,\r\n    SAMPLE_COVERAGE_INVERT = 0x80ab,\r\n    COMPRESSED_TEXTURE_FORMATS = 0x86a3,\r\n    DONT_CARE = 0x1100,\r\n    FASTEST = 0x1101,\r\n    NICEST = 0x1102,\r\n    GENERATE_MIPMAP_HINT = 0x8192,\r\n    BYTE = 0x1400,\r\n    UNSIGNED_BYTE = 0x1401,\r\n    SHORT = 0x1402,\r\n    UNSIGNED_SHORT = 0x1403,\r\n    INT = 0x1404,\r\n    UNSIGNED_INT = 0x1405,\r\n    FLOAT = 0x1406,\r\n    DEPTH_COMPONENT = 0x1902,\r\n    ALPHA = 0x1906,\r\n    RGB = 0x1907,\r\n    RGBA = 0x1908,\r\n    LUMINANCE = 0x1909,\r\n    LUMINANCE_ALPHA = 0x190a,\r\n    UNSIGNED_SHORT_4_4_4_4 = 0x8033,\r\n    UNSIGNED_SHORT_5_5_5_1 = 0x8034,\r\n    UNSIGNED_SHORT_5_6_5 = 0x8363,\r\n    FRAGMENT_SHADER = 0x8b30,\r\n    VERTEX_SHADER = 0x8b31,\r\n    MAX_VERTEX_ATTRIBS = 0x8869,\r\n    MAX_VERTEX_UNIFORM_VECTORS = 0x8dfb,\r\n    MAX_VARYING_VECTORS = 0x8dfc,\r\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8b4d,\r\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8b4c,\r\n    MAX_TEXTURE_IMAGE_UNITS = 0x8872,\r\n    MAX_FRAGMENT_UNIFORM_VECTORS = 0x8dfd,\r\n    SHADER_TYPE = 0x8b4f,\r\n    DELETE_STATUS = 0x8b80,\r\n    LINK_STATUS = 0x8b82,\r\n    VALIDATE_STATUS = 0x8b83,\r\n    ATTACHED_SHADERS = 0x8b85,\r\n    ACTIVE_UNIFORMS = 0x8b86,\r\n    ACTIVE_ATTRIBUTES = 0x8b89,\r\n    SHADING_LANGUAGE_VERSION = 0x8b8c,\r\n    CURRENT_PROGRAM = 0x8b8d,\r\n    NEVER = 0x0200,\r\n    LESS = 0x0201,\r\n    EQUAL = 0x0202,\r\n    LEQUAL = 0x0203,\r\n    GREATER = 0x0204,\r\n    NOTEQUAL = 0x0205,\r\n    GEQUAL = 0x0206,\r\n    ALWAYS = 0x0207,\r\n    KEEP = 0x1e00,\r\n    REPLACE = 0x1e01,\r\n    INCR = 0x1e02,\r\n    DECR = 0x1e03,\r\n    INVERT = 0x150a,\r\n    INCR_WRAP = 0x8507,\r\n    DECR_WRAP = 0x8508,\r\n    VENDOR = 0x1f00,\r\n    RENDERER = 0x1f01,\r\n    VERSION = 0x1f02,\r\n    NEAREST = 0x2600,\r\n    LINEAR = 0x2601,\r\n    NEAREST_MIPMAP_NEAREST = 0x2700,\r\n    LINEAR_MIPMAP_NEAREST = 0x2701,\r\n    NEAREST_MIPMAP_LINEAR = 0x2702,\r\n    LINEAR_MIPMAP_LINEAR = 0x2703,\r\n    TEXTURE_MAG_FILTER = 0x2800,\r\n    TEXTURE_MIN_FILTER = 0x2801,\r\n    TEXTURE_WRAP_S = 0x2802,\r\n    TEXTURE_WRAP_T = 0x2803,\r\n    TEXTURE_2D = 0x0de1,\r\n    TEXTURE = 0x1702,\r\n    TEXTURE_CUBE_MAP = 0x8513,\r\n    TEXTURE_BINDING_CUBE_MAP = 0x8514,\r\n    TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,\r\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,\r\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a,\r\n    MAX_CUBE_MAP_TEXTURE_SIZE = 0x851c,\r\n    TEXTURE0 = 0x84c0,\r\n    TEXTURE1 = 0x84c1,\r\n    TEXTURE2 = 0x84c2,\r\n    TEXTURE3 = 0x84c3,\r\n    TEXTURE4 = 0x84c4,\r\n    TEXTURE5 = 0x84c5,\r\n    TEXTURE6 = 0x84c6,\r\n    TEXTURE7 = 0x84c7,\r\n    TEXTURE8 = 0x84c8,\r\n    TEXTURE9 = 0x84c9,\r\n    TEXTURE10 = 0x84ca,\r\n    TEXTURE11 = 0x84cb,\r\n    TEXTURE12 = 0x84cc,\r\n    TEXTURE13 = 0x84cd,\r\n    TEXTURE14 = 0x84ce,\r\n    TEXTURE15 = 0x84cf,\r\n    TEXTURE16 = 0x84d0,\r\n    TEXTURE17 = 0x84d1,\r\n    TEXTURE18 = 0x84d2,\r\n    TEXTURE19 = 0x84d3,\r\n    TEXTURE20 = 0x84d4,\r\n    TEXTURE21 = 0x84d5,\r\n    TEXTURE22 = 0x84d6,\r\n    TEXTURE23 = 0x84d7,\r\n    TEXTURE24 = 0x84d8,\r\n    TEXTURE25 = 0x84d9,\r\n    TEXTURE26 = 0x84da,\r\n    TEXTURE27 = 0x84db,\r\n    TEXTURE28 = 0x84dc,\r\n    TEXTURE29 = 0x84dd,\r\n    TEXTURE30 = 0x84de,\r\n    TEXTURE31 = 0x84df,\r\n    ACTIVE_TEXTURE = 0x84e0,\r\n    REPEAT = 0x2901,\r\n    CLAMP_TO_EDGE = 0x812f,\r\n    MIRRORED_REPEAT = 0x8370,\r\n    FLOAT_VEC2 = 0x8b50,\r\n    FLOAT_VEC3 = 0x8b51,\r\n    FLOAT_VEC4 = 0x8b52,\r\n    INT_VEC2 = 0x8b53,\r\n    INT_VEC3 = 0x8b54,\r\n    INT_VEC4 = 0x8b55,\r\n    BOOL = 0x8b56,\r\n    BOOL_VEC2 = 0x8b57,\r\n    BOOL_VEC3 = 0x8b58,\r\n    BOOL_VEC4 = 0x8b59,\r\n    FLOAT_MAT2 = 0x8b5a,\r\n    FLOAT_MAT3 = 0x8b5b,\r\n    FLOAT_MAT4 = 0x8b5c,\r\n    SAMPLER_2D = 0x8b5e,\r\n    SAMPLER_CUBE = 0x8b60,\r\n    VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,\r\n    VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,\r\n    VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,\r\n    VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,\r\n    VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886a,\r\n    VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,\r\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889f,\r\n    IMPLEMENTATION_COLOR_READ_TYPE = 0x8b9a,\r\n    IMPLEMENTATION_COLOR_READ_FORMAT = 0x8b9b,\r\n    COMPILE_STATUS = 0x8b81,\r\n    LOW_FLOAT = 0x8df0,\r\n    MEDIUM_FLOAT = 0x8df1,\r\n    HIGH_FLOAT = 0x8df2,\r\n    LOW_INT = 0x8df3,\r\n    MEDIUM_INT = 0x8df4,\r\n    HIGH_INT = 0x8df5,\r\n    FRAMEBUFFER = 0x8d40,\r\n    RENDERBUFFER = 0x8d41,\r\n    RGBA4 = 0x8056,\r\n    RGB5_A1 = 0x8057,\r\n    RGB565 = 0x8d62,\r\n    DEPTH_COMPONENT16 = 0x81a5,\r\n    STENCIL_INDEX = 0x1901,\r\n    STENCIL_INDEX8 = 0x8d48,\r\n    DEPTH_STENCIL = 0x84f9,\r\n    RENDERBUFFER_WIDTH = 0x8d42,\r\n    RENDERBUFFER_HEIGHT = 0x8d43,\r\n    RENDERBUFFER_INTERNAL_FORMAT = 0x8d44,\r\n    RENDERBUFFER_RED_SIZE = 0x8d50,\r\n    RENDERBUFFER_GREEN_SIZE = 0x8d51,\r\n    RENDERBUFFER_BLUE_SIZE = 0x8d52,\r\n    RENDERBUFFER_ALPHA_SIZE = 0x8d53,\r\n    RENDERBUFFER_DEPTH_SIZE = 0x8d54,\r\n    RENDERBUFFER_STENCIL_SIZE = 0x8d55,\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8cd0,\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8cd1,\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8cd2,\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8cd3,\r\n    COLOR_ATTACHMENT0 = 0x8ce0,\r\n    DEPTH_ATTACHMENT = 0x8d00,\r\n    STENCIL_ATTACHMENT = 0x8d20,\r\n    DEPTH_STENCIL_ATTACHMENT = 0x821a,\r\n    NONE = 0,\r\n    FRAMEBUFFER_COMPLETE = 0x8cd5,\r\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8cd6,\r\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8cd7,\r\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8cd9,\r\n    FRAMEBUFFER_UNSUPPORTED = 0x8cdd,\r\n    FRAMEBUFFER_BINDING = 0x8ca6,\r\n    RENDERBUFFER_BINDING = 0x8ca7,\r\n    MAX_RENDERBUFFER_SIZE = 0x84e8,\r\n    INVALID_FRAMEBUFFER_OPERATION = 0x0506,\r\n    UNPACK_FLIP_Y_WEBGL = 0x9240,\r\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241,\r\n    CONTEXT_LOST_WEBGL = 0x9242,\r\n    UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243,\r\n    BROWSER_DEFAULT_WEBGL = 0x9244,\r\n\r\n    // WEBGL_compressed_texture_s3tc\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83f0,\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83f1,\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83f2,\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83f3,\r\n\r\n    // WEBGL_compressed_texture_pvrtc\r\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8c00,\r\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8c01,\r\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\r\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\r\n\r\n    // WEBGL_compressed_texture_etc1\r\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8d64,\r\n\r\n    // Desktop OpenGL\r\n    DOUBLE = 0x140a,\r\n\r\n    // WebGL 2\r\n    READ_BUFFER = 0x0c02,\r\n    UNPACK_ROW_LENGTH = 0x0cf2,\r\n    UNPACK_SKIP_ROWS = 0x0cf3,\r\n    UNPACK_SKIP_PIXELS = 0x0cf4,\r\n    PACK_ROW_LENGTH = 0x0d02,\r\n    PACK_SKIP_ROWS = 0x0d03,\r\n    PACK_SKIP_PIXELS = 0x0d04,\r\n    COLOR = 0x1800,\r\n    DEPTH = 0x1801,\r\n    STENCIL = 0x1802,\r\n    RED = 0x1903,\r\n    RGB8 = 0x8051,\r\n    RGBA8 = 0x8058,\r\n    RGB10_A2 = 0x8059,\r\n    TEXTURE_BINDING_3D = 0x806a,\r\n    UNPACK_SKIP_IMAGES = 0x806d,\r\n    UNPACK_IMAGE_HEIGHT = 0x806e,\r\n    TEXTURE_3D = 0x806f,\r\n    TEXTURE_WRAP_R = 0x8072,\r\n    MAX_3D_TEXTURE_SIZE = 0x8073,\r\n    UNSIGNED_INT_2_10_10_10_REV = 0x8368,\r\n    MAX_ELEMENTS_VERTICES = 0x80e8,\r\n    MAX_ELEMENTS_INDICES = 0x80e9,\r\n    TEXTURE_MIN_LOD = 0x813a,\r\n    TEXTURE_MAX_LOD = 0x813b,\r\n    TEXTURE_BASE_LEVEL = 0x813c,\r\n    TEXTURE_MAX_LEVEL = 0x813d,\r\n    MIN = 0x8007,\r\n    MAX = 0x8008,\r\n    DEPTH_COMPONENT24 = 0x81a6,\r\n    MAX_TEXTURE_LOD_BIAS = 0x84fd,\r\n    TEXTURE_COMPARE_MODE = 0x884c,\r\n    TEXTURE_COMPARE_FUNC = 0x884d,\r\n    CURRENT_QUERY = 0x8865,\r\n    QUERY_RESULT = 0x8866,\r\n    QUERY_RESULT_AVAILABLE = 0x8867,\r\n    STREAM_READ = 0x88e1,\r\n    STREAM_COPY = 0x88e2,\r\n    STATIC_READ = 0x88e5,\r\n    STATIC_COPY = 0x88e6,\r\n    DYNAMIC_READ = 0x88e9,\r\n    DYNAMIC_COPY = 0x88ea,\r\n    MAX_DRAW_BUFFERS = 0x8824,\r\n    DRAW_BUFFER0 = 0x8825,\r\n    DRAW_BUFFER1 = 0x8826,\r\n    DRAW_BUFFER2 = 0x8827,\r\n    DRAW_BUFFER3 = 0x8828,\r\n    DRAW_BUFFER4 = 0x8829,\r\n    DRAW_BUFFER5 = 0x882a,\r\n    DRAW_BUFFER6 = 0x882b,\r\n    DRAW_BUFFER7 = 0x882c,\r\n    DRAW_BUFFER8 = 0x882d,\r\n    DRAW_BUFFER9 = 0x882e,\r\n    DRAW_BUFFER10 = 0x882f,\r\n    DRAW_BUFFER11 = 0x8830,\r\n    DRAW_BUFFER12 = 0x8831,\r\n    DRAW_BUFFER13 = 0x8832,\r\n    DRAW_BUFFER14 = 0x8833,\r\n    DRAW_BUFFER15 = 0x8834,\r\n    MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8b49,\r\n    MAX_VERTEX_UNIFORM_COMPONENTS = 0x8b4a,\r\n    SAMPLER_3D = 0x8b5f,\r\n    SAMPLER_2D_SHADOW = 0x8b62,\r\n    FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b,\r\n    PIXEL_PACK_BUFFER = 0x88eb,\r\n    PIXEL_UNPACK_BUFFER = 0x88ec,\r\n    PIXEL_PACK_BUFFER_BINDING = 0x88ed,\r\n    PIXEL_UNPACK_BUFFER_BINDING = 0x88ef,\r\n    FLOAT_MAT2X3 = 0x8b65,\r\n    FLOAT_MAT2X4 = 0x8b66,\r\n    FLOAT_MAT3X2 = 0x8b67,\r\n    FLOAT_MAT3X4 = 0x8b68,\r\n    FLOAT_MAT4X2 = 0x8b69,\r\n    FLOAT_MAT4X3 = 0x8b6a,\r\n    SRGB = 0x8c40,\r\n    SRGB8 = 0x8c41,\r\n    SRGB8_ALPHA8 = 0x8c43,\r\n    COMPARE_REF_TO_TEXTURE = 0x884e,\r\n    RGBA32F = 0x8814,\r\n    RGB32F = 0x8815,\r\n    RGBA16F = 0x881a,\r\n    RGB16F = 0x881b,\r\n    VERTEX_ATTRIB_ARRAY_INTEGER = 0x88fd,\r\n    MAX_ARRAY_TEXTURE_LAYERS = 0x88ff,\r\n    MIN_PROGRAM_TEXEL_OFFSET = 0x8904,\r\n    MAX_PROGRAM_TEXEL_OFFSET = 0x8905,\r\n    MAX_VARYING_COMPONENTS = 0x8b4b,\r\n    TEXTURE_2D_ARRAY = 0x8c1a,\r\n    TEXTURE_BINDING_2D_ARRAY = 0x8c1d,\r\n    R11F_G11F_B10F = 0x8c3a,\r\n    UNSIGNED_INT_10F_11F_11F_REV = 0x8c3b,\r\n    RGB9_E5 = 0x8c3d,\r\n    UNSIGNED_INT_5_9_9_9_REV = 0x8c3e,\r\n    TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8c7f,\r\n    MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8c80,\r\n    TRANSFORM_FEEDBACK_VARYINGS = 0x8c83,\r\n    TRANSFORM_FEEDBACK_BUFFER_START = 0x8c84,\r\n    TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8c85,\r\n    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88,\r\n    RASTERIZER_DISCARD = 0x8c89,\r\n    MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8c8a,\r\n    MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8c8b,\r\n    INTERLEAVED_ATTRIBS = 0x8c8c,\r\n    SEPARATE_ATTRIBS = 0x8c8d,\r\n    TRANSFORM_FEEDBACK_BUFFER = 0x8c8e,\r\n    TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8c8f,\r\n    RGBA32UI = 0x8d70,\r\n    RGB32UI = 0x8d71,\r\n    RGBA16UI = 0x8d76,\r\n    RGB16UI = 0x8d77,\r\n    RGBA8UI = 0x8d7c,\r\n    RGB8UI = 0x8d7d,\r\n    RGBA32I = 0x8d82,\r\n    RGB32I = 0x8d83,\r\n    RGBA16I = 0x8d88,\r\n    RGB16I = 0x8d89,\r\n    RGBA8I = 0x8d8e,\r\n    RGB8I = 0x8d8f,\r\n    RED_INTEGER = 0x8d94,\r\n    RGB_INTEGER = 0x8d98,\r\n    RGBA_INTEGER = 0x8d99,\r\n    SAMPLER_2D_ARRAY = 0x8dc1,\r\n    SAMPLER_2D_ARRAY_SHADOW = 0x8dc4,\r\n    SAMPLER_CUBE_SHADOW = 0x8dc5,\r\n    UNSIGNED_INT_VEC2 = 0x8dc6,\r\n    UNSIGNED_INT_VEC3 = 0x8dc7,\r\n    UNSIGNED_INT_VEC4 = 0x8dc8,\r\n    INT_SAMPLER_2D = 0x8dca,\r\n    INT_SAMPLER_3D = 0x8dcb,\r\n    INT_SAMPLER_CUBE = 0x8dcc,\r\n    INT_SAMPLER_2D_ARRAY = 0x8dcf,\r\n    UNSIGNED_INT_SAMPLER_2D = 0x8dd2,\r\n    UNSIGNED_INT_SAMPLER_3D = 0x8dd3,\r\n    UNSIGNED_INT_SAMPLER_CUBE = 0x8dd4,\r\n    UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8dd7,\r\n    DEPTH_COMPONENT32F = 0x8cac,\r\n    DEPTH32F_STENCIL8 = 0x8cad,\r\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8dad,\r\n    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,\r\n    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,\r\n    FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,\r\n    FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,\r\n    FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,\r\n    FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,\r\n    FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,\r\n    FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,\r\n    FRAMEBUFFER_DEFAULT = 0x8218,\r\n    UNSIGNED_INT_24_8 = 0x84fa,\r\n    DEPTH24_STENCIL8 = 0x88f0,\r\n    UNSIGNED_NORMALIZED = 0x8c17,\r\n    DRAW_FRAMEBUFFER_BINDING = 0x8ca6, // Same as FRAMEBUFFER_BINDING\r\n    READ_FRAMEBUFFER = 0x8ca8,\r\n    DRAW_FRAMEBUFFER = 0x8ca9,\r\n    READ_FRAMEBUFFER_BINDING = 0x8caa,\r\n    RENDERBUFFER_SAMPLES = 0x8cab,\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8cd4,\r\n    MAX_COLOR_ATTACHMENTS = 0x8cdf,\r\n    COLOR_ATTACHMENT1 = 0x8ce1,\r\n    COLOR_ATTACHMENT2 = 0x8ce2,\r\n    COLOR_ATTACHMENT3 = 0x8ce3,\r\n    COLOR_ATTACHMENT4 = 0x8ce4,\r\n    COLOR_ATTACHMENT5 = 0x8ce5,\r\n    COLOR_ATTACHMENT6 = 0x8ce6,\r\n    COLOR_ATTACHMENT7 = 0x8ce7,\r\n    COLOR_ATTACHMENT8 = 0x8ce8,\r\n    COLOR_ATTACHMENT9 = 0x8ce9,\r\n    COLOR_ATTACHMENT10 = 0x8cea,\r\n    COLOR_ATTACHMENT11 = 0x8ceb,\r\n    COLOR_ATTACHMENT12 = 0x8cec,\r\n    COLOR_ATTACHMENT13 = 0x8ced,\r\n    COLOR_ATTACHMENT14 = 0x8cee,\r\n    COLOR_ATTACHMENT15 = 0x8cef,\r\n    FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8d56,\r\n    MAX_SAMPLES = 0x8d57,\r\n    HALF_FLOAT = 0x140b,\r\n    HALF_FLOAT_OES = 0x8d61,\r\n    RG = 0x8227,\r\n    RG_INTEGER = 0x8228,\r\n    R8 = 0x8229,\r\n    RG8 = 0x822b,\r\n    R16F = 0x822d,\r\n    R32F = 0x822e,\r\n    RG16F = 0x822f,\r\n    RG32F = 0x8230,\r\n    R8I = 0x8231,\r\n    R8UI = 0x8232,\r\n    R16I = 0x8233,\r\n    R16UI = 0x8234,\r\n    R32I = 0x8235,\r\n    R32UI = 0x8236,\r\n    RG8I = 0x8237,\r\n    RG8UI = 0x8238,\r\n    RG16I = 0x8239,\r\n    RG16UI = 0x823a,\r\n    RG32I = 0x823b,\r\n    RG32UI = 0x823c,\r\n    VERTEX_ARRAY_BINDING = 0x85b5,\r\n    R8_SNORM = 0x8f94,\r\n    RG8_SNORM = 0x8f95,\r\n    RGB8_SNORM = 0x8f96,\r\n    RGBA8_SNORM = 0x8f97,\r\n    SIGNED_NORMALIZED = 0x8f9c,\r\n    COPY_READ_BUFFER = 0x8f36,\r\n    COPY_WRITE_BUFFER = 0x8f37,\r\n    COPY_READ_BUFFER_BINDING = 0x8f36, // Same as COPY_READ_BUFFER\r\n    COPY_WRITE_BUFFER_BINDING = 0x8f37, // Same as COPY_WRITE_BUFFER\r\n    UNIFORM_BUFFER = 0x8a11,\r\n    UNIFORM_BUFFER_BINDING = 0x8a28,\r\n    UNIFORM_BUFFER_START = 0x8a29,\r\n    UNIFORM_BUFFER_SIZE = 0x8a2a,\r\n    MAX_VERTEX_UNIFORM_BLOCKS = 0x8a2b,\r\n    MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8a2d,\r\n    MAX_COMBINED_UNIFORM_BLOCKS = 0x8a2e,\r\n    MAX_UNIFORM_BUFFER_BINDINGS = 0x8a2f,\r\n    MAX_UNIFORM_BLOCK_SIZE = 0x8a30,\r\n    MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8a31,\r\n    MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8a33,\r\n    UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8a34,\r\n    ACTIVE_UNIFORM_BLOCKS = 0x8a36,\r\n    UNIFORM_TYPE = 0x8a37,\r\n    UNIFORM_SIZE = 0x8a38,\r\n    UNIFORM_BLOCK_INDEX = 0x8a3a,\r\n    UNIFORM_OFFSET = 0x8a3b,\r\n    UNIFORM_ARRAY_STRIDE = 0x8a3c,\r\n    UNIFORM_MATRIX_STRIDE = 0x8a3d,\r\n    UNIFORM_IS_ROW_MAJOR = 0x8a3e,\r\n    UNIFORM_BLOCK_BINDING = 0x8a3f,\r\n    UNIFORM_BLOCK_DATA_SIZE = 0x8a40,\r\n    UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8a42,\r\n    UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8a43,\r\n    UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8a44,\r\n    UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46,\r\n    INVALID_INDEX = 0xffffffff,\r\n    MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,\r\n    MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,\r\n    MAX_SERVER_WAIT_TIMEOUT = 0x9111,\r\n    OBJECT_TYPE = 0x9112,\r\n    SYNC_CONDITION = 0x9113,\r\n    SYNC_STATUS = 0x9114,\r\n    SYNC_FLAGS = 0x9115,\r\n    SYNC_FENCE = 0x9116,\r\n    SYNC_GPU_COMMANDS_COMPLETE = 0x9117,\r\n    UNSIGNALED = 0x9118,\r\n    SIGNALED = 0x9119,\r\n    ALREADY_SIGNALED = 0x911a,\r\n    TIMEOUT_EXPIRED = 0x911b,\r\n    CONDITION_SATISFIED = 0x911c,\r\n    WAIT_FAILED = 0x911d,\r\n    SYNC_FLUSH_COMMANDS_BIT = 0x00000001,\r\n    VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88fe,\r\n    ANY_SAMPLES_PASSED = 0x8c2f,\r\n    ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a,\r\n    SAMPLER_BINDING = 0x8919,\r\n    RGB10_A2UI = 0x906f,\r\n    INT_2_10_10_10_REV = 0x8d9f,\r\n    TRANSFORM_FEEDBACK = 0x8e22,\r\n    TRANSFORM_FEEDBACK_PAUSED = 0x8e23,\r\n    TRANSFORM_FEEDBACK_ACTIVE = 0x8e24,\r\n    TRANSFORM_FEEDBACK_BINDING = 0x8e25,\r\n    COMPRESSED_R11_EAC = 0x9270,\r\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\r\n    COMPRESSED_RG11_EAC = 0x9272,\r\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\r\n    COMPRESSED_RGB8_ETC2 = 0x9274,\r\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\r\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\r\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\r\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\r\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\r\n    TEXTURE_IMMUTABLE_FORMAT = 0x912f,\r\n    MAX_ELEMENT_INDEX = 0x8d6b,\r\n    TEXTURE_IMMUTABLE_LEVELS = 0x82df,\r\n\r\n    // Extensions\r\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff,\r\n}\r\n","import { IcontextOptions, IgeometryInfo, IprogramInfo, Iobject, IbassProgramInfo } from \"./type\";\r\nimport { setGeometry, setGeometryWithCached } from \"./geometryInfo\";\r\nimport { setProgram, setProgramWithCached } from \"./programInfo\";\r\n\r\ndeclare global {\r\n    interface WebGLVertexArrayObject extends WebGLObject {}\r\n\r\n    interface WebGLRenderingContext {\r\n        beWebgl2: boolean;\r\n\r\n        bindpoint: number;\r\n        beActiveVao: boolean;\r\n        beActiveInstance: boolean;\r\n\r\n        addExtension(extName: string): void;\r\n        createVertexArray(): any;\r\n        bindVertexArray(vao?: WebGLVertexArrayObject | null): void;\r\n        deleteVertexArray(vao: WebGLVertexArrayObject): void;\r\n\r\n        vertexAttribDivisor(index: number, divisor: number): void;\r\n        drawElementsInstanced(mode: number, count: number, type: number, offset: number, instanceCount: number): void;\r\n        drawArraysInstanced(mode: number, first: number, count: number, instanceCount: number): void;\r\n    }\r\n}\r\nWebGLRenderingContext.prototype.addExtension = function(extname: string): boolean {\r\n    let ext = this.getExtension(extname);\r\n    if (ext) {\r\n        switch (extname) {\r\n            case \"OES_vertex_array_object\":\r\n                this.bindVertexArray = ext.bindVertexArrayOES.bind(ext);\r\n                this.createVertexArray = ext.createVertexArrayOES.bind(ext);\r\n                this.deleteVertexArray = ext.deleteVertexArrayOES.bind(ext);\r\n                this.beActiveVao = true;\r\n                return true;\r\n            case \"ANGLE_instanced_arrays\":\r\n                this.vertexAttribDivisor = ext.vertexAttribDivisorANGLE.bind(ext);\r\n                this.drawElementsInstanced = ext.drawElementsInstancedANGLE.bind(ext);\r\n                this.drawArraysInstanced = ext.drawArraysInstancedANGLE.bind(ext);\r\n                this.beActiveInstance = true;\r\n                return true;\r\n\r\n            default:\r\n                console.warn(\"Not handle in addExtension, type: \" + extname);\r\n                return false;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nObject.defineProperty(WebGLRenderingContext, \"beWebgl2\", {\r\n    get: function() {\r\n        if (this.beWebgl2 == null) {\r\n            let version = this.getParameter(this.VERSION);\r\n            this.beWebgl2 = version.indexOf(\"WebGL 2.0\") === 0;\r\n        }\r\n        return this._beWebgl2;\r\n    },\r\n    set: function(value: boolean) {\r\n        this._beWebgl2 = value;\r\n    },\r\n});\r\n\r\nexport function setUpWebgl(canvas: HTMLCanvasElement, options: IcontextOptions = {}): WebGLRenderingContext {\r\n    let type = options.context || \"webgl\";\r\n    let gl = canvas.getContext(type, options.contextAtts) as WebGLRenderingContext;\r\n    if (options.extentions != null) {\r\n        options.extentions.forEach(ext => {\r\n            gl.addExtension(ext);\r\n        });\r\n    }\r\n    if (type == \"webgl2\") {\r\n        gl.beActiveInstance = true;\r\n        gl.beActiveVao = true;\r\n    }\r\n\r\n    // canvas.addEventListener('webglcontextlost', function (e)\r\n    // {\r\n    //     console.log(e);\r\n    // }, false);\r\n\r\n    return gl;\r\n}\r\n\r\nexport function setGeometryAndProgram(gl: WebGLRenderingContext, geometry: IgeometryInfo, program: IprogramInfo) {\r\n    setProgram(gl, program);\r\n    setGeometry(gl, geometry, program);\r\n}\r\n\r\nexport function setGeometryAndProgramWithCached(\r\n    gl: WebGLRenderingContext,\r\n    geometry: IgeometryInfo,\r\n    program: IprogramInfo,\r\n) {\r\n    setGeometryWithCached(gl, geometry, program);\r\n    setProgramWithCached(gl, program);\r\n}\r\n\r\nexport function drawBufferInfo(gl: WebGLRenderingContext, geometry: IgeometryInfo, instanceCount?: number): void {\r\n    if (geometry.indices != null) {\r\n        if (instanceCount != null) {\r\n            gl.drawElementsInstanced(\r\n                geometry.primitiveType,\r\n                geometry.count,\r\n                geometry.indices.componentDataType,\r\n                geometry.offset || 0,\r\n                instanceCount,\r\n            );\r\n        } else {\r\n            gl.drawElements(\r\n                geometry.primitiveType,\r\n                geometry.count,\r\n                geometry.indices.componentDataType,\r\n                geometry.offset || 0,\r\n            );\r\n        }\r\n    } else {\r\n        if (instanceCount != null) {\r\n            gl.drawArraysInstanced(geometry.primitiveType, geometry.offset || 0, geometry.count, instanceCount);\r\n        } else {\r\n            gl.drawArrays(geometry.primitiveType, geometry.offset || 0, geometry.count);\r\n        }\r\n    }\r\n}\r\n\r\nexport function drawObject(gl: WebGLRenderingContext, obj: Iobject, instanceCount?: number) {\r\n    setProgram(gl, obj.program);\r\n    let beUseVao = obj.geometry.vao != null;\r\n    if (beUseVao) {\r\n        gl.bindVertexArray(obj.geometry.vao);\r\n    } else {\r\n        setGeometry(gl, obj.geometry, obj.program);\r\n    }\r\n    drawBufferInfo(gl, obj.geometry, instanceCount);\r\n    {\r\n        // end draw\r\n        if (beUseVao) {\r\n            gl.bindVertexArray(null);\r\n        }\r\n    }\r\n}\r\n//------------program和vao是一一对应的，geometry可以有多个vao\r\n/**\r\n * 创建vao将geometry和program绑定\r\n */\r\nexport function createVaoByPrograme(\r\n    gl: WebGLRenderingContext,\r\n    program: IprogramInfo,\r\n    geometry: IgeometryInfo,\r\n): WebGLVertexArrayObject {\r\n    let vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n    setGeometry(gl, geometry, program);\r\n    gl.bindVertexArray(null);\r\n    return vao;\r\n}\r\n\r\nexport * from \"./geometryInfo\";\r\nexport * from \"./programInfo\";\r\nexport * from \"./glconstant\";\r\nexport * from \"./state\";\r\nexport * from \"./texture\";\r\nexport * from \"./helper\";\r\n","import { IframeState } from \"../scene/frameState\";\r\n\r\nexport interface Ientity {\r\n    readonly guid: number;\r\n    beActive: boolean;\r\n    maskLayer: CullingMask;\r\n    components: { [name: string]: Icomponent };\r\n    addCompByName(compName: string): Icomponent;\r\n    getCompByName(compName: string): Icomponent;\r\n    addComp(comp: Icomponent): Icomponent;\r\n    // update(deltaTime: number): void;\r\n    dispose(): void;\r\n}\r\n\r\nexport interface IcompoentConstructor {\r\n    new (): Icomponent;\r\n}\r\nexport interface Icomponent {\r\n    entity: Ientity;\r\n    update(frameState: IframeState): void;\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * 渲染的层级(从小到大绘制)\r\n */\r\nexport enum RenderLayerEnum {\r\n    Background = 1000,\r\n    Geometry = 2000,\r\n    AlphaTest = 2450,\r\n    Transparent = 3000, //透明\r\n    Overlay = 4000, //Overlay层\r\n}\r\n/**\r\n * 渲染mask枚举\r\n */\r\nexport enum CullingMask {\r\n    ui = 0x00000001,\r\n    default = 0x00000002,\r\n    editor = 0x00000004,\r\n    model = 0x00000008,\r\n    everything = 0xffffffff,\r\n    nothing = 0x00000000,\r\n    modelbeforeui = 0x00000008,\r\n}\r\n/**\r\n * 渲染器接口 继承自组件接口\r\n */\r\nexport interface Irender extends Icomponent {\r\n    // layer: RenderLayerEnum;\r\n    // queue: number;\r\n    mask: CullingMask;\r\n    // render(): void;\r\n    // materials: Material[];\r\n    // // addToRenderList():void;\r\n    // BeRenderable(): boolean;\r\n    // BeInstantiable(): boolean;\r\n    // bouningSphere: BoundingSphere;\r\n}\r\n\r\nexport class EC {\r\n    private static dic: { [compName: string]: IcompoentConstructor } = {};\r\n    static RegComp = (comp: Function) => {\r\n        EC.dic[comp.constructor.name] = comp.constructor as IcompoentConstructor;\r\n    };\r\n    static NewComponent(compname: string): Icomponent {\r\n        return new EC.dic[compname]();\r\n    }\r\n}\r\n","import { Vec4 } from \"./vec4\";\r\nexport const EPSILON = 0.000001;\r\n\r\nexport function clamp(v: number, min: number = 0, max: number = 1): number {\r\n    if (v <= min) return min;\r\n    else if (v >= max) return max;\r\n    else return v;\r\n}\r\n\r\nexport function bePowerOf2(value: number) {\r\n    return (value & (value - 1)) == 0;\r\n}\r\n\r\nexport function lerp(from: number, to: number, lerp: number, out: number) {\r\n    out = (to - from) * lerp + from;\r\n}\r\n\r\nexport function random(min: number = 0, max: number = 1) {\r\n    let bund = max - min;\r\n    return min + bund * Math.random();\r\n}\r\n\r\nexport function numberEqual(a: number, b: number): boolean {\r\n    return a == b;\r\n}\r\nexport function arrayEqual(a: number[] | Float32Array, b: number[] | Float32Array) {\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (a[i] != b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n//row：图片行数//column:图片列数//index：第几张图片（index从0开始计数）\r\nexport function spriteAnimation(row: number, column: number, index: number, out: Vec4) {\r\n    var width = 1.0 / column;\r\n    var height = 1.0 / row;\r\n    var offsetx = width * (index % column);\r\n    var offsety = height * row - height * (Math.floor(index / column) + 1);\r\n\r\n    out.x = width;\r\n    out.y = height;\r\n    out.z = offsetx;\r\n    out.w = offsety;\r\n    // var uvOffset=new gd3d.math.vector4(width,height,offsetx,offsety);\r\n    // return  uvOffset;\r\n}\r\n\r\nexport function numberLerp(fromV: number, toV: number, v: number) {\r\n    return fromV * (1 - v) + toV * v;\r\n}\r\n\r\n// export function disposeAllRecyle() {\r\n//     color.disposeRecycledItems();\r\n//     mat2d.disposeRecycledItems();\r\n//     mat3.disposeRecycledItems();\r\n//     mat4.disposeRecycledItems();\r\n//     quat.disposeRecycledItems();\r\n//     vec2.disposeRecycledItems();\r\n//     vec3.disposeRecycledItems();\r\n//     vec4.disposeRecycledItems();\r\n// }\r\n","import { Quat } from \"./quat\";\r\n\r\nimport { EPSILON } from \"./common\";\r\n\r\nexport class Vec3 extends Float32Array {\r\n    public static readonly UP = Vec3.create(0, 1, 0);\r\n    public static readonly DOWN = Vec3.create(0, -1, 0);\r\n\r\n    public static readonly RIGHT = Vec3.create(1, 0, 0);\r\n    public static readonly LEFT = Vec3.create(-1, 0, 0);\r\n\r\n    public static readonly FORWARD = Vec3.create(0, 0, 1);\r\n    public static readonly BACKWARD = Vec3.create(0, 0, -1);\r\n\r\n    public static readonly ONE = Vec3.create(1, 1, 1);\r\n    public static readonly ZERO = Vec3.create(0, 0, 0);\r\n\r\n    public get x() {\r\n        return this[0];\r\n    }\r\n    public set x(value: number) {\r\n        this[0] = value;\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n    set y(value: number) {\r\n        this[1] = value;\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n    set z(value: number) {\r\n        this[2] = value;\r\n    }\r\n\r\n    private static Recycle: Vec3[] = [];\r\n    public static create(x: number = 0, y: number = 0, z: number = 0) {\r\n        if (Vec3.Recycle && Vec3.Recycle.length > 0) {\r\n            let item = Vec3.Recycle.pop() as Vec3;\r\n            item[0] = x;\r\n            item[1] = y;\r\n            item[2] = z;\r\n            return item;\r\n        } else {\r\n            // let item=new Float32Array(3);\r\n            // item[0]=x;\r\n            // item[1]=y;\r\n            // item[2]=z;\r\n            let item = new Vec3(x, y, z);\r\n            return item;\r\n        }\r\n    }\r\n    public static clone(from: Vec3): Vec3 {\r\n        if (Vec3.Recycle.length > 0) {\r\n            let item = Vec3.Recycle.pop() as Vec3;\r\n\r\n            Vec3.copy(from, item);\r\n            return item;\r\n        } else {\r\n            //let item=new Float32Array(3);\r\n            let item = new Vec3(from[0], from[1], from[2]);\r\n            // item[0]=from[0];\r\n            // item[1]=from[1];\r\n            // item[2]=from[2];\r\n            return item;\r\n        }\r\n    }\r\n    public static recycle(item: Vec3) {\r\n        Vec3.Recycle.push(item);\r\n    }\r\n    public static disposeRecycledItems() {\r\n        Vec3.Recycle.length = 0;\r\n    }\r\n\r\n    private constructor(x: number = 0, y: number = 0, z: number = 0) {\r\n        super(3);\r\n        this[0] = x;\r\n        this[1] = y;\r\n        this[2] = z;\r\n    }\r\n    /**\r\n     * Copy the values from one vec3 to another\r\n     *\r\n     * @param out the receiving vector\r\n     * @param src the source vector\r\n     * @returns out\r\n     */\r\n    public static copy(from: Vec3 | number[], out: Vec3): Vec3 {\r\n        out[0] = from[0];\r\n        out[1] = from[1];\r\n        out[2] = from[2];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Adds two vec3's\r\n     *\r\n     * @param out the receiving vector\r\n     * @param lhs the first operand\r\n     * @param rhs the second operand\r\n     * @returns out\r\n     */\r\n    public static add(lhs: Vec3, rhs: Vec3, out: Vec3): Vec3 {\r\n        out[0] = lhs[0] + rhs[0];\r\n        out[1] = lhs[1] + rhs[1];\r\n        out[2] = lhs[2] + rhs[2];\r\n        return out;\r\n    }\r\n\r\n    public static toZero(a: Vec3) {\r\n        a[0] = a[1] = a[2] = 0;\r\n    }\r\n\r\n    /**\r\n     * Subtracts vector b from vector a\r\n     *\r\n     * @param out the receiving vector\r\n     * @param lhs the first operand\r\n     * @param rhs the second operand\r\n     * @returns out\r\n     */\r\n    public static subtract(lhs: Vec3, rhs: Vec3, out: Vec3): Vec3 {\r\n        out[0] = lhs[0] - rhs[0];\r\n        out[1] = lhs[1] - rhs[1];\r\n        out[2] = lhs[2] - rhs[2];\r\n        return out;\r\n    }\r\n    /**\r\n     * Multiplies two vec3's\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns out\r\n     */\r\n    public static multiply(a: Vec3, b: Vec3, out: Vec3): Vec3 {\r\n        out[0] = a[0] * b[0];\r\n        out[1] = a[1] * b[1];\r\n        out[2] = a[2] * b[2];\r\n        return out;\r\n    }\r\n\r\n    public static center(a: Vec3, b: Vec3, out: Vec3) {\r\n        this.add(a, b, out);\r\n        this.scale(out, 0.5, out);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Divides two vec3's\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns out\r\n     */\r\n    public static divide(a: Vec3, b: Vec3, out: Vec3): Vec3 {\r\n        out[0] = a[0] / b[0];\r\n        out[1] = a[1] / b[1];\r\n        out[2] = a[2] / b[2];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Math.ceil the components of a vec3\r\n     *\r\n     * @param {Vec3} out the receiving vector\r\n     * @param {Vec3} a vector to ceil\r\n     * @returns {Vec3} out\r\n     */\r\n    public static ceil(out: Vec3, a: Vec3): Vec3 {\r\n        out[0] = Math.ceil(a[0]);\r\n        out[1] = Math.ceil(a[1]);\r\n        out[2] = Math.ceil(a[2]);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Math.floor the components of a vec3\r\n     *\r\n     * @param {Vec3} out the receiving vector\r\n     * @param {Vec3} a vector to floor\r\n     * @returns {Vec3} out\r\n     */\r\n    public static floor(out: Vec3, a: Vec3): Vec3 {\r\n        out[0] = Math.floor(a[0]);\r\n        out[1] = Math.floor(a[1]);\r\n        out[2] = Math.floor(a[2]);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns the minimum of two vec3's\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns out\r\n     */\r\n    public static min(a: Vec3, b: Vec3, out: Vec3): Vec3 {\r\n        out[0] = Math.min(a[0], b[0]);\r\n        out[1] = Math.min(a[1], b[1]);\r\n        out[2] = Math.min(a[2], b[2]);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum of two vec3's\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns out\r\n     */\r\n    public static max(out: Vec3, a: Vec3, b: Vec3): Vec3 {\r\n        out[0] = Math.max(a[0], b[0]);\r\n        out[1] = Math.max(a[1], b[1]);\r\n        out[2] = Math.max(a[2], b[2]);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Math.round the components of a vec3\r\n     *\r\n     * @param {Vec3} out the receiving vector\r\n     * @param {Vec3} a vector to round\r\n     * @returns {Vec3} out\r\n     */\r\n    public static round(out: Vec3, a: Vec3): Vec3 {\r\n        out[0] = Math.round(a[0]);\r\n        out[1] = Math.round(a[1]);\r\n        out[2] = Math.round(a[2]);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Scales a vec3 by a scalar number\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the vector to scale\r\n     * @param b amount to scale the vector by\r\n     * @returns out\r\n     */\r\n    public static scale(a: Vec3, b: number, out: Vec3): Vec3 {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Adds two vec3's after scaling the second operand by a scalar value\r\n     *\r\n     * @param out the receiving vector\r\n     * @param lhs the first operand\r\n     * @param rhs the second operand\r\n     * @param scale the amount to scale b by before adding\r\n     * @returns out\r\n     */\r\n    public static AddscaledVec(lhs: Vec3, rhs: Vec3, scale: number, out: Vec3): Vec3 {\r\n        out[0] = lhs[0] + rhs[0] * scale;\r\n        out[1] = lhs[1] + rhs[1] * scale;\r\n        out[2] = lhs[2] + rhs[2] * scale;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the euclidian distance between two vec3's\r\n     *\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns distance between a and b\r\n     */\r\n    public static distance(a: Vec3, b: Vec3): number {\r\n        let x = b[0] - a[0];\r\n        let y = b[1] - a[1];\r\n        let z = b[2] - a[2];\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n\r\n    /**\r\n     * Calculates the squared euclidian distance between two vec3's\r\n     *\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns squared distance between a and b\r\n     */\r\n    public static squaredDistance(a: Vec3, b: Vec3): number {\r\n        let x = b[0] - a[0];\r\n        let y = b[1] - a[1];\r\n        let z = b[2] - a[2];\r\n        return x * x + y * y + z * z;\r\n    }\r\n\r\n    /**\r\n     * Calculates the length of a vec3\r\n     *\r\n     * @param a vector to calculate length of\r\n     * @returns length of a\r\n     */\r\n    public static magnitude(a: Vec3): number {\r\n        let x = a[0];\r\n        let y = a[1];\r\n        let z = a[2];\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n\r\n    /**\r\n     * Calculates the squared length of a vec3\r\n     *\r\n     * @param a vector to calculate squared length of\r\n     * @returns squared length of a\r\n     */\r\n    public static squaredLength(a: Vec3): number {\r\n        let x = a[0];\r\n        let y = a[1];\r\n        let z = a[2];\r\n        return x * x + y * y + z * z;\r\n    }\r\n\r\n    /**\r\n     * Negates the components of a vec3\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a vector to negate\r\n     * @returns out\r\n     */\r\n    public static negate(a: Vec3, out: Vec3): Vec3 {\r\n        out[0] = -a[0];\r\n        out[1] = -a[1];\r\n        out[2] = -a[2];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns the inverse of the components of a vec3\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a vector to invert\r\n     * @returns out\r\n     */\r\n    public static inverse(a: Vec3, out: Vec3): Vec3 {\r\n        out[0] = 1.0 / a[0];\r\n        out[1] = 1.0 / a[1];\r\n        out[2] = 1.0 / a[2];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Normalize a vec3\r\n     *\r\n     * @param out the receiving vector\r\n     * @param src vector to normalize\r\n     * @returns out\r\n     */\r\n    public static normalize(src: Vec3, out: Vec3): Vec3 {\r\n        let x = src[0];\r\n        let y = src[1];\r\n        let z = src[2];\r\n        let len = x * x + y * y + z * z;\r\n        if (len > 0) {\r\n            //TODO: evaluate use of glm_invsqrt here?\r\n            len = 1 / Math.sqrt(len);\r\n            out[0] = src[0] * len;\r\n            out[1] = src[1] * len;\r\n            out[2] = src[2] * len;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the dot product of two vec3's\r\n     *\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns dot product of a and b\r\n     */\r\n    public static dot(a: Vec3, b: Vec3): number {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n    }\r\n\r\n    /**\r\n     * Computes the cross product of two vec3's\r\n     *\r\n     * @param out the receiving vector\r\n     * @param lhs the first operand\r\n     * @param rhs the second operand\r\n     * @returns out\r\n     */\r\n    public static cross(lhs: Vec3, rhs: Vec3, out: Vec3): Vec3 {\r\n        let ax = lhs[0],\r\n            ay = lhs[1],\r\n            az = lhs[2];\r\n        let bx = rhs[0],\r\n            by = rhs[1],\r\n            bz = rhs[2];\r\n\r\n        out[0] = ay * bz - az * by;\r\n        out[1] = az * bx - ax * bz;\r\n        out[2] = ax * by - ay * bx;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Performs a linear interpolation between two vec3's\r\n     *\r\n     * @param out the receiving vector\r\n     * @param lhs the first operand\r\n     * @param rhs the second operand\r\n     * @param lerp interpolation amount between the two inputs\r\n     * @returns out\r\n     */\r\n    public static lerp(lhs: Vec3, rhs: Vec3, lerp: number, out: Vec3): Vec3 {\r\n        let ax = lhs[0];\r\n        let ay = lhs[1];\r\n        let az = lhs[2];\r\n        out[0] = ax + lerp * (rhs[0] - ax);\r\n        out[1] = ay + lerp * (rhs[1] - ay);\r\n        out[2] = az + lerp * (rhs[2] - az);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Performs a hermite interpolation with two control points\r\n     *\r\n     * @param {Vec3} out the receiving vector\r\n     * @param {Vec3} a the first operand\r\n     * @param {Vec3} b the second operand\r\n     * @param {Vec3} c the third operand\r\n     * @param {Vec3} d the fourth operand\r\n     * @param {number} t interpolation amount between the two inputs\r\n     * @returns {Vec3} out\r\n     */\r\n    public static hermite(out: Vec3, a: Vec3, b: Vec3, c: Vec3, d: Vec3, t: number): Vec3 {\r\n        let factorTimes2 = t * t;\r\n        let factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n        let factor2 = factorTimes2 * (t - 2) + t;\r\n        let factor3 = factorTimes2 * (t - 1);\r\n        let factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Performs a bezier interpolation with two control points\r\n     *\r\n     * @param {Vec3} out the receiving vector\r\n     * @param {Vec3} a the first operand\r\n     * @param {Vec3} b the second operand\r\n     * @param {Vec3} c the third operand\r\n     * @param {Vec3} d the fourth operand\r\n     * @param {number} t interpolation amount between the two inputs\r\n     * @returns {Vec3} out\r\n     */\r\n    public static bezier(out: Vec3, a: Vec3, b: Vec3, c: Vec3, d: Vec3, t: number): Vec3 {\r\n        let inverseFactor = 1 - t;\r\n        let inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n        let factorTimes2 = t * t;\r\n        let factor1 = inverseFactorTimesTwo * inverseFactor;\r\n        let factor2 = 3 * t * inverseFactorTimesTwo;\r\n        let factor3 = 3 * factorTimes2 * inverseFactor;\r\n        let factor4 = factorTimes2 * t;\r\n\r\n        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Generates a random vector with the given scale\r\n     *\r\n     * @param out the receiving vector\r\n     * @param [scale] Length of the resulting vector. If omitted, a unit vector will be returned\r\n     * @returns out\r\n     */\r\n    public static random(out: Vec3, scale: number = 1): Vec3 {\r\n        scale = scale || 1.0;\r\n\r\n        let r = Math.random() * 2.0 * Math.PI;\r\n        let z = Math.random() * 2.0 - 1.0;\r\n        let zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n        out[0] = Math.cos(r) * zScale;\r\n        out[1] = Math.sin(r) * zScale;\r\n        out[2] = z * scale;\r\n        return out;\r\n    }\r\n\r\n    // /**\r\n    //  * Transforms the vec3 with a mat3.\r\n    //  *\r\n    //  * @param out the receiving vector\r\n    //  * @param a the vector to transform\r\n    //  * @param m the 3x3 matrix to transform with\r\n    //  * @returns out\r\n    //  */\r\n    // public static transformMat3(out: vec3, a: vec3, m: mat3): vec3{\r\n    //     let x = a[0],\r\n    //     y = a[1],\r\n    //     z = a[2];\r\n    // out[0] = x * m[0] + y * m[3] + z * m[6];\r\n    // out[1] = x * m[1] + y * m[4] + z * m[7];\r\n    // out[2] = x * m[2] + y * m[5] + z * m[8];\r\n    // return out;\r\n    // }\r\n\r\n    // /**\r\n    //  * 转到mat4中\r\n    //  * Transforms the vec3 with a mat4.\r\n    //  * 4th vector component is implicitly '1'\r\n    //  *\r\n    //  * @param out the receiving vector\r\n    //  * @param a the vector to transform\r\n    //  * @param m matrix to transform with\r\n    //  * @returns out\r\n    //  */\r\n    // public static transformMat4(out: vec3, a: vec3, m: mat4): vec3{\r\n    //     let x = a[0],\r\n    //         y = a[1],\r\n    //         z = a[2];\r\n    //     let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    //     w = w || 1.0;\r\n    //     out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n    //     out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n    //     out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n    //     return out;\r\n    // }\r\n\r\n    /**\r\n     * Transforms the vec3 with a Quat\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the vector to transform\r\n     * @param q Quaternion to transform with\r\n     * @returns out\r\n     */\r\n    public static transformQuat(out: Vec3, a: Vec3, q: Quat): Vec3 {\r\n        // benchmarks: http://jsperf.com/Quaternion-transform-vec3-implementations\r\n\r\n        let x = a[0],\r\n            y = a[1],\r\n            z = a[2];\r\n        let qx = q[0],\r\n            qy = q[1],\r\n            qz = q[2],\r\n            qw = q[3];\r\n\r\n        // calculate Quat * vec\r\n        let ix = qw * x + qy * z - qz * y;\r\n        let iy = qw * y + qz * x - qx * z;\r\n        let iz = qw * z + qx * y - qy * x;\r\n        let iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse Quat\r\n        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotate a 3D vector around the x-axis\r\n     * @param out The receiving vec3\r\n     * @param a The vec3 point to rotate\r\n     * @param b The origin of the rotation\r\n     * @param c The angle of rotation\r\n     * @returns out\r\n     */\r\n    public static rotateX(out: Vec3, a: Vec3, b: Vec3, c: number): Vec3 {\r\n        let p = [],\r\n            r = [];\r\n        //Translate point to the origin\r\n        p[0] = a[0] - b[0];\r\n        p[1] = a[1] - b[1];\r\n        p[2] = a[2] - b[2];\r\n\r\n        //perform rotation\r\n        r[0] = p[0];\r\n        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n        //translate to correct position\r\n        out[0] = r[0] + b[0];\r\n        out[1] = r[1] + b[1];\r\n        out[2] = r[2] + b[2];\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotate a 3D vector around the y-axis\r\n     * @param out The receiving vec3\r\n     * @param a The vec3 point to rotate\r\n     * @param b The origin of the rotation\r\n     * @param c The angle of rotation\r\n     * @returns out\r\n     */\r\n    public static rotateY(out: Vec3, a: Vec3, b: Vec3, c: number): Vec3 {\r\n        let p = [],\r\n            r = [];\r\n        //Translate point to the origin\r\n        p[0] = a[0] - b[0];\r\n        p[1] = a[1] - b[1];\r\n        p[2] = a[2] - b[2];\r\n\r\n        //perform rotation\r\n        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n        r[1] = p[1];\r\n        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n        //translate to correct position\r\n        out[0] = r[0] + b[0];\r\n        out[1] = r[1] + b[1];\r\n        out[2] = r[2] + b[2];\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotate a 3D vector around the z-axis\r\n     * @param out The receiving vec3\r\n     * @param a The vec3 point to rotate\r\n     * @param b The origin of the rotation\r\n     * @param c The angle of rotation\r\n     * @returns out\r\n     */\r\n    public static rotateZ(out: Vec3, a: Vec3, b: Vec3, c: number): Vec3 {\r\n        let p = [],\r\n            r = [];\r\n        //Translate point to the origin\r\n        p[0] = a[0] - b[0];\r\n        p[1] = a[1] - b[1];\r\n        p[2] = a[2] - b[2];\r\n\r\n        //perform rotation\r\n        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n        r[2] = p[2];\r\n\r\n        //translate to correct position\r\n        out[0] = r[0] + b[0];\r\n        out[1] = r[1] + b[1];\r\n        out[2] = r[2] + b[2];\r\n\r\n        return out;\r\n    }\r\n\r\n    // /**\r\n    //  * Perform some operation over an array of vec3s.\r\n    //  *\r\n    //  * @param a the array of vectors to iterate over\r\n    //  * @param stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n    //  * @param offset Number of elements to skip at the beginning of the array\r\n    //  * @param count Number of vec3s to iterate over. If 0 iterates over entire array\r\n    //  * @param fn Function to call for each vector in the array\r\n    //  * @param arg additional argument to pass to fn\r\n    //  * @returns a\r\n    //  * @function\r\n    //  */\r\n    // public static forEach(a: Float32Array, stride: number, offset: number, count: number,\r\n    //                       fn: (a: vec3, b: vec3, arg: any) => void, arg: any): Float32Array;\r\n\r\n    // /**\r\n    //  * Perform some operation over an array of vec3s.\r\n    //  *\r\n    //  * @param a the array of vectors to iterate over\r\n    //  * @param stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n    //  * @param offset Number of elements to skip at the beginning of the array\r\n    //  * @param count Number of vec3s to iterate over. If 0 iterates over entire array\r\n    //  * @param fn Function to call for each vector in the array\r\n    //  * @returns a\r\n    //  * @function\r\n    //  */\r\n    // public static forEach(a: Float32Array, stride: number, offset: number, count: number,\r\n    //                       fn: (a: vec3, b: vec3) => void): Float32Array;\r\n\r\n    /**\r\n     * Get the angle between two 3D vectors\r\n     * @param a The first operand\r\n     * @param b The second operand\r\n     * @returns The angle in radians\r\n     */\r\n    public static angle(a: Vec3, b: Vec3): number {\r\n        let tempA = Vec3.clone(a);\r\n        let tempB = Vec3.clone(b);\r\n        // let tempA = vec3.fromValues(a[0], a[1], a[2]);\r\n        // let tempB = vec3.fromValues(b[0], b[1], b[2]);\r\n\r\n        Vec3.normalize(tempA, tempA);\r\n        Vec3.normalize(tempB, tempB);\r\n\r\n        let cosine = Vec3.dot(tempA, tempB);\r\n\r\n        if (cosine > 1.0) {\r\n            return 0;\r\n        } else if (cosine < -1.0) {\r\n            return Math.PI;\r\n        } else {\r\n            return Math.acos(cosine);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of a vector\r\n     *\r\n     * @param a vector to represent as a string\r\n     * @returns string representation of the vector\r\n     */\r\n    public static str(a: Vec3): string {\r\n        return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n     *\r\n     * @param {Vec3} a The first vector.\r\n     * @param {Vec3} b The second vector.\r\n     * @returns {boolean} True if the vectors are equal, false otherwise.\r\n     */\r\n    public static exactEquals(a: Vec3, b: Vec3): boolean {\r\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the vectors have approximately the same elements in the same position.\r\n     *\r\n     * @param {Vec3} a The first vector.\r\n     * @param {Vec3} b The second vector.\r\n     * @returns {boolean} True if the vectors are equal, false otherwise.\r\n     */\r\n    public static equals(a: Vec3, b: Vec3): boolean {\r\n        let a0 = a[0],\r\n            a1 = a[1],\r\n            a2 = a[2];\r\n        let b0 = b[0],\r\n            b1 = b[1],\r\n            b2 = b[2];\r\n        return Math.abs(a0 - b0) <= EPSILON && Math.abs(a1 - b1) <= EPSILON && Math.abs(a2 - b2) <= EPSILON;\r\n    }\r\n}\r\n","import { Vec3 } from \"./vec3\";\r\nimport { Quat } from \"./quat\";\r\nimport { Vec4 } from \"./vec4\";\r\nimport { EPSILON } from \"./common\";\r\n\r\nexport class Mat4 extends Float32Array {\r\n    private static Recycle: Mat4[] = [];\r\n    public static create() {\r\n        if (Mat4.Recycle && Mat4.Recycle.length > 0) {\r\n            let item = Mat4.Recycle.pop();\r\n            Mat4.identity(item);\r\n            return item;\r\n        } else {\r\n            let item = new Float32Array(16);\r\n            item[0] = 1;\r\n            item[5] = 1;\r\n            item[10] = 1;\r\n            item[15] = 1;\r\n            return item;\r\n        }\r\n    }\r\n    public static clone(from: Mat4): Mat4 {\r\n        if (Mat4.Recycle.length > 0) {\r\n            let item = Mat4.Recycle.pop();\r\n            Mat4.copy(from, item);\r\n            return item;\r\n        } else {\r\n            let out = new Float32Array(16);\r\n            out[0] = from[0];\r\n            out[1] = from[1];\r\n            out[2] = from[2];\r\n            out[3] = from[3];\r\n            out[4] = from[4];\r\n            out[5] = from[5];\r\n            out[6] = from[6];\r\n            out[7] = from[7];\r\n            out[8] = from[8];\r\n            out[9] = from[9];\r\n            out[10] = from[10];\r\n            out[11] = from[11];\r\n            out[12] = from[12];\r\n            out[13] = from[13];\r\n            out[14] = from[14];\r\n            out[15] = from[15];\r\n            return out;\r\n        }\r\n    }\r\n    public static recycle(item: Mat4) {\r\n        Mat4.Recycle.push(item);\r\n    }\r\n    public static disposeRecycledItems() {\r\n        Mat4.Recycle.length = 0;\r\n    }\r\n    // private  constructor()\r\n    // {\r\n    //     super(16);\r\n    //     this[0] = 1;\r\n    //     // this[1] = 0;\r\n    //     // this[2] = 0;\r\n    //     // this[3] = 0;\r\n    //     // this[4] = 0;\r\n    //     this[5] = 1;\r\n    //     // this[6] = 0;\r\n    //     // this[7] = 0;\r\n    //     // this[8] = 0;\r\n    //     // this[9] = 0;\r\n    //     this[10] = 1;\r\n    //     // this[11] = 0;\r\n    //     // this[12] = 0;\r\n    //     // this[13] = 0;\r\n    //     // this[14] = 0;\r\n    //     this[15] = 1;\r\n    // }\r\n\r\n    /**\r\n     * Copy the values from one mat4 to another\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param src the source matrix\r\n     * @returns out\r\n     */\r\n    public static copy(src: Mat4, out: Mat4): Mat4 {\r\n        out[0] = src[0];\r\n        out[1] = src[1];\r\n        out[2] = src[2];\r\n        out[3] = src[3];\r\n        out[4] = src[4];\r\n        out[5] = src[5];\r\n        out[6] = src[6];\r\n        out[7] = src[7];\r\n        out[8] = src[8];\r\n        out[9] = src[9];\r\n        out[10] = src[10];\r\n        out[11] = src[11];\r\n        out[12] = src[12];\r\n        out[13] = src[13];\r\n        out[14] = src[14];\r\n        out[15] = src[15];\r\n        return out;\r\n    }\r\n    static Identity = Mat4.create();\r\n    /**\r\n     * Set a mat4 to the identity matrix\r\n     *\r\n     * @param out the receiving matrix\r\n     * @returns out\r\n     */\r\n    public static identity(out: Mat4): Mat4 {\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = 1;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 1;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Transpose the values of a mat4\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the source matrix\r\n     * @returns out\r\n     */\r\n    public static transpose(a: Mat4, out: Mat4): Mat4 {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1],\r\n                a02 = a[2],\r\n                a03 = a[3];\r\n            let a12 = a[6],\r\n                a13 = a[7];\r\n            let a23 = a[11];\r\n\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Inverts a mat4\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the source matrix\r\n     * @returns out\r\n     */\r\n    public static invert(a: Mat4, out: Mat4): Mat4 | null {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7];\r\n        let a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11];\r\n        let a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the adjugate of a mat4\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the source matrix\r\n     * @returns out\r\n     */\r\n    public static adjoint(a: Mat4, out: Mat4): Mat4 {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7];\r\n        let a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11];\r\n        let a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n        out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n        out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n        out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n        out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n        out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n        out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n        out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n        out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n        out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n        out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n        out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n        out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n        out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n        out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n        out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the determinant of a mat4\r\n     *\r\n     * @param a the source matrix\r\n     * @returns determinant of a\r\n     */\r\n    public static determinant(a: Mat4): number {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7];\r\n        let a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11];\r\n        let a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n    }\r\n\r\n    /**\r\n     * Multiplies two mat4's\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param lhs the first operand\r\n     * @param rhs the second operand\r\n     * @returns out\r\n     */\r\n    public static multiply(lhs: Mat4, rhs: Mat4, out: Mat4): Mat4 {\r\n        let a00 = lhs[0],\r\n            a01 = lhs[1],\r\n            a02 = lhs[2],\r\n            a03 = lhs[3];\r\n        let a10 = lhs[4],\r\n            a11 = lhs[5],\r\n            a12 = lhs[6],\r\n            a13 = lhs[7];\r\n        let a20 = lhs[8],\r\n            a21 = lhs[9],\r\n            a22 = lhs[10],\r\n            a23 = lhs[11];\r\n        let a30 = lhs[12],\r\n            a31 = lhs[13],\r\n            a32 = lhs[14],\r\n            a33 = lhs[15];\r\n\r\n        // Cache only the current line of the second matrix\r\n        let b0 = rhs[0],\r\n            b1 = rhs[1],\r\n            b2 = rhs[2],\r\n            b3 = rhs[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = rhs[4];\r\n        b1 = rhs[5];\r\n        b2 = rhs[6];\r\n        b3 = rhs[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = rhs[8];\r\n        b1 = rhs[9];\r\n        b2 = rhs[10];\r\n        b3 = rhs[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = rhs[12];\r\n        b1 = rhs[13];\r\n        b2 = rhs[14];\r\n        b3 = rhs[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Translate a mat4 by the given vector\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the matrix to translate\r\n     * @param v vector to translate by\r\n     * @returns out\r\n     */\r\n    public static translate(a: Mat4, v: Vec3, out: Mat4): Mat4 {\r\n        let x = v[0],\r\n            y = v[1],\r\n            z = v[2];\r\n        let a00: number = void 0,\r\n            a01: number = void 0,\r\n            a02: number = void 0,\r\n            a03: number = void 0;\r\n        let a10: number = void 0,\r\n            a11: number = void 0,\r\n            a12: number = void 0,\r\n            a13: number = void 0;\r\n        let a20: number = void 0,\r\n            a21: number = void 0,\r\n            a22: number = void 0,\r\n            a23: number = void 0;\r\n\r\n        if (a === out) {\r\n            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n        } else {\r\n            a00 = a[0];\r\n            a01 = a[1];\r\n            a02 = a[2];\r\n            a03 = a[3];\r\n            a10 = a[4];\r\n            a11 = a[5];\r\n            a12 = a[6];\r\n            a13 = a[7];\r\n            a20 = a[8];\r\n            a21 = a[9];\r\n            a22 = a[10];\r\n            a23 = a[11];\r\n\r\n            out[0] = a00;\r\n            out[1] = a01;\r\n            out[2] = a02;\r\n            out[3] = a03;\r\n            out[4] = a10;\r\n            out[5] = a11;\r\n            out[6] = a12;\r\n            out[7] = a13;\r\n            out[8] = a20;\r\n            out[9] = a21;\r\n            out[10] = a22;\r\n            out[11] = a23;\r\n\r\n            out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n            out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n            out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n            out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Scales the mat4 by the dimensions in the given Vec3\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the matrix to scale\r\n     * @param v the Vec3 to scale the matrix by\r\n     * @returns out\r\n     **/\r\n    public static scale(a: Mat4, v: Vec3, out: Mat4): Mat4 {\r\n        let x = v[0],\r\n            y = v[1],\r\n            z = v[2];\r\n\r\n        out[0] = a[0] * x;\r\n        out[1] = a[1] * x;\r\n        out[2] = a[2] * x;\r\n        out[3] = a[3] * x;\r\n        out[4] = a[4] * y;\r\n        out[5] = a[5] * y;\r\n        out[6] = a[6] * y;\r\n        out[7] = a[7] * y;\r\n        out[8] = a[8] * z;\r\n        out[9] = a[9] * z;\r\n        out[10] = a[10] * z;\r\n        out[11] = a[11] * z;\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a mat4 by the given angle\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the matrix to rotate\r\n     * @param rad the angle to rotate the matrix by\r\n     * @param axis the axis to rotate around\r\n     * @returns out\r\n     */\r\n    public static rotate(a: Mat4, rad: number, axis: Vec3, out: Mat4): Mat4 {\r\n        let x = axis[0],\r\n            y = axis[1],\r\n            z = axis[2];\r\n        let len = Math.sqrt(x * x + y * y + z * z);\r\n        let s: number = void 0,\r\n            c: number = void 0,\r\n            t: number = void 0;\r\n        let a00: number = void 0,\r\n            a01: number = void 0,\r\n            a02: number = void 0,\r\n            a03: number = void 0;\r\n        let a10: number = void 0,\r\n            a11: number = void 0,\r\n            a12: number = void 0,\r\n            a13: number = void 0;\r\n        let a20: number = void 0,\r\n            a21: number = void 0,\r\n            a22: number = void 0,\r\n            a23: number = void 0;\r\n        let b00: number = void 0,\r\n            b01: number = void 0,\r\n            b02: number = void 0;\r\n        let b10: number = void 0,\r\n            b11: number = void 0,\r\n            b12: number = void 0;\r\n        let b20: number = void 0,\r\n            b21: number = void 0,\r\n            b22: number = void 0;\r\n\r\n        if (Math.abs(len) < 0.000001) {\r\n            return null;\r\n        }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = a[0];\r\n        a01 = a[1];\r\n        a02 = a[2];\r\n        a03 = a[3];\r\n        a10 = a[4];\r\n        a11 = a[5];\r\n        a12 = a[6];\r\n        a13 = a[7];\r\n        a20 = a[8];\r\n        a21 = a[9];\r\n        a22 = a[10];\r\n        a23 = a[11];\r\n\r\n        // Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c;\r\n        b01 = y * x * t + z * s;\r\n        b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s;\r\n        b11 = y * y * t + c;\r\n        b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s;\r\n        b21 = y * z * t - x * s;\r\n        b22 = z * z * t + c;\r\n\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n        if (a !== out) {\r\n            // If the source and destination differ, copy the unchanged last row\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a matrix by the given angle around the X axis\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the matrix to rotate\r\n     * @param rad the angle to rotate the matrix by\r\n     * @returns out\r\n     */\r\n    public static rotateX(a: Mat4, rad: number, out: Mat4): Mat4 {\r\n        let s = Math.sin(rad);\r\n        let c = Math.cos(rad);\r\n        let a10 = a[4];\r\n        let a11 = a[5];\r\n        let a12 = a[6];\r\n        let a13 = a[7];\r\n        let a20 = a[8];\r\n        let a21 = a[9];\r\n        let a22 = a[10];\r\n        let a23 = a[11];\r\n\r\n        if (a !== out) {\r\n            // If the source and destination differ, copy the unchanged rows\r\n            out[0] = a[0];\r\n            out[1] = a[1];\r\n            out[2] = a[2];\r\n            out[3] = a[3];\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a matrix by the given angle around the Y axis\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the matrix to rotate\r\n     * @param rad the angle to rotate the matrix by\r\n     * @returns out\r\n     */\r\n    public static rotateY(a: Mat4, rad: number, out: Mat4): Mat4 {\r\n        let s = Math.sin(rad);\r\n        let c = Math.cos(rad);\r\n        let a00 = a[0];\r\n        let a01 = a[1];\r\n        let a02 = a[2];\r\n        let a03 = a[3];\r\n        let a20 = a[8];\r\n        let a21 = a[9];\r\n        let a22 = a[10];\r\n        let a23 = a[11];\r\n\r\n        if (a !== out) {\r\n            // If the source and destination differ, copy the unchanged rows\r\n            out[4] = a[4];\r\n            out[5] = a[5];\r\n            out[6] = a[6];\r\n            out[7] = a[7];\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a matrix by the given angle around the Z axis\r\n     *\r\n     * @param out the receiving matrix\r\n     * @param a the matrix to rotate\r\n     * @param rad the angle to rotate the matrix by\r\n     * @returns out\r\n     */\r\n    public static rotateZ(a: Mat4, rad: number, out: Mat4): Mat4 {\r\n        let s = Math.sin(rad);\r\n        let c = Math.cos(rad);\r\n        let a00 = a[0];\r\n        let a01 = a[1];\r\n        let a02 = a[2];\r\n        let a03 = a[3];\r\n        let a10 = a[4];\r\n        let a11 = a[5];\r\n        let a12 = a[6];\r\n        let a13 = a[7];\r\n\r\n        if (a !== out) {\r\n            // If the source and destination differ, copy the unchanged last row\r\n            out[8] = a[8];\r\n            out[9] = a[9];\r\n            out[10] = a[10];\r\n            out[11] = a[11];\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from a vector translation\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.translate(dest, dest, vec);\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {Vec3} v Translation vector\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromTranslation(v: Vec3, out: Mat4): Mat4 {\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = 1;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 1;\r\n        out[11] = 0;\r\n        out[12] = v[0];\r\n        out[13] = v[1];\r\n        out[14] = v[2];\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from a vector scaling\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.scale(dest, dest, vec);\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {Vec3} v Scaling vector\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromScaling(v: Vec3, out: Mat4): Mat4 {\r\n        out[0] = v[0];\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = v[1];\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = v[2];\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from a given angle around a given axis\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotate(dest, dest, rad, axis);\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {number} rad the angle to rotate the matrix by\r\n     * @param {Vec3} axis the axis to rotate around\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromRotation(rad: number, axis: Vec3, out: Mat4): Mat4 {\r\n        let x = axis[0],\r\n            y = axis[1],\r\n            z = axis[2];\r\n        let len = Math.sqrt(x * x + y * y + z * z);\r\n        let s: number = void 0,\r\n            c: number = void 0,\r\n            t: number = void 0;\r\n\r\n        if (Math.abs(len) < 0.000001) {\r\n            return null;\r\n        }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = x * x * t + c;\r\n        out[1] = y * x * t + z * s;\r\n        out[2] = z * x * t - y * s;\r\n        out[3] = 0;\r\n        out[4] = x * y * t - z * s;\r\n        out[5] = y * y * t + c;\r\n        out[6] = z * y * t + x * s;\r\n        out[7] = 0;\r\n        out[8] = x * z * t + y * s;\r\n        out[9] = y * z * t - x * s;\r\n        out[10] = z * z * t + c;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from the given angle around the X axis\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotateX(dest, dest, rad);\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {number} rad the angle to rotate the matrix by\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromXRotation(rad: number, out: Mat4): Mat4 {\r\n        let s = Math.sin(rad);\r\n        let c = Math.cos(rad);\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = c;\r\n        out[6] = s;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = -s;\r\n        out[10] = c;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from the given angle around the Y axis\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotateY(dest, dest, rad);\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {number} rad the angle to rotate the matrix by\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromYRotation(rad: number, out: Mat4): Mat4 {\r\n        let s = Math.sin(rad);\r\n        let c = Math.cos(rad);\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[0] = c;\r\n        out[1] = 0;\r\n        out[2] = -s;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = 1;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = s;\r\n        out[9] = 0;\r\n        out[10] = c;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from the given angle around the Z axis\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotateZ(dest, dest, rad);\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {number} rad the angle to rotate the matrix by\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromZRotation(rad: number, out: Mat4): Mat4 {\r\n        let s = Math.sin(rad);\r\n        let c = Math.cos(rad);\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[0] = c;\r\n        out[1] = s;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = -s;\r\n        out[5] = c;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 1;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns the translation vector component of a transformation\r\n     *  matrix. If a matrix is built with fromRotationTranslation,\r\n     *  the returned vector will be the same as the translation vector\r\n     *  originally supplied.\r\n     * @param  {Vec3} out Vector to receive translation component\r\n     * @param  {Mat4} mat Matrix to be decomposed (input)\r\n     * @return {Vec3} out\r\n     */\r\n    public static getTranslationing(mat: Mat4, out: Vec3): Vec3 {\r\n        out[0] = mat[12];\r\n        out[1] = mat[13];\r\n        out[2] = mat[14];\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns the scaling factor component of a transformation matrix.\r\n     * If a matrix is built with fromRotationTranslationScale with a\r\n     * normalized Quaternion parameter, the returned vector will be\r\n     * the same as the scaling vector originally supplied.\r\n     * @param {Vec3} out Vector to receive scaling factor component\r\n     * @param {Mat4} mat Matrix to be decomposed (input)\r\n     * @return {Vec3} out\r\n     */\r\n    public static getScaling(mat: Mat4, out: Vec3): Vec3 {\r\n        let m11 = mat[0];\r\n        let m12 = mat[1];\r\n        let m13 = mat[2];\r\n        let m21 = mat[4];\r\n        let m22 = mat[5];\r\n        let m23 = mat[6];\r\n        let m31 = mat[8];\r\n        let m32 = mat[9];\r\n        let m33 = mat[10];\r\n\r\n        out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n        out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n        out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns a Quaternion representing the rotational component\r\n     *  of a transformation matrix. If a matrix is built with\r\n     *  fromRotationTranslation, the returned Quaternion will be the\r\n     *  same as the Quaternion originally supplied.\r\n     * @param {Quat} out Quaternion to receive the rotation component\r\n     * @param {Mat4} mat Matrix to be decomposed (input)\r\n     * @return {Quat} out\r\n     */\r\n    public static getRotation(mat: Mat4, out: Quat): Quat {\r\n        // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n        let trace = mat[0] + mat[5] + mat[10];\r\n        let S = 0;\r\n\r\n        if (trace > 0) {\r\n            S = Math.sqrt(trace + 1.0) * 2;\r\n            out[3] = 0.25 * S;\r\n            out[0] = (mat[6] - mat[9]) / S;\r\n            out[1] = (mat[8] - mat[2]) / S;\r\n            out[2] = (mat[1] - mat[4]) / S;\r\n        } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n            S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n            out[3] = (mat[6] - mat[9]) / S;\r\n            out[0] = 0.25 * S;\r\n            out[1] = (mat[1] + mat[4]) / S;\r\n            out[2] = (mat[8] + mat[2]) / S;\r\n        } else if (mat[5] > mat[10]) {\r\n            S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n            out[3] = (mat[8] - mat[2]) / S;\r\n            out[0] = (mat[1] + mat[4]) / S;\r\n            out[1] = 0.25 * S;\r\n            out[2] = (mat[6] + mat[9]) / S;\r\n        } else {\r\n            S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n            out[3] = (mat[1] - mat[4]) / S;\r\n            out[0] = (mat[8] + mat[2]) / S;\r\n            out[1] = (mat[6] + mat[9]) / S;\r\n            out[2] = 0.25 * S;\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from a Quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.translate(dest, vec);\r\n     *     mat4.translate(dest, origin);\r\n     *     let QuatMat = mat4.create();\r\n     *     Quat4.toMat4(Quat, QuatMat);\r\n     *     mat4.multiply(dest, QuatMat);\r\n     *     mat4.scale(dest, scale)\r\n     *     mat4.translate(dest, negativeOrigin);\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {Quat} q Rotation Quaternion\r\n     * @param {Vec3} v Translation vector\r\n     * @param {Vec3} s Scaling vector\r\n     * @param {Vec3} o The origin vector around which to scale and rotate\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromRotationTranslationScaleOrigin(q: Quat, v: Vec3, s: Vec3, o: Vec3, out: Mat4): Mat4 {\r\n        // Quaternion math\r\n        let x = q[0],\r\n            y = q[1],\r\n            z = q[2],\r\n            w = q[3];\r\n        let x2 = x + x;\r\n        let y2 = y + y;\r\n        let z2 = z + z;\r\n\r\n        let xx = x * x2;\r\n        let xy = x * y2;\r\n        let xz = x * z2;\r\n        let yy = y * y2;\r\n        let yz = y * z2;\r\n        let zz = z * z2;\r\n        let wx = w * x2;\r\n        let wy = w * y2;\r\n        let wz = w * z2;\r\n\r\n        let sx = s[0];\r\n        let sy = s[1];\r\n        let sz = s[2];\r\n\r\n        let ox = o[0];\r\n        let oy = o[1];\r\n        let oz = o[2];\r\n\r\n        out[0] = (1 - (yy + zz)) * sx;\r\n        out[1] = (xy + wz) * sx;\r\n        out[2] = (xz - wy) * sx;\r\n        out[3] = 0;\r\n        out[4] = (xy - wz) * sy;\r\n        out[5] = (1 - (xx + zz)) * sy;\r\n        out[6] = (yz + wx) * sy;\r\n        out[7] = 0;\r\n        out[8] = (xz + wy) * sz;\r\n        out[9] = (yz - wx) * sz;\r\n        out[10] = (1 - (xx + yy)) * sz;\r\n        out[11] = 0;\r\n        out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\r\n        out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\r\n        out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\r\n        out[15] = 1;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates a 4x4 matrix from the given Quaternion\r\n     *\r\n     * @param {Mat4} out mat4 receiving operation result\r\n     * @param {Quat} q Quaternion to create matrix from\r\n     *\r\n     * @returns {Mat4} out\r\n     */\r\n    public static fromQuat(q: Quat, out: Mat4): Mat4 {\r\n        let x = q[0],\r\n            y = q[1],\r\n            z = q[2],\r\n            w = q[3];\r\n        let x2 = x + x;\r\n        let y2 = y + y;\r\n        let z2 = z + z;\r\n\r\n        let xx = x * x2;\r\n        let yx = y * x2;\r\n        let yy = y * y2;\r\n        let zx = z * x2;\r\n        let zy = z * y2;\r\n        let zz = z * z2;\r\n        let wx = w * x2;\r\n        let wy = w * y2;\r\n        let wz = w * z2;\r\n\r\n        out[0] = 1 - yy - zz;\r\n        out[1] = yx + wz;\r\n        out[2] = zx - wy;\r\n        out[3] = 0;\r\n\r\n        out[4] = yx - wz;\r\n        out[5] = 1 - xx - zz;\r\n        out[6] = zy + wx;\r\n        out[7] = 0;\r\n\r\n        out[8] = zx + wy;\r\n        out[9] = zy - wx;\r\n        out[10] = 1 - xx - yy;\r\n        out[11] = 0;\r\n\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Generates a frustum matrix with the given bounds\r\n     *\r\n     * @param out mat4 frustum matrix will be written into\r\n     * @param left Left bound of the frustum\r\n     * @param right Right bound of the frustum\r\n     * @param bottom Bottom bound of the frustum\r\n     * @param top Top bound of the frustum\r\n     * @param near Near bound of the frustum\r\n     * @param far Far bound of the frustum\r\n     * @returns out\r\n     */\r\n    public static frustum(\r\n        left: number,\r\n        right: number,\r\n        bottom: number,\r\n        top: number,\r\n        near: number,\r\n        far: number,\r\n        out: Mat4,\r\n    ): Mat4 {\r\n        let rl = 1 / (right - left);\r\n        let tb = 1 / (top - bottom);\r\n        let nf = 1 / (near - far);\r\n        out[0] = near * 2 * rl;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = near * 2 * tb;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = (right + left) * rl;\r\n        out[9] = (top + bottom) * tb;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = far * near * 2 * nf;\r\n        out[15] = 0;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Generates a look-at matrix with the given eye position, focal point, and up axis\r\n     *\r\n     * @param out mat4 frustum matrix will be written into\r\n     * @param eye Position of the viewer\r\n     * @param center Point the viewer is looking at\r\n     * @param up Vec3 pointing up\r\n     * @returns out\r\n     */\r\n    public static lookAt(eye: Vec3, center: Vec3, up: Vec3, out: Mat4): Mat4 {\r\n        let x0: number = void 0,\r\n            x1: number = void 0,\r\n            x2: number = void 0,\r\n            y0: number = void 0,\r\n            y1: number = void 0,\r\n            y2: number = void 0,\r\n            z0: number = void 0,\r\n            z1: number = void 0,\r\n            z2: number = void 0,\r\n            len: number = void 0;\r\n        let eyex = eye[0];\r\n        let eyey = eye[1];\r\n        let eyez = eye[2];\r\n        let upx = up[0];\r\n        let upy = up[1];\r\n        let upz = up[2];\r\n        let centerx = center[0];\r\n        let centery = center[1];\r\n        let centerz = center[2];\r\n\r\n        if (\r\n            Math.abs(eyex - centerx) < 0.000001 &&\r\n            Math.abs(eyey - centery) < 0.000001 &&\r\n            Math.abs(eyez - centerz) < 0.000001\r\n        ) {\r\n            return Mat4.identity(out);\r\n        }\r\n\r\n        z0 = eyex - centerx;\r\n        z1 = eyey - centery;\r\n        z2 = eyez - centerz;\r\n\r\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n        z0 *= len;\r\n        z1 *= len;\r\n        z2 *= len;\r\n\r\n        x0 = upy * z2 - upz * z1;\r\n        x1 = upz * z0 - upx * z2;\r\n        x2 = upx * z1 - upy * z0;\r\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n        if (!len) {\r\n            x0 = 0;\r\n            x1 = 0;\r\n            x2 = 0;\r\n        } else {\r\n            len = 1 / len;\r\n            x0 *= len;\r\n            x1 *= len;\r\n            x2 *= len;\r\n        }\r\n\r\n        y0 = z1 * x2 - z2 * x1;\r\n        y1 = z2 * x0 - z0 * x2;\r\n        y2 = z0 * x1 - z1 * x0;\r\n\r\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n        if (!len) {\r\n            y0 = 0;\r\n            y1 = 0;\r\n            y2 = 0;\r\n        } else {\r\n            len = 1 / len;\r\n            y0 *= len;\r\n            y1 *= len;\r\n            y2 *= len;\r\n        }\r\n\r\n        out[0] = x0;\r\n        out[1] = y0;\r\n        out[2] = z0;\r\n        out[3] = 0;\r\n        out[4] = x1;\r\n        out[5] = y1;\r\n        out[6] = z1;\r\n        out[7] = 0;\r\n        out[8] = x2;\r\n        out[9] = y2;\r\n        out[10] = z2;\r\n        out[11] = 0;\r\n        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n        out[15] = 1;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Generates a matrix that makes something look at something else.\r\n     *\r\n     * @param {Mat4} out mat4 frustum matrix will be written into\r\n     * @param {Vec3} eye Position of the viewer\r\n     * @param {Vec3} center Point the viewer is looking at\r\n     * @param {Vec3} up Vec3 pointing up\r\n     * @returns {Mat4} out\r\n     */\r\n    public static targetTo(eye: Vec3, target: Vec3, up: Vec3, out: Vec4) {\r\n        let eyex = eye[0],\r\n            eyey = eye[1],\r\n            eyez = eye[2],\r\n            upx = up[0],\r\n            upy = up[1],\r\n            upz = up[2];\r\n\r\n        let z0 = eyex - target[0],\r\n            z1 = eyey - target[1],\r\n            z2 = eyez - target[2];\r\n\r\n        let len = z0 * z0 + z1 * z1 + z2 * z2;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n            z0 *= len;\r\n            z1 *= len;\r\n            z2 *= len;\r\n        }\r\n\r\n        let x0 = upy * z2 - upz * z1,\r\n            x1 = upz * z0 - upx * z2,\r\n            x2 = upx * z1 - upy * z0;\r\n\r\n        out[0] = x0;\r\n        out[1] = x1;\r\n        out[2] = x2;\r\n        out[3] = 0;\r\n        out[4] = z1 * x2 - z2 * x1;\r\n        out[5] = z2 * x0 - z0 * x2;\r\n        out[6] = z0 * x1 - z1 * x0;\r\n        out[7] = 0;\r\n        out[8] = z0;\r\n        out[9] = z1;\r\n        out[10] = z2;\r\n        out[11] = 0;\r\n        out[12] = eyex;\r\n        out[13] = eyey;\r\n        out[14] = eyez;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of a mat4\r\n     *\r\n     * @param mat matrix to represent as a string\r\n     * @returns string representation of the matrix\r\n     */\r\n    public static str(a: Mat4): string {\r\n        return (\r\n            \"mat4(\" +\r\n            a[0] +\r\n            \", \" +\r\n            a[1] +\r\n            \", \" +\r\n            a[2] +\r\n            \", \" +\r\n            a[3] +\r\n            \", \" +\r\n            a[4] +\r\n            \", \" +\r\n            a[5] +\r\n            \", \" +\r\n            a[6] +\r\n            \", \" +\r\n            a[7] +\r\n            \", \" +\r\n            a[8] +\r\n            \", \" +\r\n            a[9] +\r\n            \", \" +\r\n            a[10] +\r\n            \", \" +\r\n            a[11] +\r\n            \", \" +\r\n            a[12] +\r\n            \", \" +\r\n            a[13] +\r\n            \", \" +\r\n            a[14] +\r\n            \", \" +\r\n            a[15] +\r\n            \")\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns Frobenius norm of a mat4\r\n     *\r\n     * @param a the matrix to calculate Frobenius norm of\r\n     * @returns Frobenius norm\r\n     */\r\n    public static frob(a: Mat4): number {\r\n        return Math.sqrt(\r\n            Math.pow(a[0], 2) +\r\n                Math.pow(a[1], 2) +\r\n                Math.pow(a[2], 2) +\r\n                Math.pow(a[3], 2) +\r\n                Math.pow(a[4], 2) +\r\n                Math.pow(a[5], 2) +\r\n                Math.pow(a[6], 2) +\r\n                Math.pow(a[7], 2) +\r\n                Math.pow(a[8], 2) +\r\n                Math.pow(a[9], 2) +\r\n                Math.pow(a[10], 2) +\r\n                Math.pow(a[11], 2) +\r\n                Math.pow(a[12], 2) +\r\n                Math.pow(a[13], 2) +\r\n                Math.pow(a[14], 2) +\r\n                Math.pow(a[15], 2),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds two mat4's\r\n     *\r\n     * @param {Mat4} out the receiving matrix\r\n     * @param {Mat4} a the first operand\r\n     * @param {Mat4} b the second operand\r\n     * @returns {Mat4} out\r\n     */\r\n    public static add(a: Mat4, b: Mat4, out: Mat4): Mat4 {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + b[1];\r\n        out[2] = a[2] + b[2];\r\n        out[3] = a[3] + b[3];\r\n        out[4] = a[4] + b[4];\r\n        out[5] = a[5] + b[5];\r\n        out[6] = a[6] + b[6];\r\n        out[7] = a[7] + b[7];\r\n        out[8] = a[8] + b[8];\r\n        out[9] = a[9] + b[9];\r\n        out[10] = a[10] + b[10];\r\n        out[11] = a[11] + b[11];\r\n        out[12] = a[12] + b[12];\r\n        out[13] = a[13] + b[13];\r\n        out[14] = a[14] + b[14];\r\n        out[15] = a[15] + b[15];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Subtracts matrix b from matrix a\r\n     *\r\n     * @param {Mat4} out the receiving matrix\r\n     * @param {Mat4} lhs the first operand\r\n     * @param {Mat4} rhs the second operand\r\n     * @returns {Mat4} out\r\n     */\r\n    public static subtract(lhs: Mat4, rhs: Mat4, out: Mat4): Mat4 {\r\n        out[0] = lhs[0] - rhs[0];\r\n        out[1] = lhs[1] - rhs[1];\r\n        out[2] = lhs[2] - rhs[2];\r\n        out[3] = lhs[3] - rhs[3];\r\n        out[4] = lhs[4] - rhs[4];\r\n        out[5] = lhs[5] - rhs[5];\r\n        out[6] = lhs[6] - rhs[6];\r\n        out[7] = lhs[7] - rhs[7];\r\n        out[8] = lhs[8] - rhs[8];\r\n        out[9] = lhs[9] - rhs[9];\r\n        out[10] = lhs[10] - rhs[10];\r\n        out[11] = lhs[11] - rhs[11];\r\n        out[12] = lhs[12] - rhs[12];\r\n        out[13] = lhs[13] - rhs[13];\r\n        out[14] = lhs[14] - rhs[14];\r\n        out[15] = lhs[15] - rhs[15];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Subtracts matrix b from matrix a\r\n     *\r\n     * @param {Mat4} out the receiving matrix\r\n     * @param {Mat4} a the first operand\r\n     * @param {Mat4} b the second operand\r\n     * @returns {Mat4} out\r\n     */\r\n    //public static sub(out: mat4, a: mat4, b: mat4): mat4;\r\n\r\n    /**\r\n     * Multiply each element of the matrix by a scalar.\r\n     *\r\n     * @param {Mat4} out the receiving matrix\r\n     * @param {Mat4} a the matrix to scale\r\n     * @param {number} b amount to scale the matrix's elements by\r\n     * @returns {Mat4} out\r\n     */\r\n    public static multiplyScalar(a: Mat4, b: number, out: Mat4): Mat4 {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n        out[3] = a[3] * b;\r\n        out[4] = a[4] * b;\r\n        out[5] = a[5] * b;\r\n        out[6] = a[6] * b;\r\n        out[7] = a[7] * b;\r\n        out[8] = a[8] * b;\r\n        out[9] = a[9] * b;\r\n        out[10] = a[10] * b;\r\n        out[11] = a[11] * b;\r\n        out[12] = a[12] * b;\r\n        out[13] = a[13] * b;\r\n        out[14] = a[14] * b;\r\n        out[15] = a[15] * b;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n     *\r\n     * @param {Mat4} out the receiving vector\r\n     * @param {Mat4} a the first operand\r\n     * @param {Mat4} b the second operand\r\n     * @param {number} scale the amount to scale b's elements by before adding\r\n     * @returns {Mat4} out\r\n     */\r\n    public static multiplyScalarAndAdd(a: Mat4, b: Mat4, scale: number, out: Mat4): Mat4 {\r\n        out[0] = a[0] + b[0] * scale;\r\n        out[1] = a[1] + b[1] * scale;\r\n        out[2] = a[2] + b[2] * scale;\r\n        out[3] = a[3] + b[3] * scale;\r\n        out[4] = a[4] + b[4] * scale;\r\n        out[5] = a[5] + b[5] * scale;\r\n        out[6] = a[6] + b[6] * scale;\r\n        out[7] = a[7] + b[7] * scale;\r\n        out[8] = a[8] + b[8] * scale;\r\n        out[9] = a[9] + b[9] * scale;\r\n        out[10] = a[10] + b[10] * scale;\r\n        out[11] = a[11] + b[11] * scale;\r\n        out[12] = a[12] + b[12] * scale;\r\n        out[13] = a[13] + b[13] * scale;\r\n        out[14] = a[14] + b[14] * scale;\r\n        out[15] = a[15] + b[15] * scale;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n     *\r\n     * @param {Mat4} a The first matrix.\r\n     * @param {Mat4} b The second matrix.\r\n     * @returns {boolean} True if the matrices are equal, false otherwise.\r\n     */\r\n    public static exactEquals(a: Mat4, b: Mat4): boolean {\r\n        return (\r\n            a[0] === b[0] &&\r\n            a[1] === b[1] &&\r\n            a[2] === b[2] &&\r\n            a[3] === b[3] &&\r\n            a[4] === b[4] &&\r\n            a[5] === b[5] &&\r\n            a[6] === b[6] &&\r\n            a[7] === b[7] &&\r\n            a[8] === b[8] &&\r\n            a[9] === b[9] &&\r\n            a[10] === b[10] &&\r\n            a[11] === b[11] &&\r\n            a[12] === b[12] &&\r\n            a[13] === b[13] &&\r\n            a[14] === b[14] &&\r\n            a[15] === b[15]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the matrices have approximately the same elements in the same position.\r\n     *\r\n     * @param {Mat4} a The first matrix.\r\n     * @param {Mat4} b The second matrix.\r\n     * @returns {boolean} True if the matrices are equal, false otherwise.\r\n     */\r\n    public static equals(a: Mat4, b: Mat4): boolean {\r\n        let a0 = a[0],\r\n            a1 = a[1],\r\n            a2 = a[2],\r\n            a3 = a[3];\r\n        let a4 = a[4],\r\n            a5 = a[5],\r\n            a6 = a[6],\r\n            a7 = a[7];\r\n        let a8 = a[8],\r\n            a9 = a[9],\r\n            a10 = a[10],\r\n            a11 = a[11];\r\n        let a12 = a[12],\r\n            a13 = a[13],\r\n            a14 = a[14],\r\n            a15 = a[15];\r\n\r\n        let b0 = b[0],\r\n            b1 = b[1],\r\n            b2 = b[2],\r\n            b3 = b[3];\r\n        let b4 = b[4],\r\n            b5 = b[5],\r\n            b6 = b[6],\r\n            b7 = b[7];\r\n        let b8 = b[8],\r\n            b9 = b[9],\r\n            b10 = b[10],\r\n            b11 = b[11];\r\n        let b12 = b[12],\r\n            b13 = b[13],\r\n            b14 = b[14],\r\n            b15 = b[15];\r\n\r\n        return (\r\n            Math.abs(a0 - b0) <= EPSILON &&\r\n            Math.abs(a1 - b1) <= EPSILON &&\r\n            Math.abs(a2 - b2) <= EPSILON &&\r\n            Math.abs(a3 - b3) <= EPSILON &&\r\n            Math.abs(a4 - b4) <= EPSILON &&\r\n            Math.abs(a5 - b5) <= EPSILON &&\r\n            Math.abs(a6 - b6) <= EPSILON &&\r\n            Math.abs(a7 - b7) <= EPSILON &&\r\n            Math.abs(a8 - b8) <= EPSILON &&\r\n            Math.abs(a9 - b9) <= EPSILON &&\r\n            Math.abs(a10 - b10) <= EPSILON &&\r\n            Math.abs(a11 - b11) <= EPSILON &&\r\n            Math.abs(a12 - b12) <= EPSILON &&\r\n            Math.abs(a13 - b13) <= EPSILON &&\r\n            Math.abs(a14 - b14) <= EPSILON &&\r\n            Math.abs(a15 - b15) <= EPSILON\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 变换顶点\r\n     * Transforms the point with a mat4.\r\n     * 4th vector component is implicitly '1'\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the vector to transform\r\n     * @param m matrix to transform with\r\n     * @returns out\r\n     */\r\n    static transformPoint(vector: Vec3, mat: Mat4, out: Vec3): Vec3 {\r\n        let x = vector[0],\r\n            y = vector[1],\r\n            z = vector[2];\r\n        let w = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];\r\n        w = w || 1.0;\r\n        out[0] = (mat[0] * x + mat[4] * y + mat[8] * z + mat[12]) / w;\r\n        out[1] = (mat[1] * x + mat[5] * y + mat[9] * z + mat[13]) / w;\r\n        out[2] = (mat[2] * x + mat[6] * y + mat[10] * z + mat[14]) / w;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * 变换向量\r\n     * Transforms the Vec3 with a mat4.\r\n     * 4th vector component is implicitly '1'\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the vector to transform\r\n     * @param m matrix to transform with\r\n     * @returns out\r\n     */\r\n    static transformVector3(vector: Vec3, mat: Mat4, out: Vec3): Vec3 {\r\n        let x = vector[0],\r\n            y = vector[1],\r\n            z = vector[2];\r\n        out[0] = mat[0] * x + mat[4] * y + mat[8] * z;\r\n        out[1] = mat[1] * x + mat[5] * y + mat[9] * z;\r\n        out[2] = mat[2] * x + mat[6] * y + mat[10] * z;\r\n        return out;\r\n    }\r\n\r\n    // /**\r\n    //  * Generates a perspective projection matrix with the given bounds\r\n    //  *\r\n    //  * @param out mat4 frustum matrix will be written into\r\n    //  * @param fovy Vertical field of view in radians\r\n    //  * @param aspect Aspect rat typically viewport width/height\r\n    //  * @param near Near bound of the frustum\r\n    //  * @param far Far bound of the frustum\r\n    //  * @returns out\r\n    //  */\r\n    public static projectPerspectiveLH(fovy: number, aspect: number, near: number, far: number, out: Mat4): Mat4 {\r\n        let f = 1.0 / Math.tan(fovy / 2);\r\n        let nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 2 * far * near * nf;\r\n        out[15] = 0;\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates a perspective projection matrix with the given bounds\r\n     * @param fov 上下夹角\r\n     * @param aspect 左右夹角\r\n     * @param znear 近视点距离\r\n     * @param zfar 远视点距离\r\n     * @returns {Mat4} out\r\n     */\r\n    // static project_PerspectiveLH(fov: number, aspect: number, znear: number, zfar: number, out: mat4)\r\n    // {\r\n    //     let tan = 1.0 / (Math.tan(fov * 0.5));\r\n    //     let nf=zfar / (znear - zfar);\r\n    //     out[0] = tan / aspect;\r\n    //     out[1] = out[2] = out[3] =out[4]=0;\r\n    //     out[5] = tan;\r\n    //     out[6] = out[7] = out[8] = out[9]=0;\r\n    //     out[10] = -nf;\r\n    //     out[11] = 1.0;\r\n    //     out[12] = out[13] = out[15] = 0.0;\r\n    //     out[14] = znear * nf;\r\n    // }\r\n    // /**\r\n    //  * Generates a orthogonal projection matrix with the given bounds\r\n    //  *\r\n    //  * @param out mat4 frustum matrix will be written into\r\n    //  * @param left Left bound of the frustum\r\n    //  * @param right Right bound of the frustum\r\n    //  * @param bottom Bottom bound of the frustum\r\n    //  * @param top Top bound of the frustum\r\n    //  * @param near Near bound of the frustum\r\n    //  * @param far Far bound of the frustum\r\n    //  * @returns out\r\n    //  */\r\n    // public static ortho(out: mat4, left: number, right: number,\r\n    //     bottom: number, top: number, near: number, far: number): mat4{\r\n    //         let lr = 1 / (left - right);\r\n    //         let bt = 1 / (bottom - top);\r\n    //         let nf = 1 / (near - far);\r\n    //         out[0] = -2 * lr;\r\n    //         out[1] = 0;\r\n    //         out[2] = 0;\r\n    //         out[3] = 0;\r\n    //         out[4] = 0;\r\n    //         out[5] = -2 * bt;\r\n    //         out[6] = 0;\r\n    //         out[7] = 0;\r\n    //         out[8] = 0;\r\n    //         out[9] = 0;\r\n    //         out[10] = 2 * nf;\r\n    //         out[11] = 0;\r\n    //         out[12] = (left + right) * lr;\r\n    //         out[13] = (top + bottom) * bt;\r\n    //         out[14] = (far + near) * nf;\r\n    //         out[15] = 1;\r\n    //         return out;\r\n    //       }\r\n    public static projectOrthoLH(width: number, height: number, near: number, far: number, out: Mat4): Mat4 {\r\n        let lr = -1 / width;\r\n        let bt = -1 / height;\r\n        let nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates a orthogonal projection matrix with the given bounds\r\n     * @param width 宽\r\n     * @param height 高\r\n     * @param znear 近视点\r\n     * @param zfar 远视点\r\n     * @param out\r\n     */\r\n    // static project_OrthoLH(width: number, height: number, znear: number, zfar: number, out: mat4)\r\n    // {\r\n    //     let hw = 2.0 / width;\r\n    //     let hh = 2.0 / height;\r\n    //     let id = 1.0 / (zfar - znear);\r\n    //     let nid = znear / (znear - zfar);\r\n    //     out[0]=hw;\r\n    //     out[5]=hh;\r\n    //     out[10]=id;\r\n    //     out[11]=nid;\r\n    //     out[15]=1;\r\n    //     out[1]=out[2]=out[3]=out[4]=out[6]=out[7]=out[8]=out[8]=out[12]=out[13]=out[14]=0;\r\n    // }\r\n\r\n    /** ----------copy glmatrix\r\n     * Creates a matrix from a Quaternion rotation, vector translation and vector scale\r\n     *  This is equivalent to (but much faster than):\r\n     * mat4.identity(dest);\r\n     * mat4.translate(dest, vec);\r\n     * let QuatMat = mat4.create();\r\n     * Quat4.toMat4(Quat, QuatMat);\r\n     * mat4.multiply(dest, QuatMat);\r\n     * mat4.scale(dest, scale)\r\n     *\r\n     * @param pos Translation vector\r\n     * @param scale Scaling vector\r\n     * @param rot Rotation Quaternion\r\n     * @param out\r\n     */\r\n    static RTS(pos: Vec3, scale: Vec3, rot: Quat, out: Mat4): Mat4 {\r\n        let x = rot[0],\r\n            y = rot[1],\r\n            z = rot[2],\r\n            w = rot[3];\r\n        let x2 = x + x;\r\n        let y2 = y + y;\r\n        let z2 = z + z;\r\n\r\n        let xx = x * x2;\r\n        let xy = x * y2;\r\n        let xz = x * z2;\r\n        let yy = y * y2;\r\n        let yz = y * z2;\r\n        let zz = z * z2;\r\n        let wx = w * x2;\r\n        let wy = w * y2;\r\n        let wz = w * z2;\r\n        let sx = scale[0];\r\n        let sy = scale[1];\r\n        let sz = scale[2];\r\n\r\n        out[0] = (1 - (yy + zz)) * sx;\r\n        out[1] = (xy + wz) * sx;\r\n        out[2] = (xz - wy) * sx;\r\n        out[3] = 0;\r\n        out[4] = (xy - wz) * sy;\r\n        out[5] = (1 - (xx + zz)) * sy;\r\n        out[6] = (yz + wx) * sy;\r\n        out[7] = 0;\r\n        out[8] = (xz + wy) * sz;\r\n        out[9] = (yz - wx) * sz;\r\n        out[10] = (1 - (xx + yy)) * sz;\r\n        out[11] = 0;\r\n        out[12] = pos[0];\r\n        out[13] = pos[1];\r\n        out[14] = pos[2];\r\n        out[15] = 1;\r\n\r\n        return out;\r\n    }\r\n    /**----copy glmatrix\r\n     * Creates a matrix from a Quaternion rotation and vector translation\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.translate(dest, vec);\r\n     *     let QuatMat = mat4.create();\r\n     *     Quat4.toMat4(Quat, QuatMat);\r\n     *     mat4.multiply(dest, QuatMat);\r\n     *\r\n     * @param out mat4 receiving operation result\r\n     * @param q Rotation Quaternion\r\n     * @param v Translation vector\r\n     * @returns out\r\n     */\r\n    public static RT(q: Quat, v: Vec3, out: Mat4): Mat4 {\r\n        // Quaternion math\r\n        let x = q[0],\r\n            y = q[1],\r\n            z = q[2],\r\n            w = q[3];\r\n        let x2 = x + x;\r\n        let y2 = y + y;\r\n        let z2 = z + z;\r\n\r\n        let xx = x * x2;\r\n        let xy = x * y2;\r\n        let xz = x * z2;\r\n        let yy = y * y2;\r\n        let yz = y * z2;\r\n        let zz = z * z2;\r\n        let wx = w * x2;\r\n        let wy = w * y2;\r\n        let wz = w * z2;\r\n\r\n        out[0] = 1 - (yy + zz);\r\n        out[1] = xy + wz;\r\n        out[2] = xz - wy;\r\n        out[3] = 0;\r\n        out[4] = xy - wz;\r\n        out[5] = 1 - (xx + zz);\r\n        out[6] = yz + wx;\r\n        out[7] = 0;\r\n        out[8] = xz + wy;\r\n        out[9] = yz - wx;\r\n        out[10] = 1 - (xx + yy);\r\n        out[11] = 0;\r\n        out[12] = v[0];\r\n        out[13] = v[1];\r\n        out[14] = v[2];\r\n        out[15] = 1;\r\n\r\n        return out;\r\n    }\r\n    /**use glmatrix separate function\r\n     * Returns the translation、scale、rotation  component  of a transformation\r\n     *\r\n     * @param src\r\n     * @param scale\r\n     * @param rotation\r\n     * @param translation\r\n     */\r\n    static decompose(src: Mat4, scale: Vec3, rotation: Quat, translation: Vec3) {\r\n        Mat4.getTranslationing(src, translation);\r\n        Mat4.getScaling(src, scale);\r\n        Mat4.getRotationing(src, rotation, scale);\r\n    }\r\n\r\n    /**\r\n     * get normalize Quaternion with the given rotation matrix values\r\n     * @param matrix defines the source matrix\r\n     * @param result defines the target Quaternion\r\n     */\r\n    public static getRotationing(matrix: Mat4, result: Quat, scale: Vec3 = null) {\r\n        let scalex = 1,\r\n            scaley = 1,\r\n            scalez = 1;\r\n        if (scale == null) {\r\n            scalex = Math.sqrt(matrix[0] * matrix[0] + matrix[1] * matrix[1] + matrix[2] * matrix[2]);\r\n            scaley = Math.sqrt(matrix[4] * matrix[4] + matrix[5] * matrix[5] + matrix[6] * matrix[6]);\r\n            scalez = Math.sqrt(matrix[8] * matrix[8] + matrix[9] * matrix[9] + matrix[10] * matrix[10]);\r\n        } else {\r\n            scalex = scale[0];\r\n            scaley = scale[1];\r\n            scalez = scale[2];\r\n        }\r\n        if (scale.x === 0 || scale.y === 0 || scale.z === 0) {\r\n            result[0] = 0;\r\n            result[1] = 0;\r\n            result[2] = 0;\r\n            result[3] = 1;\r\n            return;\r\n        }\r\n        // var data = matrix.m;\r\n        let m11 = matrix[0] / scalex,\r\n            m12 = matrix[4] / scaley,\r\n            m13 = matrix[8] / scalez;\r\n        let m21 = matrix[1] / scalex,\r\n            m22 = matrix[5] / scaley,\r\n            m23 = matrix[9] / scalez;\r\n        let m31 = matrix[2] / scalex,\r\n            m32 = matrix[6] / scaley,\r\n            m33 = matrix[10] / scalez;\r\n        let trace = m11 + m22 + m33;\r\n        let s;\r\n\r\n        if (trace > 0) {\r\n            s = 0.5 / Math.sqrt(trace + 1.0);\r\n\r\n            result[3] = 0.25 / s;\r\n            result[0] = (m32 - m23) * s;\r\n            result[1] = (m13 - m31) * s;\r\n            result[2] = (m21 - m12) * s;\r\n        } else if (m11 > m22 && m11 > m33) {\r\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n\r\n            result[3] = (m32 - m23) / s;\r\n            result[0] = 0.25 * s;\r\n            result[1] = (m12 + m21) / s;\r\n            result[2] = (m13 + m31) / s;\r\n        } else if (m22 > m33) {\r\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n\r\n            result[3] = (m13 - m31) / s;\r\n            result[0] = (m12 + m21) / s;\r\n            result[1] = 0.25 * s;\r\n            result[2] = (m23 + m32) / s;\r\n        } else {\r\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n\r\n            result[3] = (m21 - m12) / s;\r\n            result[0] = (m13 + m31) / s;\r\n            result[1] = (m23 + m32) / s;\r\n            result[2] = 0.25 * s;\r\n        }\r\n    }\r\n}\r\n","import { RenderLayerEnum } from \"../ec/ec\";\r\nimport { Camera } from \"../ec/components/camera\";\r\nimport { Vec3 } from \"../mathD/vec3\";\r\nimport { Mat4 } from \"../mathD/mat4\";\r\nimport { Irenderable } from \"../scene/frameState\";\r\n\r\n/**\r\n * @private\r\n */\r\nexport class RenderList {\r\n    private layerLists: { [layer: number]: RenderContainer } = {};\r\n    constructor(camera: Camera) {\r\n        this.layerLists[RenderLayerEnum.Background] = new RenderContainer(\"Background\");\r\n        this.layerLists[RenderLayerEnum.Geometry] = new RenderContainer(\"Geometry\");\r\n        this.layerLists[RenderLayerEnum.AlphaTest] = new RenderContainer(\"AlphaTest\");\r\n        this.layerLists[RenderLayerEnum.Transparent] = new RenderContainer(\"Transparent\", (arr: Irenderable[]) => {\r\n            arr.sort((a, b) => {\r\n                let aRenderQueue = a.material.layer + a.material.queue;\r\n                let bRenderQueue = b.material.layer + b.material.queue;\r\n                if (aRenderQueue != bRenderQueue) {\r\n                    return aRenderQueue - bRenderQueue;\r\n                } else {\r\n                    let viewmat = camera.ViewMatrix;\r\n                    let aWorldPos = Mat4.getTranslationing(a.modelMatrix, Vec3.create());\r\n                    let bWorldPos = Mat4.getTranslationing(b.modelMatrix, Vec3.create());\r\n\r\n                    let aView = Mat4.transformPoint(aWorldPos, viewmat, Vec3.create());\r\n                    let bView = Mat4.transformPoint(bWorldPos, viewmat, Vec3.create());\r\n                    let out = aView[2] - bView[2];\r\n\r\n                    Vec3.recycle(aWorldPos);\r\n                    Vec3.recycle(bWorldPos);\r\n                    Vec3.recycle(aView);\r\n                    Vec3.recycle(bView);\r\n                    return out;\r\n                }\r\n            });\r\n            return arr;\r\n        });\r\n        this.layerLists[RenderLayerEnum.Overlay] = new RenderContainer(\"Overlay\");\r\n    }\r\n    clear() {\r\n        for (let key in this.layerLists) {\r\n            this.layerLists[key].clear();\r\n        }\r\n    }\r\n    addRenderer(renderer: Irenderable) {\r\n        this.layerLists[renderer.material.layer].addRender(renderer);\r\n    }\r\n\r\n    sort() {\r\n        for (const key in this.layerLists) {\r\n            this.layerLists[key].sort();\r\n        }\r\n        return this;\r\n    }\r\n    foreach(func: (value: Irenderable) => void) {\r\n        this.layerLists[RenderLayerEnum.Background].foreach(func);\r\n        this.layerLists[RenderLayerEnum.Geometry].foreach(func);\r\n        this.layerLists[RenderLayerEnum.AlphaTest].foreach(func);\r\n        this.layerLists[RenderLayerEnum.Transparent].foreach(func);\r\n        this.layerLists[RenderLayerEnum.Overlay].foreach(func);\r\n    }\r\n}\r\n\r\nexport class RenderContainer {\r\n    private layer: string;\r\n\r\n    private renderArr: Irenderable[] = [];\r\n\r\n    addRender(render: Irenderable) {\r\n        this.renderArr.push(render);\r\n    }\r\n\r\n    constructor(layerType: string, queueSortFunc: (arr: Irenderable[]) => Irenderable[] = null) {\r\n        this.layer = layerType;\r\n        this._queueSortFunc = queueSortFunc || RenderContainer.defaultSortFunc;\r\n    }\r\n    private _queueSortFunc: (arr: Irenderable[]) => Irenderable[];\r\n\r\n    sort() {\r\n        this.renderArr = this._queueSortFunc(this.renderArr);\r\n        return this;\r\n    }\r\n    foreach(fuc: (value: Irenderable) => void) {\r\n        for (let i = 0; i < this.renderArr.length; i++) {\r\n            fuc(this.renderArr[i]);\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.renderArr.length = 0;\r\n    }\r\n\r\n    private static defaultSortFunc = (arr: Irenderable[]) => {\r\n        arr.sort((a, b) => {\r\n            let aRenderQueue = a.material.layer + a.material.queue;\r\n            let bRenderQueue = b.material.layer + b.material.queue;\r\n            if (aRenderQueue != bRenderQueue) {\r\n                return aRenderQueue - bRenderQueue;\r\n            } else {\r\n                return a.material.guid - b.material.guid;\r\n            }\r\n        });\r\n        return arr;\r\n    };\r\n}\r\n\r\n/**\r\n * 按照Geometry-》AlphaTest-》Background-》Transparent-》Overlay的顺序进行渲染\r\n * 非透明物体/透明物体都要按照queue排序\r\n * 非透明物体暂时没发现需要按照距离排序（近到远）\r\n * 透明物体按照距离排序（远到近）\r\n */\r\n","import { clamp, EPSILON } from \"./common\";\r\n\r\nexport class Color extends Float32Array {\r\n    static readonly WHITE: Color = new Color(1, 1, 1, 1);\r\n\r\n    get r() {\r\n        return this[0];\r\n    }\r\n    set r(value: number) {\r\n        this[0] = value;\r\n    }\r\n\r\n    get g() {\r\n        return this[1];\r\n    }\r\n    set g(value: number) {\r\n        this[1] = value;\r\n    }\r\n\r\n    get b() {\r\n        return this[2];\r\n    }\r\n    set b(value: number) {\r\n        this[2] = value;\r\n    }\r\n\r\n    get a() {\r\n        return this[3];\r\n    }\r\n    set a(value: number) {\r\n        this[3] = value;\r\n    }\r\n    private static Recycle: Color[] = [];\r\n    public static create(r: number = 1, g: number = 1, b: number = 1, a: number = 1): Color {\r\n        if (Color.Recycle && Color.Recycle.length > 0) {\r\n            let item = Color.Recycle.pop() as Color;\r\n            item[0] = r;\r\n            item[1] = g;\r\n            item[2] = b;\r\n            item[3] = a;\r\n            return item;\r\n        } else {\r\n            let item = new Color(r, g, b, a);\r\n            return item;\r\n        }\r\n    }\r\n    public static clone(from: Color): Color {\r\n        if (Color.Recycle.length > 0) {\r\n            let item = Color.Recycle.pop() as Color;\r\n            Color.copy(from, item);\r\n            return item;\r\n        } else {\r\n            let item = new Color(from[0], from[1], from[2], from[3]);\r\n            return item;\r\n        }\r\n    }\r\n    public static recycle(item: Color) {\r\n        Color.Recycle.push(item);\r\n    }\r\n    public static disposeRecycledItems() {\r\n        Color.Recycle.length = 0;\r\n    }\r\n    private constructor(r: number = 1, g: number, b: number = 1, a: number = 1) {\r\n        super(4);\r\n        this[0] = r;\r\n        this[1] = g;\r\n        this[2] = b;\r\n        this[3] = a;\r\n    }\r\n    static setWhite(out: Color): Color {\r\n        out[0] = 1;\r\n        out[1] = 1;\r\n        out[2] = 1;\r\n        out[3] = 1;\r\n        return out;\r\n    }\r\n    static setBlack(out: Color) {\r\n        out[0] = 0;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 1;\r\n    }\r\n    static setGray(out: Color) {\r\n        out[0] = 0.5;\r\n        out[1] = 0.5;\r\n        out[2] = 0.5;\r\n        out[3] = 1;\r\n    }\r\n\r\n    static multiply(srca: Color, srcb: Color, out: Color) {\r\n        out[0] = srca[0] * srcb[0];\r\n        out[1] = srca[1] * srcb[1];\r\n        out[2] = srca[2] * srcb[2];\r\n        out[3] = srca[3] * srcb[3];\r\n    }\r\n\r\n    static scaleToRef(src: Color, scale: number, out: Color) {\r\n        out[0] = src[0] * scale;\r\n        out[1] = src[1] * scale;\r\n        out[2] = src[2] * scale;\r\n        out[3] = src[3] * scale;\r\n    }\r\n\r\n    static lerp(srca: Color, srcb: Color, t: number, out: Color) {\r\n        t = clamp(t);\r\n        out[0] = t * (srcb[0] - srca[0]) + srca[0];\r\n        out[1] = t * (srcb[1] - srca[1]) + srca[1];\r\n        out[2] = t * (srcb[2] - srca[2]) + srca[2];\r\n        out[3] = t * (srcb[3] - srca[3]) + srca[3];\r\n    }\r\n    /**\r\n     * Copy the values from one color to another\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the source vector\r\n     * @returns out\r\n     */\r\n    public static copy(a: Color, out: Color): Color {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the vectors have approximately the same elements in the same color.\r\n     *\r\n     * @param {vec4} a The first vector.\r\n     * @param {vec4} b The second vector.\r\n     * @returns {boolean} True if the vectors are equal, false otherwise.\r\n     */\r\n    public static equals(a: Color, b: Color): boolean {\r\n        let a0 = a[0],\r\n            a1 = a[1],\r\n            a2 = a[2],\r\n            a3 = a[3];\r\n        let b0 = b[0],\r\n            b1 = b[1],\r\n            b2 = b[2],\r\n            b3 = b[3];\r\n        return (\r\n            Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n            Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n            Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n            Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\r\n        );\r\n    }\r\n}\r\n","/**\r\n *\r\n * (0,0)-----|\r\n * |         |\r\n * |         |\r\n * |------(w,h)\r\n *\r\n */\r\nexport class GameScreen {\r\n    /**\r\n     * 绘制区域宽/高度 像素单位\r\n     */\r\n    private static canvaswidth: number;\r\n    private static canvasheight: number;\r\n    private static apset: number;\r\n\r\n    /**\r\n     * 屏幕(canvas)高度\r\n     */\r\n    static get Height() {\r\n        return GameScreen.canvasheight;\r\n    }\r\n    /**\r\n     * 屏幕(canvas)宽度\r\n     */\r\n    static get Width() {\r\n        return GameScreen.canvaswidth;\r\n    }\r\n\r\n    private static _windowWidth: number;\r\n    private static _windowHeight: number;\r\n\r\n    /**\r\n     * 窗口宽度,一般用于html\r\n     */\r\n    static get windowWidth() {\r\n        return this._windowWidth;\r\n    }\r\n    /**\r\n     * 窗口高度,一般用于html\r\n     */\r\n    static get windowHeight() {\r\n        return this._windowHeight;\r\n    }\r\n    /**\r\n     * width/height\r\n     */\r\n    static get aspect() {\r\n        return this.apset;\r\n    }\r\n    //#region canvas resize\r\n    private static scale: number = 1;\r\n    /**\r\n     * 修改canvas 缩放\r\n     * 可提升画面效果，消除闪烁(最好用mipmap解决)\r\n     * @param scale\r\n     */\r\n    static SetCanvasSize(scale: number) {\r\n        GameScreen.scale = scale;\r\n        this.OnResizeCanvas();\r\n    }\r\n\r\n    private static canvas: HTMLCanvasElement;\r\n    static divcontiner: HTMLDivElement;\r\n    static init(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n        this.OnResizeCanvas();\r\n        window.onresize = () => {\r\n            this.OnResizeCanvas();\r\n        };\r\n\r\n        let divcontiner = document.createElement(\"div\");\r\n        divcontiner.className = \"divContiner\";\r\n        divcontiner.style.overflow = \"hidden\";\r\n        divcontiner.style.left = \"0px\";\r\n        divcontiner.style.top = \"0px\";\r\n        canvas.parentElement.appendChild(divcontiner);\r\n        this.divcontiner = divcontiner;\r\n    }\r\n    private static OnResizeCanvas() {\r\n        console.warn(\"canvas resize!\");\r\n        this._windowWidth = window.innerWidth;\r\n        this._windowHeight = window.innerHeight;\r\n\r\n        let pixelRatio = window.devicePixelRatio || 1;\r\n        this.canvaswidth = pixelRatio * this.scale * this._windowWidth;\r\n        this.canvasheight = pixelRatio * this.scale * this._windowHeight;\r\n\r\n        this.canvas.width = this.canvaswidth;\r\n        this.canvas.height = this.canvasheight;\r\n\r\n        this.apset = this.canvaswidth / this.canvasheight;\r\n        for (let i = 0; i < this.resizeListenerArr.length; i++) {\r\n            let fuc = this.resizeListenerArr[i];\r\n            fuc();\r\n        }\r\n    }\r\n    private static resizeListenerArr: Function[] = [];\r\n    static addListenertoCanvasResize(fuc: () => void) {\r\n        this.resizeListenerArr.push(fuc);\r\n    }\r\n\r\n    // static windowToCanvas(windowx:number,windowy:number,screenPos:MathD.vec2)\r\n    // {\r\n    //     let bbox = this.canvas.getBoundingClientRect();\r\n    //     screenPos.x=windowx- bbox.left - (bbox.width - this.canvas.width) / 2;\r\n    //     screenPos.y=windowy- bbox.top - (bbox.height - this.canvas.height) / 2;\r\n    // }\r\n}\r\n","import { Icomponent, Ientity, CullingMask } from \"../ec\";\r\nimport { Rect } from \"../../mathD/rect\";\r\nimport { Color } from \"../../mathD/color\";\r\nimport { IframeState } from \"../../scene/frameState\";\r\nimport { Mat4 } from \"../../mathD/mat4\";\r\nimport { Transform } from \"./transform\";\r\nimport { GameScreen } from \"../../gameScreen\";\r\n\r\nexport enum ProjectionEnum {\r\n    PERSPECTIVE,\r\n    ORTHOGRAPH,\r\n}\r\n\r\nexport enum ClearEnum {\r\n    COLOR = 0b001,\r\n    DEPTH = 0b010,\r\n    STENCIL = 0b100,\r\n}\r\n\r\nexport class Camera implements Icomponent {\r\n    entity: Ientity;\r\n    projectionType: ProjectionEnum = ProjectionEnum.PERSPECTIVE;\r\n    //perspective 透视投影\r\n    fov: number = Math.PI * 0.25; //透视投影的fov//verticle field of view\r\n\r\n    /**\r\n     * height\r\n     */\r\n    size: number = 2;\r\n\r\n    private _near: number = 0.01;\r\n    get near(): number {\r\n        return this._near;\r\n    }\r\n    set near(val: number) {\r\n        if (this.projectionType == ProjectionEnum.PERSPECTIVE && val < 0.01) {\r\n            val = 0.01;\r\n        }\r\n        if (val >= this.far) val = this.far - 0.01;\r\n        this._near = val;\r\n    }\r\n    private _far: number = 1000;\r\n    get far(): number {\r\n        return this._far;\r\n    }\r\n    set far(val: number) {\r\n        if (val <= this.near) val = this.near + 0.01;\r\n        this._far = val;\r\n    }\r\n    viewport: Rect = Rect.create(0, 0, 1, 1);\r\n    clearFlag: ClearEnum = ClearEnum.COLOR | ClearEnum.DEPTH;\r\n    backgroundColor: Color = Color.create(0.3, 0.3, 0.3, 1);\r\n    dePthValue: number = 1.0;\r\n    stencilValue: number = 0;\r\n\r\n    priority: number = 0;\r\n    cullingMask: CullingMask = CullingMask.default;\r\n    update(frameState: IframeState): void {\r\n        frameState.cameraList.push(this);\r\n    }\r\n\r\n    private _viewMatrix: Mat4 = Mat4.create();\r\n    get ViewMatrix(): Mat4 {\r\n        if (this.needComputeViewMat) {\r\n            let camworld = (this.entity.getCompByName(\"Transform\") as Transform).worldMatrix;\r\n            //视矩阵刚好是摄像机世界矩阵的逆\r\n            Mat4.invert(camworld, this._viewMatrix);\r\n            this.needComputeViewMat = false;\r\n        }\r\n        return this._viewMatrix;\r\n    }\r\n    /**\r\n     * 计算相机投影矩阵\r\n     */\r\n    private _Projectmatrix: Mat4 = Mat4.create();\r\n    get ProjectMatrix(): Mat4 {\r\n        if (this.needcomputeProjectMat) {\r\n            if (this.projectionType == ProjectionEnum.PERSPECTIVE) {\r\n                Mat4.projectPerspectiveLH(this.fov, GameScreen.aspect, this.near, this.far, this._Projectmatrix);\r\n            } else {\r\n                Mat4.projectOrthoLH(this.size * GameScreen.aspect, this.size, this.near, this.far, this._Projectmatrix);\r\n            }\r\n            this.needcomputeProjectMat = false;\r\n        }\r\n        return this._Projectmatrix;\r\n    }\r\n    // private ohMat:Mat4=Mat4.create();\r\n    // getOrthoLH_ProjectMatrix():Mat4\r\n    // {\r\n    //     Mat4.project_OrthoLH(this.PixelHeight * GameScreen.aspect, this.PixelHeight, this.near, this.far, this.ohMat);\r\n    //     return this.ohMat;\r\n    // }\r\n    private _viewProjectMatrix: Mat4 = Mat4.create();\r\n    get ViewProjectMatrix(): Mat4 {\r\n        if (this.needcomputeViewProjectMat) {\r\n            Mat4.multiply(this.ProjectMatrix, this.ViewMatrix, this._viewProjectMatrix);\r\n            this.needcomputeViewProjectMat = false;\r\n        }\r\n        return this._viewProjectMatrix;\r\n    }\r\n\r\n    private restToDirty() {\r\n        this.needComputeViewMat = true;\r\n        this.needcomputeProjectMat = true;\r\n        this.needcomputeViewProjectMat = true;\r\n    }\r\n    private needComputeViewMat: boolean = true;\r\n    private needcomputeProjectMat: boolean = true;\r\n    private needcomputeViewProjectMat: boolean = true;\r\n\r\n    dispose(): void {}\r\n}\r\n","import { Mat4 } from \"./mat4\";\r\nimport { Vec2 } from \"./vec2\";\r\nimport { Mat2d } from \"./mat2d\";\r\nimport { EPSILON } from \"./common\";\r\nimport { Quat } from \"./quat\";\r\n\r\nexport class Mat3 extends Float32Array {\r\n    private static Recycle: Mat3[] = [];\r\n    public static create(): Mat3 {\r\n        if (Mat3.Recycle && Mat3.Recycle.length > 0) {\r\n            let item = Mat3.Recycle.pop();\r\n            Mat3.identity(item);\r\n            return item;\r\n        } else {\r\n            let item = new Float32Array(9);\r\n            item[0] = 1;\r\n            item[4] = 1;\r\n            item[8] = 1;\r\n            return item;\r\n        }\r\n    }\r\n    public static clone(from: Mat3): Mat3 {\r\n        if (Mat3.Recycle.length > 0) {\r\n            let item = Mat3.Recycle.pop();\r\n            Mat3.copy(from, item);\r\n            return item;\r\n        } else {\r\n            let out = new Float32Array(9);\r\n            out[0] = from[0];\r\n            out[1] = from[1];\r\n            out[2] = from[2];\r\n            out[3] = from[3];\r\n            out[4] = from[4];\r\n            out[5] = from[5];\r\n            out[6] = from[6];\r\n            out[7] = from[7];\r\n            out[8] = from[8];\r\n            return out;\r\n        }\r\n    }\r\n    public static recycle(item: Mat3) {\r\n        Mat3.Recycle.push(item);\r\n    }\r\n    public static disposeRecycledItems() {\r\n        Mat3.Recycle.length = 0;\r\n    }\r\n    // public constructor()\r\n    // {\r\n    //     super(9);\r\n    //     this[0]=1;\r\n    //     this[4]=1;\r\n    //     this[8]=1;\r\n    // }\r\n\r\n    /**\r\n     * Copies the upper-left 3x3 values into the given mat3.\r\n     *\r\n     * @param {Mat3} out the receiving 3x3 matrix\r\n     * @param {mat4} a   the source 4x4 matrix\r\n     * @returns {Mat3} out\r\n     */\r\n    public static fromMat4(a: Mat4, out: Mat3) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[4];\r\n        out[4] = a[5];\r\n        out[5] = a[6];\r\n        out[6] = a[8];\r\n        out[7] = a[9];\r\n        out[8] = a[10];\r\n        return out;\r\n    }\r\n    /**\r\n     * Copy the values from one mat3 to another\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the source matrix\r\n     * @returns {Mat3} out\r\n     */\r\n    public static copy(a: Mat3, out: Mat3) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Set a mat3 to the identity matrix\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @returns {Mat3} out\r\n     */\r\n    public static identity(out: Mat3) {\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 1;\r\n        out[5] = 0;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Transpose the values of a mat3\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the source matrix\r\n     * @returns {Mat3} out\r\n     */\r\n    public static transpose(a: Mat3, out: Mat3) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1],\r\n                a02 = a[2],\r\n                a12 = a[5];\r\n            out[1] = a[3];\r\n            out[2] = a[6];\r\n            out[3] = a01;\r\n            out[5] = a[7];\r\n            out[6] = a02;\r\n            out[7] = a12;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[3];\r\n            out[2] = a[6];\r\n            out[3] = a[1];\r\n            out[4] = a[4];\r\n            out[5] = a[7];\r\n            out[6] = a[2];\r\n            out[7] = a[5];\r\n            out[8] = a[8];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Inverts a mat3\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the source matrix\r\n     * @returns {Mat3} out\r\n     */\r\n    public static invert(a: Mat3, out: Mat3) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2];\r\n        let a10 = a[3],\r\n            a11 = a[4],\r\n            a12 = a[5];\r\n        let a20 = a[6],\r\n            a21 = a[7],\r\n            a22 = a[8];\r\n\r\n        let b01 = a22 * a11 - a12 * a21;\r\n        let b11 = -a22 * a10 + a12 * a20;\r\n        let b21 = a21 * a10 - a11 * a20;\r\n\r\n        // Calculate the determinant\r\n        let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = b01 * det;\r\n        out[1] = (-a22 * a01 + a02 * a21) * det;\r\n        out[2] = (a12 * a01 - a02 * a11) * det;\r\n        out[3] = b11 * det;\r\n        out[4] = (a22 * a00 - a02 * a20) * det;\r\n        out[5] = (-a12 * a00 + a02 * a10) * det;\r\n        out[6] = b21 * det;\r\n        out[7] = (-a21 * a00 + a01 * a20) * det;\r\n        out[8] = (a11 * a00 - a01 * a10) * det;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the adjugate of a mat3\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the source matrix\r\n     * @returns {Mat3} out\r\n     */\r\n    public static adjoint(a: Mat3, out: Mat3) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2];\r\n        let a10 = a[3],\r\n            a11 = a[4],\r\n            a12 = a[5];\r\n        let a20 = a[6],\r\n            a21 = a[7],\r\n            a22 = a[8];\r\n\r\n        out[0] = a11 * a22 - a12 * a21;\r\n        out[1] = a02 * a21 - a01 * a22;\r\n        out[2] = a01 * a12 - a02 * a11;\r\n        out[3] = a12 * a20 - a10 * a22;\r\n        out[4] = a00 * a22 - a02 * a20;\r\n        out[5] = a02 * a10 - a00 * a12;\r\n        out[6] = a10 * a21 - a11 * a20;\r\n        out[7] = a01 * a20 - a00 * a21;\r\n        out[8] = a00 * a11 - a01 * a10;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the determinant of a mat3\r\n     *\r\n     * @param {Mat3} a the source matrix\r\n     * @returns {Number} determinant of a\r\n     */\r\n    public static determinant(a: Mat3) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2];\r\n        let a10 = a[3],\r\n            a11 = a[4],\r\n            a12 = a[5];\r\n        let a20 = a[6],\r\n            a21 = a[7],\r\n            a22 = a[8];\r\n\r\n        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two mat3's\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the first operand\r\n     * @param {Mat3} b the second operand\r\n     * @returns {Mat3} out\r\n     */\r\n    public static multiply(a: Mat3, b: Mat3, out: Mat3) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2];\r\n        let a10 = a[3],\r\n            a11 = a[4],\r\n            a12 = a[5];\r\n        let a20 = a[6],\r\n            a21 = a[7],\r\n            a22 = a[8];\r\n\r\n        let b00 = b[0],\r\n            b01 = b[1],\r\n            b02 = b[2];\r\n        let b10 = b[3],\r\n            b11 = b[4],\r\n            b12 = b[5];\r\n        let b20 = b[6],\r\n            b21 = b[7],\r\n            b22 = b[8];\r\n\r\n        out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n        out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n        out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n        out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n        out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n        out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n        out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n        out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n        out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Translate a mat3 by the given vector\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the matrix to translate\r\n     * @param {vec2} v vector to translate by\r\n     * @returns {Mat3} out\r\n     */\r\n    public static translate(a: Mat3, v: Mat3, out: Mat3) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a10 = a[3],\r\n            a11 = a[4],\r\n            a12 = a[5],\r\n            a20 = a[6],\r\n            a21 = a[7],\r\n            a22 = a[8],\r\n            x = v[0],\r\n            y = v[1];\r\n\r\n        out[0] = a00;\r\n        out[1] = a01;\r\n        out[2] = a02;\r\n\r\n        out[3] = a10;\r\n        out[4] = a11;\r\n        out[5] = a12;\r\n\r\n        out[6] = x * a00 + y * a10 + a20;\r\n        out[7] = x * a01 + y * a11 + a21;\r\n        out[8] = x * a02 + y * a12 + a22;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a mat3 by the given angle\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the matrix to rotate\r\n     * @param {Number} rad the angle to rotate the matrix by\r\n     * @returns {Mat3} out\r\n     */\r\n    public static rotate(a: Mat3, rad: number, out: Mat3) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a10 = a[3],\r\n            a11 = a[4],\r\n            a12 = a[5],\r\n            a20 = a[6],\r\n            a21 = a[7],\r\n            a22 = a[8],\r\n            s = Math.sin(rad),\r\n            c = Math.cos(rad);\r\n\r\n        out[0] = c * a00 + s * a10;\r\n        out[1] = c * a01 + s * a11;\r\n        out[2] = c * a02 + s * a12;\r\n\r\n        out[3] = c * a10 - s * a00;\r\n        out[4] = c * a11 - s * a01;\r\n        out[5] = c * a12 - s * a02;\r\n\r\n        out[6] = a20;\r\n        out[7] = a21;\r\n        out[8] = a22;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Scales the mat3 by the dimensions in the given vec2\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the matrix to rotate\r\n     * @param {vec2} v the vec2 to scale the matrix by\r\n     * @returns {Mat3} out\r\n     **/\r\n    public static scale(a: Mat3, v: Vec2, out: Mat3) {\r\n        let x = v[0],\r\n            y = v[1];\r\n\r\n        out[0] = x * a[0];\r\n        out[1] = x * a[1];\r\n        out[2] = x * a[2];\r\n\r\n        out[3] = y * a[3];\r\n        out[4] = y * a[4];\r\n        out[5] = y * a[5];\r\n\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from a vector translation\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat3.identity(dest);\r\n     *     mat3.translate(dest, dest, vec);\r\n     *\r\n     * @param {Mat3} out mat3 receiving operation result\r\n     * @param {vec2} v Translation vector\r\n     * @returns {Mat3} out\r\n     */\r\n    public static fromTranslation(v: Vec2, out: Mat3) {\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 1;\r\n        out[5] = 0;\r\n        out[6] = v[0];\r\n        out[7] = v[1];\r\n        out[8] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from a given angle\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat3.identity(dest);\r\n     *     mat3.rotate(dest, dest, rad);\r\n     *\r\n     * @param {Mat3} out mat3 receiving operation result\r\n     * @param {Number} rad the angle to rotate the matrix by\r\n     * @returns {Mat3} out\r\n     */\r\n    public static fromRotation(rad: number, out: Mat3) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad);\r\n\r\n        out[0] = c;\r\n        out[1] = s;\r\n        out[2] = 0;\r\n\r\n        out[3] = -s;\r\n        out[4] = c;\r\n        out[5] = 0;\r\n\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a matrix from a vector scaling\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat3.identity(dest);\r\n     *     mat3.scale(dest, dest, vec);\r\n     *\r\n     * @param {Mat3} out mat3 receiving operation result\r\n     * @param {vec2} v Scaling vector\r\n     * @returns {Mat3} out\r\n     */\r\n    public static fromScaling(v: Vec2, out: Mat3) {\r\n        out[0] = v[0];\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n\r\n        out[3] = 0;\r\n        out[4] = v[1];\r\n        out[5] = 0;\r\n\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Copies the values from a mat2d into a mat3\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {mat2d} a the matrix to copy\r\n     * @returns {Mat3} out\r\n     **/\r\n    public static fromMat2d(a: Mat2d, out: Mat3) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = 0;\r\n\r\n        out[3] = a[2];\r\n        out[4] = a[3];\r\n        out[5] = 0;\r\n\r\n        out[6] = a[4];\r\n        out[7] = a[5];\r\n        out[8] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates a 3x3 matrix from the given quaternion\r\n     *\r\n     * @param {Mat3} out mat3 receiving operation result\r\n     * @param {quat} q Quaternion to create matrix from\r\n     *\r\n     * @returns {Mat3} out\r\n     */\r\n    public static fromQuat(q: Quat, out: Mat3) {\r\n        let x = q[0],\r\n            y = q[1],\r\n            z = q[2],\r\n            w = q[3];\r\n        let x2 = x + x;\r\n        let y2 = y + y;\r\n        let z2 = z + z;\r\n\r\n        let xx = x * x2;\r\n        let yx = y * x2;\r\n        let yy = y * y2;\r\n        let zx = z * x2;\r\n        let zy = z * y2;\r\n        let zz = z * z2;\r\n        let wx = w * x2;\r\n        let wy = w * y2;\r\n        let wz = w * z2;\r\n\r\n        out[0] = 1 - yy - zz;\r\n        out[3] = yx - wz;\r\n        out[6] = zx + wy;\r\n\r\n        out[1] = yx + wz;\r\n        out[4] = 1 - xx - zz;\r\n        out[7] = zy - wx;\r\n\r\n        out[2] = zx - wy;\r\n        out[5] = zy + wx;\r\n        out[8] = 1 - xx - yy;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n     *\r\n     * @param {Mat3} out mat3 receiving operation result\r\n     * @param {mat4} a Mat4 to derive the normal matrix from\r\n     *\r\n     * @returns {Mat3} out\r\n     */\r\n    public static normalFromMat4(a: Mat4, out: Mat3) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7];\r\n        let a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11];\r\n        let a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Generates a 2D projection matrix with the given bounds\r\n     *\r\n     * @param {Mat3} out mat3 frustum matrix will be written into\r\n     * @param {number} width Width of your gl context\r\n     * @param {number} height Height of gl context\r\n     * @returns {Mat3} out\r\n     */\r\n    public static projection(width: number, height: number, out: Mat3) {\r\n        out[0] = 2 / width;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = -2 / height;\r\n        out[5] = 0;\r\n        out[6] = -1;\r\n        out[7] = 1;\r\n        out[8] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of a mat3\r\n     *\r\n     * @param {Mat3} a matrix to represent as a string\r\n     * @returns {String} string representation of the matrix\r\n     */\r\n    public static str(a: Mat3) {\r\n        return (\r\n            \"mat3(\" +\r\n            a[0] +\r\n            \", \" +\r\n            a[1] +\r\n            \", \" +\r\n            a[2] +\r\n            \", \" +\r\n            a[3] +\r\n            \", \" +\r\n            a[4] +\r\n            \", \" +\r\n            a[5] +\r\n            \", \" +\r\n            a[6] +\r\n            \", \" +\r\n            a[7] +\r\n            \", \" +\r\n            a[8] +\r\n            \")\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns Frobenius norm of a mat3\r\n     *\r\n     * @param {Mat3} a the matrix to calculate Frobenius norm of\r\n     * @returns {Number} Frobenius norm\r\n     */\r\n    public static frob(a: Mat3) {\r\n        return Math.sqrt(\r\n            Math.pow(a[0], 2) +\r\n                Math.pow(a[1], 2) +\r\n                Math.pow(a[2], 2) +\r\n                Math.pow(a[3], 2) +\r\n                Math.pow(a[4], 2) +\r\n                Math.pow(a[5], 2) +\r\n                Math.pow(a[6], 2) +\r\n                Math.pow(a[7], 2) +\r\n                Math.pow(a[8], 2),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds two mat3's\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the first operand\r\n     * @param {Mat3} b the second operand\r\n     * @returns {Mat3} out\r\n     */\r\n    public static add(a: Mat3, b: Mat3, out: Mat3) {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + b[1];\r\n        out[2] = a[2] + b[2];\r\n        out[3] = a[3] + b[3];\r\n        out[4] = a[4] + b[4];\r\n        out[5] = a[5] + b[5];\r\n        out[6] = a[6] + b[6];\r\n        out[7] = a[7] + b[7];\r\n        out[8] = a[8] + b[8];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Subtracts matrix b from matrix a\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the first operand\r\n     * @param {Mat3} b the second operand\r\n     * @returns {Mat3} out\r\n     */\r\n    public static subtract(a: Mat3, b: Mat3, out: Mat3) {\r\n        out[0] = a[0] - b[0];\r\n        out[1] = a[1] - b[1];\r\n        out[2] = a[2] - b[2];\r\n        out[3] = a[3] - b[3];\r\n        out[4] = a[4] - b[4];\r\n        out[5] = a[5] - b[5];\r\n        out[6] = a[6] - b[6];\r\n        out[7] = a[7] - b[7];\r\n        out[8] = a[8] - b[8];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Multiply each element of the matrix by a scalar.\r\n     *\r\n     * @param {Mat3} out the receiving matrix\r\n     * @param {Mat3} a the matrix to scale\r\n     * @param {Number} b amount to scale the matrix's elements by\r\n     * @returns {Mat3} out\r\n     */\r\n    public static multiplyScalar(a: Mat3, b: number, out: Mat3) {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n        out[3] = a[3] * b;\r\n        out[4] = a[4] * b;\r\n        out[5] = a[5] * b;\r\n        out[6] = a[6] * b;\r\n        out[7] = a[7] * b;\r\n        out[8] = a[8] * b;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n     *\r\n     * @param {Mat3} out the receiving vector\r\n     * @param {Mat3} a the first operand\r\n     * @param {Mat3} b the second operand\r\n     * @param {Number} scale the amount to scale b's elements by before adding\r\n     * @returns {Mat3} out\r\n     */\r\n    public static multiplyScalarAndAdd(a: Mat3, b: Mat3, scale: number, out: Mat3) {\r\n        out[0] = a[0] + b[0] * scale;\r\n        out[1] = a[1] + b[1] * scale;\r\n        out[2] = a[2] + b[2] * scale;\r\n        out[3] = a[3] + b[3] * scale;\r\n        out[4] = a[4] + b[4] * scale;\r\n        out[5] = a[5] + b[5] * scale;\r\n        out[6] = a[6] + b[6] * scale;\r\n        out[7] = a[7] + b[7] * scale;\r\n        out[8] = a[8] + b[8] * scale;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n     *\r\n     * @param {Mat3} a The first matrix.\r\n     * @param {Mat3} b The second matrix.\r\n     * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n     */\r\n    public static exactEquals(a: Mat3, b: Mat3) {\r\n        return (\r\n            a[0] === b[0] &&\r\n            a[1] === b[1] &&\r\n            a[2] === b[2] &&\r\n            a[3] === b[3] &&\r\n            a[4] === b[4] &&\r\n            a[5] === b[5] &&\r\n            a[6] === b[6] &&\r\n            a[7] === b[7] &&\r\n            a[8] === b[8]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the matrices have approximately the same elements in the same position.\r\n     *\r\n     * @param {Mat3} a The first matrix.\r\n     * @param {Mat3} b The second matrix.\r\n     * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n     */\r\n    public static equals(a: Mat3, b: Mat3) {\r\n        let a0 = a[0],\r\n            a1 = a[1],\r\n            a2 = a[2],\r\n            a3 = a[3],\r\n            a4 = a[4],\r\n            a5 = a[5],\r\n            a6 = a[6],\r\n            a7 = a[7],\r\n            a8 = a[8];\r\n        let b0 = b[0],\r\n            b1 = b[1],\r\n            b2 = b[2],\r\n            b3 = b[3],\r\n            b4 = b[4],\r\n            b5 = b[5],\r\n            b6 = b[6],\r\n            b7 = b[7],\r\n            b8 = b[8];\r\n        return (\r\n            Math.abs(a0 - b0) <= EPSILON &&\r\n            Math.abs(a1 - b1) <= EPSILON &&\r\n            Math.abs(a2 - b2) <= EPSILON &&\r\n            Math.abs(a3 - b3) <= EPSILON &&\r\n            Math.abs(a4 - b4) <= EPSILON &&\r\n            Math.abs(a5 - b5) <= EPSILON &&\r\n            Math.abs(a6 - b6) <= EPSILON &&\r\n            Math.abs(a7 - b7) <= EPSILON &&\r\n            Math.abs(a8 - b8) <= EPSILON\r\n        );\r\n    }\r\n}\r\n","import { Vec3 } from \"./vec3\";\r\nimport { Mat3 } from \"./Mat3\";\r\nimport { clamp, EPSILON } from \"./common\";\r\n\r\nexport class Quat extends Float32Array {\r\n    get x() {\r\n        return this[0];\r\n    }\r\n    set x(value: number) {\r\n        this[0] = value;\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n    set y(value: number) {\r\n        this[1] = value;\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n    set z(value: number) {\r\n        this[2] = value;\r\n    }\r\n\r\n    get w() {\r\n        return this[3];\r\n    }\r\n    set w(value: number) {\r\n        this[3] = value;\r\n    }\r\n\r\n    private static Recycle: Quat[] = [];\r\n    public static readonly norot = Quat.create();\r\n    public static create() {\r\n        if (Quat.Recycle && Quat.Recycle.length > 0) {\r\n            let item = Quat.Recycle.pop() as Quat;\r\n            Quat.identity(item);\r\n            return item;\r\n        } else {\r\n            let item = new Quat();\r\n            return item;\r\n        }\r\n    }\r\n    public static clone(from: Quat): Quat {\r\n        if (Quat.Recycle.length > 0) {\r\n            let item = Quat.Recycle.pop() as Quat;\r\n            Quat.copy(from, item);\r\n            return item;\r\n        } else {\r\n            let item = new Quat();\r\n            item[0] = from[0];\r\n            item[1] = from[1];\r\n            item[2] = from[2];\r\n            item[3] = from[3];\r\n            return item;\r\n        }\r\n    }\r\n    public static recycle(item: Quat) {\r\n        Quat.Recycle.push(item);\r\n    }\r\n\r\n    public static disposeRecycledItems() {\r\n        Quat.Recycle.length = 0;\r\n    }\r\n    private constructor() {\r\n        super(4);\r\n        // this[0]=0;\r\n        // this[1]=0;\r\n        // this[2]=0;\r\n        this[3] = 1;\r\n    }\r\n\r\n    /**\r\n     * Copy the values from one Quat to another\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a the source Quaternion\r\n     * @returns out\r\n     * @function\r\n     */\r\n    public static copy(a: Quat | number[], out: Quat): Quat {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Set a Quat to the identity Quaternion\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @returns out\r\n     */\r\n    public static identity(out: Quat): Quat {\r\n        out[0] = 0;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 1;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Gets the rotation axis and angle for a given\r\n     *  Quaternion. If a Quaternion is created with\r\n     *  setAxisAngle, this method will return the same\r\n     *  values as providied in the original parameter list\r\n     *  OR functionally equivalent values.\r\n     * Example: The Quaternion formed by axis [0, 0, 1] and\r\n     *  angle -90 is the same as the Quaternion formed by\r\n     *  [0, 0, 1] and 270. This method favors the latter.\r\n     * @param  {Vec3} axis  Vector receiving the axis of rotation\r\n     * @param  {Quat} q     Quaternion to be decomposed\r\n     * @return {number}     Angle, in radians, of the rotation\r\n     */\r\n    public static getAxisAngle(axis: Vec3, q: Quat): number {\r\n        let rad = Math.acos(q[3]) * 2.0;\r\n        let s = Math.sin(rad / 2.0);\r\n        if (s != 0.0) {\r\n            axis[0] = q[0] / s;\r\n            axis[1] = q[1] / s;\r\n            axis[2] = q[2] / s;\r\n        } else {\r\n            // If s is zero, return any axis (no rotation - axis does not matter)\r\n            axis[0] = 1;\r\n            axis[1] = 0;\r\n            axis[2] = 0;\r\n        }\r\n        return rad;\r\n    }\r\n\r\n    /**\r\n     * Adds two Quat's\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns out\r\n     * @function\r\n     */\r\n    public static add(a: Quat, b: Quat, out: Quat): Quat {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + b[1];\r\n        out[2] = a[2] + b[2];\r\n        out[3] = a[3] + b[3];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Multiplies two Quat's\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns out\r\n     */\r\n    public static multiply(a: Quat, b: Quat, out: Quat): Quat {\r\n        let ax = a[0],\r\n            ay = a[1],\r\n            az = a[2],\r\n            aw = a[3];\r\n        let bx = b[0],\r\n            by = b[1],\r\n            bz = b[2],\r\n            bw = b[3];\r\n\r\n        out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n        out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n        out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n        out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Scales a Quat by a scalar number\r\n     *\r\n     * @param out the receiving vector\r\n     * @param a the vector to scale\r\n     * @param b amount to scale the vector by\r\n     * @returns out\r\n     * @function\r\n     */\r\n    public static scale(a: Quat, b: number, out: Quat): Quat {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n        out[3] = a[3] * b;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the length of a Quat\r\n     *\r\n     * @param a vector to calculate length of\r\n     * @returns length of a\r\n     * @function\r\n     */\r\n    public static length_(a: Quat): number {\r\n        let x = a[0];\r\n        let y = a[1];\r\n        let z = a[2];\r\n        let w = a[3];\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    }\r\n\r\n    /**\r\n     * Calculates the squared length of a Quat\r\n     *\r\n     * @param a vector to calculate squared length of\r\n     * @returns squared length of a\r\n     * @function\r\n     */\r\n    public static squaredLength(a: Quat): number {\r\n        let x = a[0];\r\n        let y = a[1];\r\n        let z = a[2];\r\n        let w = a[3];\r\n        return x * x + y * y + z * z + w * w;\r\n    }\r\n\r\n    /**\r\n     * Normalize a Quat\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param src Quaternion to normalize\r\n     * @returns out\r\n     * @function\r\n     */\r\n    public static normalize(src: Quat, out: Quat): Quat {\r\n        let x = src[0];\r\n        let y = src[1];\r\n        let z = src[2];\r\n        let w = src[3];\r\n        let len = x * x + y * y + z * z + w * w;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n            out[0] = x * len;\r\n            out[1] = y * len;\r\n            out[2] = z * len;\r\n            out[3] = w * len;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the dot product of two Quat's\r\n     *\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @returns dot product of a and b\r\n     * @function\r\n     */\r\n    public static dot(a: Quat, b: Quat): number {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n    }\r\n\r\n    /**\r\n     * Performs a linear interpolation between two Quat's\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @param t interpolation amount between the two inputs\r\n     * @returns out\r\n     * @function\r\n     */\r\n    public static lerp(a: Quat, b: Quat, t: number, out: Quat): Quat {\r\n        let ax = a[0];\r\n        let ay = a[1];\r\n        let az = a[2];\r\n        let aw = a[3];\r\n        out[0] = ax + t * (b[0] - ax);\r\n        out[1] = ay + t * (b[1] - ay);\r\n        out[2] = az + t * (b[2] - az);\r\n        out[3] = aw + t * (b[3] - aw);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Performs a spherical linear interpolation between two Quat\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a the first operand\r\n     * @param b the second operand\r\n     * @param t interpolation amount between the two inputs\r\n     * @returns out\r\n     */\r\n    public static slerp(a: Quat, b: Quat, t: number, out: Quat): Quat {\r\n        // benchmarks:\r\n        //    http://jsperf.com/Quaternion-slerp-implementations\r\n        let ax = a[0],\r\n            ay = a[1],\r\n            az = a[2],\r\n            aw = a[3];\r\n        let bx = b[0],\r\n            by = b[1],\r\n            bz = b[2],\r\n            bw = b[3];\r\n\r\n        let omega: number = void 0,\r\n            cosom: number = void 0,\r\n            sinom: number = void 0,\r\n            scale0: number = void 0,\r\n            scale1: number = void 0;\r\n\r\n        // calc cosine\r\n        cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n        // adjust signs (if necessary)\r\n        if (cosom < 0.0) {\r\n            cosom = -cosom;\r\n            bx = -bx;\r\n            by = -by;\r\n            bz = -bz;\r\n            bw = -bw;\r\n        }\r\n        // calculate coefficients\r\n        if (1.0 - cosom > 0.000001) {\r\n            // standard case (slerp)\r\n            omega = Math.acos(cosom);\r\n            sinom = Math.sin(omega);\r\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n            scale1 = Math.sin(t * omega) / sinom;\r\n        } else {\r\n            // \"from\" and \"to\" Quaternions are very close\r\n            //  ... so we can do a linear interpolation\r\n            scale0 = 1.0 - t;\r\n            scale1 = t;\r\n        }\r\n        // calculate final values\r\n        out[0] = scale0 * ax + scale1 * bx;\r\n        out[1] = scale0 * ay + scale1 * by;\r\n        out[2] = scale0 * az + scale1 * bz;\r\n        out[3] = scale0 * aw + scale1 * bw;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Performs a spherical linear interpolation with two control points\r\n     *\r\n     * @param {Quat} out the receiving Quaternion\r\n     * @param {Quat} a the first operand\r\n     * @param {Quat} b the second operand\r\n     * @param {Quat} c the third operand\r\n     * @param {Quat} d the fourth operand\r\n     * @param {number} t interpolation amount\r\n     * @returns {Quat} out\r\n     */\r\n    public static sqlerp(a: Quat, b: Quat, c: Quat, d: Quat, t: number, out: Quat): Quat {\r\n        let temp1 = Quat.create();\r\n        let temp2 = Quat.create();\r\n\r\n        Quat.slerp(a, d, t, temp1);\r\n        Quat.slerp(b, c, t, temp2);\r\n        Quat.slerp(temp1, temp2, 2 * t * (1 - t), out);\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the inverse of a Quat\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a Quat to calculate inverse of\r\n     * @returns out\r\n     */\r\n    public static inverse(a: Quat, out: Quat): Quat {\r\n        let a0 = a[0],\r\n            a1 = a[1],\r\n            a2 = a[2],\r\n            a3 = a[3];\r\n        let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n        let invDot = dot ? 1.0 / dot : 0;\r\n\r\n        // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n        out[0] = -a0 * invDot;\r\n        out[1] = -a1 * invDot;\r\n        out[2] = -a2 * invDot;\r\n        out[3] = a3 * invDot;\r\n        return out;\r\n    }\r\n    /**\r\n     * Calculates the conjugate of a Quat\r\n     * If the Quaternion is normalized, this function is faster than Quat.inverse and produces the same result.\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a Quat to calculate conjugate of\r\n     * @returns out\r\n     */\r\n    public static conjugate(out: Quat, a: Quat): Quat {\r\n        out[0] = -a[0];\r\n        out[1] = -a[1];\r\n        out[2] = -a[2];\r\n        out[3] = a[3];\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of a Quaternion\r\n     *\r\n     * @param a Quat to represent as a string\r\n     * @returns string representation of the Quat\r\n     */\r\n    public static str(a: Quat): string {\r\n        return \"Quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n    }\r\n\r\n    /**\r\n     * Rotates a Quaternion by the given angle about the X axis\r\n     *\r\n     * @param out Quat receiving operation result\r\n     * @param a Quat to rotate\r\n     * @param rad angle (in radians) to rotate\r\n     * @returns out\r\n     */\r\n    public static rotateX(a: Quat, rad: number, out: Quat): Quat {\r\n        rad *= 0.5;\r\n\r\n        let ax = a[0],\r\n            ay = a[1],\r\n            az = a[2],\r\n            aw = a[3];\r\n        let bx = Math.sin(rad),\r\n            bw = Math.cos(rad);\r\n\r\n        out[0] = ax * bw + aw * bx;\r\n        out[1] = ay * bw + az * bx;\r\n        out[2] = az * bw - ay * bx;\r\n        out[3] = aw * bw - ax * bx;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a Quaternion by the given angle about the Y axis\r\n     *\r\n     * @param out Quat receiving operation result\r\n     * @param a Quat to rotate\r\n     * @param rad angle (in radians) to rotate\r\n     * @returns out\r\n     */\r\n    public static rotateY(a: Quat, rad: number, out: Quat): Quat {\r\n        rad *= 0.5;\r\n\r\n        let ax = a[0],\r\n            ay = a[1],\r\n            az = a[2],\r\n            aw = a[3];\r\n        let by = Math.sin(rad),\r\n            bw = Math.cos(rad);\r\n\r\n        out[0] = ax * bw - az * by;\r\n        out[1] = ay * bw + aw * by;\r\n        out[2] = az * bw + ax * by;\r\n        out[3] = aw * bw - ay * by;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a Quaternion by the given angle about the Z axis\r\n     *\r\n     * @param out Quat receiving operation result\r\n     * @param a Quat to rotate\r\n     * @param rad angle (in radians) to rotate\r\n     * @returns out\r\n     */\r\n    public static rotateZ(a: Quat, rad: number, out: Quat): Quat {\r\n        rad *= 0.5;\r\n\r\n        let ax = a[0],\r\n            ay = a[1],\r\n            az = a[2],\r\n            aw = a[3];\r\n        let bz = Math.sin(rad),\r\n            bw = Math.cos(rad);\r\n\r\n        out[0] = ax * bw + ay * bz;\r\n        out[1] = ay * bw - ax * bz;\r\n        out[2] = az * bw + aw * bz;\r\n        out[3] = aw * bw - az * bz;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Creates a Quaternion from the given 3x3 rotation matrix.\r\n     *\r\n     * NOTE: The resultant Quaternion is not normalized, so you should be sure\r\n     * to renormalize the Quaternion yourself where necessary.\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param m rotation matrix\r\n     * @returns out\r\n     * @function\r\n     */\r\n    public static fromMat3(m: Mat3, out: Quat): Quat {\r\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n        // article \"Quaternion Calculus and Fast Animation\".\r\n        let fTrace = m[0] + m[4] + m[8];\r\n        let fRoot: number = void 0;\r\n\r\n        if (fTrace > 0.0) {\r\n            // |w| > 1/2, may as well choose w > 1/2\r\n            fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n            out[3] = 0.5 * fRoot;\r\n            fRoot = 0.5 / fRoot; // 1/(4w)\r\n            out[0] = (m[5] - m[7]) * fRoot;\r\n            out[1] = (m[6] - m[2]) * fRoot;\r\n            out[2] = (m[1] - m[3]) * fRoot;\r\n        } else {\r\n            // |w| <= 1/2\r\n            let i = 0;\r\n            if (m[4] > m[0]) i = 1;\r\n            if (m[8] > m[i * 3 + i]) i = 2;\r\n            let j = (i + 1) % 3;\r\n            let k = (i + 2) % 3;\r\n\r\n            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n            out[i] = 0.5 * fRoot;\r\n            fRoot = 0.5 / fRoot;\r\n            out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n            out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n            out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Sets the specified Quaternion with values corresponding to the given\r\n     * axes. Each axis is a Vec3 and is expected to be unit length and\r\n     * perpendicular to all other specified axes.\r\n     *\r\n     * @param out the receiving Quat\r\n     * @param view  the vector representing the viewing direction\r\n     * @param right the vector representing the local \"right\" direction\r\n     * @param up    the vector representing the local \"up\" direction\r\n     * @returns out\r\n     */\r\n    public static setAxes(view: Vec3, right: Vec3, up: Vec3, out: Quat): Quat {\r\n        let matr = Mat3.create();\r\n\r\n        matr[0] = right[0];\r\n        matr[3] = right[1];\r\n        matr[6] = right[2];\r\n\r\n        matr[1] = up[0];\r\n        matr[4] = up[1];\r\n        matr[7] = up[2];\r\n\r\n        matr[2] = -view[0];\r\n        matr[5] = -view[1];\r\n        matr[8] = -view[2];\r\n        Quat.fromMat3(matr, out);\r\n        matr = null;\r\n\r\n        return Quat.normalize(out, out);\r\n    }\r\n\r\n    /**\r\n     * Calculates the W component of a Quat from the X, Y, and Z components.\r\n     * Assumes that Quaternion is 1 unit in length.\r\n     * Any existing W component will be ignored.\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param a Quat to calculate W component of\r\n     * @returns out\r\n     */\r\n    public static calculateW(a: Quat, out: Quat): Quat {\r\n        let x = a[0],\r\n            y = a[1],\r\n            z = a[2];\r\n\r\n        out[0] = x;\r\n        out[1] = y;\r\n        out[2] = z;\r\n        out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the Quaternions have exactly the same elements in the same position (when compared with ===)\r\n     *\r\n     * @param {Quat} a The first vector.\r\n     * @param {Quat} b The second vector.\r\n     * @returns {boolean} True if the Quaternions are equal, false otherwise.\r\n     */\r\n    public static exactEquals(a: Quat, b: Quat): boolean {\r\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n    }\r\n\r\n    // /**\r\n    //  * Returns whether or not the Quaternions have approximately the same elements in the same position.\r\n    //  *\r\n    //  * @param {Quat} a The first vector.\r\n    //  * @param {Quat} b The second vector.\r\n    //  * @returns {boolean} True if the Quaternions are equal, false otherwise.\r\n    //  */\r\n    // public static equals (a: Quat, b: Quat): boolean{\r\n    //     let a0 = a[0],\r\n    //     a1 = a[1],\r\n    //     a2 = a[2],\r\n    //     a3 = a[3];\r\n    // let b0 = b[0],\r\n    //     b1 = b[1],\r\n    //     b2 = b[2],\r\n    //     b3 = b[3];\r\n    // return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n\r\n    // }\r\n    static fromYawPitchRoll(yaw: number, pitch: number, roll: number, result: Quat): void {\r\n        // Produces a Quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\r\n        let halfRoll = roll * 0.5;\r\n        let halfPitch = pitch * 0.5;\r\n        let halfYaw = yaw * 0.5;\r\n\r\n        let sinRoll = Math.sin(halfRoll);\r\n        let cosRoll = Math.cos(halfRoll);\r\n        let sinPitch = Math.sin(halfPitch);\r\n        let cosPitch = Math.cos(halfPitch);\r\n        let sinYaw = Math.sin(halfYaw);\r\n        let cosYaw = Math.cos(halfYaw);\r\n\r\n        result[0] = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\r\n        result[1] = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\r\n        result[2] = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\r\n        result[3] = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\r\n    }\r\n    /**舍弃glmatrix 的fromeuler  （坐标系不同算法不同）\r\n     * Creates a Quaternion from the given euler angle x, y, z.\r\n     * rot order： z-y-x\r\n     * @param {x} Angle to rotate around X axis in degrees.\r\n     * @param {y} Angle to rotate around Y axis in degrees.\r\n     * @param {z} Angle to rotate around Z axis in degrees.\r\n     * @param {Quat} out the receiving Quaternion\r\n     * @returns {Quat} out\r\n     * @function\r\n     */\r\n    static FromEuler(x: number, y: number, z: number, out: Quat): Quat {\r\n        x *= (0.5 * Math.PI) / 180;\r\n        y *= (0.5 * Math.PI) / 180;\r\n        z *= (0.5 * Math.PI) / 180;\r\n\r\n        let cosX: number = Math.cos(x),\r\n            sinX: number = Math.sin(x);\r\n        let cosY: number = Math.cos(y),\r\n            sinY: number = Math.sin(y);\r\n        let cosZ: number = Math.cos(z),\r\n            sinZ: number = Math.sin(z);\r\n\r\n        out[0] = sinX * cosY * cosZ + cosX * sinY * sinZ;\r\n        out[1] = cosX * sinY * cosZ - sinX * cosY * sinZ;\r\n        out[2] = cosX * cosY * sinZ - sinX * sinY * cosZ;\r\n        out[3] = cosX * cosY * cosZ + sinX * sinY * sinZ;\r\n\r\n        this.normalize(out, out);\r\n        return out;\r\n    }\r\n    static ToEuler(src: Quat, out: Vec3) {\r\n        let x = src[0],\r\n            y = src[1],\r\n            z = src[2],\r\n            w = src[3];\r\n        let temp: number = 2.0 * (w * x - y * z);\r\n        temp = clamp(temp, -1.0, 1.0);\r\n        out[0] = Math.asin(temp);\r\n        out[1] = Math.atan2(2.0 * (w * y + z * x), 1.0 - 2.0 * (y * y + x * x));\r\n        out[2] = Math.atan2(2.0 * (w * z + y * x), 1.0 - 2.0 * (x * x + z * z));\r\n\r\n        out[0] /= Math.PI / 180;\r\n        out[1] /= Math.PI / 180;\r\n        out[2] /= Math.PI / 180;\r\n    }\r\n\r\n    /**\r\n     * Sets a Quat from the given angle and rotation axis,\r\n     * then returns it.\r\n     *\r\n     * @param out the receiving Quaternion\r\n     * @param axis the axis around which to rotate\r\n     * @param rad （弧度）the angle in radians\r\n     * @returns out\r\n     **/\r\n    public static AxisAngle(axis: Vec3, rad: number, out: Quat): Quat {\r\n        rad = rad * 0.5;\r\n        let s = Math.sin(rad);\r\n        out[0] = s * axis[0];\r\n        out[1] = s * axis[1];\r\n        out[2] = s * axis[2];\r\n        out[3] = Math.cos(rad);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Sets a Quaternion to represent the shortest rotation from one\r\n     * vector to another.\r\n     *\r\n     * Both vectors are assumed to be unit length.\r\n     *\r\n     * @param out the receiving Quaternion.\r\n     * @param from the initial vector\r\n     * @param to the destination vector\r\n     * @returns out\r\n     */\r\n    public static rotationTo(from: Vec3, to: Vec3, out: Quat): Quat {\r\n        let tmpVec3 = Vec3.create();\r\n        let xUnitVec3 = Vec3.RIGHT;\r\n        let yUnitVec3 = Vec3.UP;\r\n\r\n        let dot = Vec3.dot(from, to);\r\n        if (dot < -0.999999) {\r\n            Vec3.cross(tmpVec3, xUnitVec3, from);\r\n            if (Vec3.magnitude(tmpVec3) < 0.000001) Vec3.cross(tmpVec3, yUnitVec3, from);\r\n            Vec3.normalize(tmpVec3, tmpVec3);\r\n            Quat.AxisAngle(tmpVec3, Math.PI, out);\r\n            return out;\r\n        } else if (dot > 0.999999) {\r\n            out[0] = 0;\r\n            out[1] = 0;\r\n            out[2] = 0;\r\n            out[3] = 1;\r\n            return out;\r\n        } else {\r\n            Vec3.cross(tmpVec3, from, to);\r\n            out[0] = tmpVec3[0];\r\n            out[1] = tmpVec3[1];\r\n            out[2] = tmpVec3[2];\r\n            out[3] = 1 + dot;\r\n            return Quat.normalize(out, out);\r\n        }\r\n    }\r\n    static myLookRotation(dir: Vec3, out: Quat, up: Vec3 = Vec3.UP) {\r\n        if (Vec3.exactEquals(dir, Vec3.ZERO)) {\r\n            console.log(\"Zero direction in MyLookRotation\");\r\n            return Quat.norot;\r\n        }\r\n        if (!Vec3.exactEquals(dir, up)) {\r\n            let tempv = Vec3.create();\r\n            Vec3.scale(up, Vec3.dot(up, dir), tempv);\r\n            Vec3.subtract(dir, tempv, tempv);\r\n            let qu = Quat.create();\r\n            this.rotationTo(Vec3.FORWARD, tempv, qu);\r\n            let qu2 = Quat.create();\r\n            this.rotationTo(tempv, dir, qu2);\r\n            Quat.multiply(qu, qu2, out);\r\n        } else {\r\n            this.rotationTo(Vec3.FORWARD, dir, out);\r\n        }\r\n    }\r\n    // /**\r\n    //  *\r\n    //  * @param pos transform self pos\r\n    //  * @param targetpos targetpos\r\n    //  * @param out\r\n    //  * @param up\r\n    //  */\r\n    // static lookat(pos: Vec3, targetpos: Vec3, out: Quat,up:Vec3=Vec3.UP)\r\n    // {\r\n    //     let baseDir=Vec3.BACKWARD;\r\n\r\n    //     let dir = Vec3.create();\r\n    //     Vec3.subtract(targetpos, pos, dir);\r\n    //     Vec3.normalize(dir, dir);\r\n    //     let dot = Vec3.dot(baseDir, dir);\r\n    //     if (Math.abs(dot - (-1.0)) < 0.000001)\r\n    //     {\r\n    //         this.AxisAngle(Vec3.UP, Math.PI, out);\r\n    //     }else if(Math.abs(dot - 1.0) < 0.000001)\r\n    //     {\r\n    //         Quat.identity(out);\r\n    //     }else\r\n    //     {\r\n    //         dot = clamp(dot, -1, 1);\r\n    //         let rotangle = Math.acos(dot);\r\n    //         let rotAxis = Vec3.create();\r\n    //         Vec3.cross(baseDir, dir, rotAxis);\r\n    //         Vec3.normalize(rotAxis,rotAxis);\r\n    //         Quat.AxisAngle(rotAxis, rotangle, out);\r\n    //     }\r\n\r\n    //     let targetdirx:Vec3=Vec3.create();\r\n    //     Vec3.cross(up,out,targetdirx);\r\n    //     let dotx = Vec3.dot(targetdirx,Vec3.RIGHT);\r\n    //     let rot2=Quat.create();\r\n    //     if (Math.abs(dotx - 1.0) < 0.000001)\r\n    //     {\r\n    //     }else if(Math.abs(dotx - 1.0) < 0.000001)\r\n    //     {\r\n    //         this.AxisAngle(Vec3.FORWARD, Math.PI, rot2);\r\n    //         Quat.multiply(out,rot2,out);\r\n    //     }else\r\n    //     {\r\n    //         let rotAxis=Vec3.create();\r\n    //         Vec3.cross(Vec3.RIGHT,targetdirx,rotAxis);\r\n    //         dotx = clamp(dotx, -1, 1);\r\n    //         let rotangle = Math.acos(dotx);\r\n    //         Quat.AxisAngle(rotAxis, rotangle, rot2);\r\n    //         Quat.multiply(out,rot2,out);\r\n    //     }\r\n\r\n    //     Vec3.recycle(dir);\r\n    //     // Vec3.recycle(rotAxis);\r\n\r\n    //     // let dir = Vec3.create();\r\n    //     // Vec3.subtract(targetpos, pos, dir);\r\n    //     // Vec3.normalize(dir, dir);\r\n    //     // this.rotationTo(Vec3.BACKWARD,dir,out);\r\n    // }\r\n\r\n    static LookRotation(lookAt: Vec3, up: Vec3 = Vec3.UP) {\r\n        /*Vector forward = lookAt.Normalized();\r\n            Vector right = Vector::Cross(up.Normalized(), forward);\r\n            Vector up = Vector::Cross(forward, right);*/\r\n\r\n        // Vector forward = lookAt.Normalized();\r\n        // Vector::OrthoNormalize(&up, &forward); // Keeps up the same, make forward orthogonal to up\r\n        // Vector right = Vector::Cross(up, forward);\r\n\r\n        // Quaternion ret;\r\n        // ret.w = sqrtf(1.0f + right.x + up.y + forward.z) * 0.5f;\r\n        // float w4_recip = 1.0f / (4.0f * ret.w);\r\n        // ret.x = (forward.y - up.z) * w4_recip;\r\n        // ret.y = (right.z - forward.x) * w4_recip;\r\n        // ret.z = (up.x - right.y) * w4_recip;\r\n\r\n        // return ret;\r\n\r\n        let forward = Vec3.create();\r\n        Vec3.normalize(lookAt, forward);\r\n        let right = Vec3.create();\r\n        Vec3.cross(up, forward, right);\r\n    }\r\n\r\n    static transformVector(src: Quat, vector: Vec3, out: Vec3) {\r\n        var x1: number, y1: number, z1: number, w1: number;\r\n        var x2: number = vector[0],\r\n            y2: number = vector[1],\r\n            z2: number = vector[2];\r\n\r\n        w1 = -src[0] * x2 - src[1] * y2 - src[2] * z2;\r\n        x1 = src[3] * x2 + src[1] * z2 - src[2] * y2;\r\n        y1 = src[3] * y2 - src[0] * z2 + src[2] * x2;\r\n        z1 = src[3] * z2 + src[0] * y2 - src[1] * x2;\r\n\r\n        out.x = -w1 * src[0] + x1 * src[3] - y1 * src[2] + z1 * src[1];\r\n        out.y = -w1 * src[1] + x1 * src[2] + y1 * src[3] - z1 * src[0];\r\n        out.z = -w1 * src[2] - x1 * src[1] + y1 * src[0] + z1 * src[3];\r\n    }\r\n    static unitxyzToRotation(xAxis: Vec3, yAxis: Vec3, zAxis: Vec3, out: Quat) {\r\n        var m11 = xAxis[0],\r\n            m12 = yAxis[0],\r\n            m13 = zAxis[0];\r\n        var m21 = xAxis[1],\r\n            m22 = yAxis[1],\r\n            m23 = zAxis[1];\r\n        var m31 = xAxis[2],\r\n            m32 = yAxis[2],\r\n            m33 = zAxis[2];\r\n        var trace = m11 + m22 + m33;\r\n        var s;\r\n        if (trace > 0) {\r\n            s = 0.5 / Math.sqrt(trace + 1.0);\r\n\r\n            out.w = 0.25 / s;\r\n            out.x = (m32 - m23) * s;\r\n            out.y = (m13 - m31) * s;\r\n            out.z = (m21 - m12) * s;\r\n        } else if (m11 > m22 && m11 > m33) {\r\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n\r\n            out.w = (m32 - m23) / s;\r\n            out.x = 0.25 * s;\r\n            out.y = (m12 + m21) / s;\r\n            out.z = (m13 + m31) / s;\r\n        } else if (m22 > m33) {\r\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n\r\n            out.w = (m13 - m31) / s;\r\n            out.x = (m12 + m21) / s;\r\n            out.y = 0.25 * s;\r\n            out.z = (m23 + m32) / s;\r\n        } else {\r\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n\r\n            out.w = (m21 - m12) / s;\r\n            out.x = (m13 + m31) / s;\r\n            out.y = (m23 + m32) / s;\r\n            out.z = 0.25 * s;\r\n        }\r\n    }\r\n    static lookat(pos: Vec3, targetpos: Vec3, out: Quat, up: Vec3 = Vec3.UP) {\r\n        // let baseDir=Vec3.BACKWARD;\r\n        let dirz = Vec3.create();\r\n        Vec3.subtract(pos, targetpos, dirz);\r\n        Vec3.normalize(dirz, dirz);\r\n\r\n        let dirx: Vec3 = Vec3.create();\r\n        Vec3.cross(up, dirz, dirx);\r\n        Vec3.normalize(dirx, dirx);\r\n\r\n        let diry: Vec3 = Vec3.create();\r\n        Vec3.cross(dirz, dirx, diry);\r\n        // Vec3.normalize(diry, diry);\r\n\r\n        this.unitxyzToRotation(dirx, diry, dirz, out);\r\n\r\n        Vec3.recycle(dirx);\r\n        Vec3.recycle(diry);\r\n        Vec3.recycle(dirz);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the vectors have approximately the same elements in the same Quat.\r\n     *\r\n     * @param {vec4} a The first vector.\r\n     * @param {vec4} b The second vector.\r\n     * @returns {boolean} True if the vectors are equal, false otherwise.\r\n     */\r\n    public static equals(a: Quat, b: Quat): boolean {\r\n        let a0 = a[0],\r\n            a1 = a[1],\r\n            a2 = a[2],\r\n            a3 = a[3];\r\n        let b0 = b[0],\r\n            b1 = b[1],\r\n            b2 = b[2],\r\n            b3 = b[3];\r\n        return (\r\n            Math.abs(a0 - b0) <= EPSILON &&\r\n            Math.abs(a1 - b1) <= EPSILON &&\r\n            Math.abs(a2 - b2) <= EPSILON &&\r\n            Math.abs(a3 - b3) <= EPSILON\r\n        );\r\n    }\r\n    /**\r\n     *\r\n     * @param from\r\n     * @param to\r\n     * @param out\r\n     */\r\n    static fromToRotation(from: Vec3, to: Vec3, out: Quat) {\r\n        let dir1 = Vec3.create();\r\n        let dir2 = Vec3.create();\r\n\r\n        Vec3.normalize(from, dir1);\r\n        Vec3.normalize(to, dir2);\r\n\r\n        let dir = Vec3.create();\r\n        Vec3.cross(dir1, dir2, dir);\r\n        if (Vec3.magnitude(dir) < 0.001) {\r\n            Quat.identity(out);\r\n        } else {\r\n            let dot = Vec3.dot(dir1, dir2);\r\n            Vec3.normalize(dir, dir);\r\n            Quat.AxisAngle(dir, Math.acos(dot), out);\r\n        }\r\n        Vec3.recycle(dir);\r\n        Vec3.recycle(dir1);\r\n        Vec3.recycle(dir2);\r\n    }\r\n}\r\n","import { EC, Icomponent, Ientity } from \"../ec\";\r\nimport { Vec3 } from \"../../mathD/vec3\";\r\nimport { Quat } from \"../../mathD/quat\";\r\nimport { Mat4 } from \"../../mathD/mat4\";\r\nimport { IframeState } from \"../../scene/frameState\";\r\n\r\nenum DirtyFlagEnum {\r\n    WWORLD_POS = 0b000100,\r\n    WORLD_ROTATION = 0b001000,\r\n    WORLD_SCALE = 0b010000,\r\n    LOCALMAT = 0b000001,\r\n    WORLDMAT = 0b000010,\r\n}\r\n\r\n@EC.RegComp\r\nexport class Transform implements Icomponent {\r\n    entity: Ientity;\r\n    parent: Transform;\r\n    children: Transform[] = [];\r\n    dirtyFlag: number = 0;\r\n\r\n    //------------------------local属性-------------------------------------------------------------\r\n    //----------------------------------------------------------------------------------------------\r\n    //localposition/localrot/localscale修改之后，markDirty 一下\r\n    //----------------------------------------------------------------------------------------------\r\n    localPosition: Vec3 = Vec3.create();\r\n    localRotation: Quat = Quat.create();\r\n    localScale: Vec3 = Vec3.create(1, 1, 1);\r\n    private _localMatrix: Mat4 = Mat4.create();\r\n    set localMatrix(value: Mat4) {\r\n        this._localMatrix = value;\r\n        Mat4.decompose(this._localMatrix, this.localScale, this.localRotation, this.localPosition);\r\n        this.dirtyFlag = this.dirtyFlag & ~DirtyFlagEnum.LOCALMAT;\r\n        this.dirtyFlag = this.dirtyFlag | DirtyFlagEnum.WORLDMAT;\r\n\r\n        Transform.NotifyChildSelfDirty(this);\r\n    }\r\n\r\n    get localMatrix() {\r\n        if (this.dirtyFlag & DirtyFlagEnum.LOCALMAT) {\r\n            Mat4.RTS(this.localPosition, this.localScale, this.localRotation, this._localMatrix);\r\n            this.dirtyFlag = this.dirtyFlag & ~DirtyFlagEnum.LOCALMAT;\r\n        }\r\n        return this._localMatrix;\r\n    }\r\n\r\n    //-------------------------world属性--------------------------------------------------------------\r\n    //------------------------------------------------------------------------------------------------\r\n    //得到worldmatrix后，不会立刻decompse得到worldpos/worldscale/worldort,而是dirty标记起来.\r\n    //setworld属性都是转换到setlocal属性\r\n    //------------------------------------------------------------------------------------------------\r\n    private _worldPosition: Vec3 = Vec3.create();\r\n    get worldPosition(): Vec3 {\r\n        if (this.dirtyFlag & (DirtyFlagEnum.WORLDMAT | DirtyFlagEnum.WWORLD_POS)) {\r\n            Mat4.getTranslationing(this.worldMatrix, this._worldPosition);\r\n            this.dirtyFlag = this.dirtyFlag & ~DirtyFlagEnum.WWORLD_POS;\r\n        }\r\n        return this._worldPosition;\r\n    }\r\n    set worldPosition(value: Vec3) {\r\n        if (this.parent == null) {\r\n            return;\r\n        }\r\n        if (this.parent.parent == null) {\r\n            this.localPosition = value;\r\n        } else {\r\n            let invparentworld = Mat4.create();\r\n            Mat4.invert(this.parent.worldMatrix, invparentworld);\r\n            Mat4.transformPoint(value, invparentworld, this.localPosition);\r\n            Mat4.recycle(invparentworld);\r\n        }\r\n        this.markDirty();\r\n    }\r\n\r\n    private _worldRotation: Quat = Quat.create();\r\n    get worldRotation() {\r\n        if (this.dirtyFlag & (DirtyFlagEnum.WORLDMAT | DirtyFlagEnum.WORLD_ROTATION)) {\r\n            Mat4.getRotationing(this.worldMatrix, this._worldRotation, this.worldScale);\r\n            this.dirtyFlag = this.dirtyFlag & ~DirtyFlagEnum.WORLD_ROTATION;\r\n        }\r\n        return this._worldRotation;\r\n    }\r\n    set worldRotation(value: Quat) {\r\n        if (this.parent == null) {\r\n            return;\r\n        }\r\n        if (this.parent.parent == null) {\r\n            this.localRotation = value;\r\n        } else {\r\n            let invparentworldrot = Quat.create();\r\n            Quat.inverse(this.parent.worldRotation, invparentworldrot);\r\n            Quat.multiply(invparentworldrot, value, this.localRotation);\r\n            Quat.recycle(invparentworldrot);\r\n        }\r\n        this.markDirty();\r\n    }\r\n\r\n    private _worldScale: Vec3 = Vec3.create(1, 1, 1);\r\n    get worldScale(): Vec3 {\r\n        if (this.dirtyFlag & (DirtyFlagEnum.WORLDMAT | DirtyFlagEnum.WORLD_SCALE)) {\r\n            Mat4.getScaling(this.worldMatrix, this._worldScale);\r\n            this.dirtyFlag = this.dirtyFlag & ~DirtyFlagEnum.WORLD_SCALE;\r\n        }\r\n        return this._worldScale;\r\n    }\r\n    set worldScale(value: Vec3) {\r\n        if (this.parent == null) {\r\n            return;\r\n        }\r\n        if (this.parent.parent == null) {\r\n            this.localScale = value;\r\n        } else {\r\n            Vec3.divide(value, this.parent.worldScale, this.localScale);\r\n        }\r\n        this.markDirty();\r\n    }\r\n\r\n    private _worldMatrix: Mat4 = Mat4.create();\r\n    get worldMatrix(): Mat4 {\r\n        if (this.dirtyFlag & (DirtyFlagEnum.WORLDMAT | DirtyFlagEnum.LOCALMAT)) {\r\n            Mat4.multiply(this.parent.worldMatrix, this.localMatrix, this._worldMatrix);\r\n            this.dirtyFlag = this.dirtyFlag & ~DirtyFlagEnum.WORLDMAT;\r\n            this.dirtyFlag =\r\n                this.dirtyFlag | DirtyFlagEnum.WORLD_ROTATION | DirtyFlagEnum.WORLD_SCALE | DirtyFlagEnum.WWORLD_POS;\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n    set worldMatrix(value: Mat4) {\r\n        if (this.parent == null) {\r\n            return;\r\n        }\r\n        if (this.parent.parent == null) {\r\n            Mat4.copy(value, this._localMatrix);\r\n            this.localMatrix = this._localMatrix;\r\n        } else {\r\n            let invparentworld = Mat4.create();\r\n            Mat4.invert(this.parent.worldMatrix, invparentworld);\r\n            Mat4.multiply(invparentworld, value, this._localMatrix);\r\n            this.localMatrix = this._localMatrix;\r\n            Mat4.recycle(invparentworld);\r\n            this.dirtyFlag = this.dirtyFlag & ~DirtyFlagEnum.WORLDMAT;\r\n            this.dirtyFlag =\r\n                this.dirtyFlag | DirtyFlagEnum.WORLD_ROTATION | DirtyFlagEnum.WORLD_SCALE | DirtyFlagEnum.WWORLD_POS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知子节点需要计算worldmatrix\r\n     * @param node\r\n     */\r\n    private static NotifyChildSelfDirty(node: Transform) {\r\n        for (let key in node.children) {\r\n            let child = node.children[key];\r\n            if (child.dirtyFlag & DirtyFlagEnum.WORLDMAT) {\r\n                child.dirtyFlag = child.dirtyFlag | DirtyFlagEnum.WORLDMAT;\r\n                this.NotifyChildSelfDirty(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 修改local属性后，标记dirty\r\n     */\r\n    markDirty() {\r\n        this.dirtyFlag = this.dirtyFlag | DirtyFlagEnum.LOCALMAT | DirtyFlagEnum.WORLDMAT;\r\n        Transform.NotifyChildSelfDirty(this);\r\n    }\r\n\r\n    ///------------------------------------------父子结构\r\n    /**\r\n     * 添加子物体实例\r\n     */\r\n    addChild(node: Transform) {\r\n        if (node.parent != null) {\r\n            node.parent.removeChild(node);\r\n        }\r\n        this.children.push(node);\r\n        node.parent = this;\r\n\r\n        node.markDirty();\r\n    }\r\n    /**\r\n     * 移除所有子物体\r\n     */\r\n    removeAllChild() {\r\n        //if(this.children==undefined||this.children.length==0) return;\r\n        if (this.children.length == 0) return;\r\n        for (let i = 0, len = this.children.length; i < len; i++) {\r\n            this.children[i].parent = null;\r\n        }\r\n        this.children.length = 0;\r\n    }\r\n    /**\r\n     * 移除指定子物体\r\n     */\r\n    removeChild(node: Transform) {\r\n        if (node.parent != this || this.children.length == 0) {\r\n            throw new Error(\"not my child.\");\r\n        }\r\n        let i = this.children.indexOf(node);\r\n        if (i >= 0) {\r\n            this.children.splice(i, 1);\r\n            node.parent = null;\r\n        }\r\n    }\r\n\r\n    update(frameState: IframeState): void {}\r\n    dispose(): void {\r\n        this.parent = null;\r\n        this.children = null;\r\n    }\r\n}\r\n","import { ToyGL } from \"../src/toygl\";\r\nwindow.onload = () => {\r\n    let render = new ToyGL();\r\n};\r\n"],"names":["GlConstants","lerp"],"mappings":"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AG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACnD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACpD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACpD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACpD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACpD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YACpD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;YAEpD,OAAO,GAAG,CAAC;SACd;;;;;;;;QASM,OAAO,OAAO,CAAC,CAAO,EAAE,GAAS;YACpC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EACX,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAChB,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EACX,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EACX,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EACX,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAEhB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACvG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YAC1G,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACvG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YAC1G,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YAC1G,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACvG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YAC1G,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACvG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACvG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YAC1G,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACxG,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YAC3G,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG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Z,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACZ,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACZ,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YAEnD,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACZ,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACZ,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YACb,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YACb,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YACnD,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YACpD,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;YAEpD,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YACb,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,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,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC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AG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEf,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YAE3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YAE3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YAC3C,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"}